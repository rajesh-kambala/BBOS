<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TSIUtils</name>
    </assembly>
    <members>
        <member name="T:TSI.Security.AESEncryption">
            <summary>
            This class provides encryption/decryption functionality.  
            </summary>
        </member>
        <member name="M:TSI.Security.AESEncryption.#ctor(System.String)">
            <summary>
            Initializes the object with the EncryptionKey and EncryptionInitializer
            application setting values.  If not found, default values are used.
            </summary>
        </member>
        <member name="M:TSI.Security.AESEncryption.#ctor(System.String,System.String)">
            <summary>
            Initializes the object with the specified EncryptionKey and EncryptionInitializer
            values.
            </summary>
        </member>
        <member name="P:TSI.Security.AESEncryption.EncryptionKey">
            <summary>
            The Encryption Key to use for encryption and
            decrytion.  If the length of the key exceeds the
            cryptogrophy's BlockSize, it will be truncated to
            that BlockSize.
            </summary>
        </member>
        <member name="P:TSI.Security.AESEncryption.Initializer">
            <summary>
            The Initializer to use for encryption and
            decryption.
            </summary>
        </member>
        <member name="M:TSI.Security.AESEncryption.Encrypt(System.String)">
            <summary>
            Encrypts the specified text.
            </summary>
            <param name="szPlainText"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.Security.AESEncryption.Decrypt(System.String)">
            <summary>
            Decrypts the specified text.
            </summary>
            <param name="szEncryptedText"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.Security.AESEncryption.encryptStringToBytes_AES(System.String,System.Byte[],System.Byte[])">
            <summary>
            Encrypts the specified text using the RijndaelManaged class
            with the specified Key and IV.
            </summary>
            <param name="plainText"></param>
            <param name="Key"></param>
            <param name="IV"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.Security.AESEncryption.decryptStringFromBytes_AES(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Decrypts the specified text using the RijndaelManaged class
            with the specified Key and IV.
            </summary>
            <param name="cipherText"></param>
            <param name="Key"></param>
            <param name="IV"></param>
            <returns></returns>
        </member>
        <member name="P:TSI.Security.AESEncryption.BlockSize">
            <summary>
            The blocksize for the cryptography provider.
            </summary>
        </member>
        <member name="T:TSI.Security.EncryptionFactory">
            <summary>
            Creates an instance of an EncryptionProvider as specified
            by the "EncryptionProvider" application setting.
            </summary>
        </member>
        <member name="M:TSI.Security.EncryptionFactory.#ctor">
            <summary>
            Constructor.  Cannot be instantiated.
            </summary>
        </member>
        <member name="M:TSI.Security.EncryptionFactory.GetEncryptionProvider">
            <summary>
            Returns an instance of the configured DB Access provider.
            </summary>
            <returns>DBAccess Instance</returns>
        </member>
        <member name="T:TSI.Security.RijndaelEncryption">
            <summary>
            This class provides encryption/decryption functionality.  The bulk of this
            class was derived from http://msdn.microsoft.com/en-us/library/system.security.cryptography.rijndaelmanaged.aspx 
            </summary>
        </member>
        <member name="M:TSI.Security.RijndaelEncryption.#ctor(System.String)">
            <summary>
            Initializes the object with the EncryptionKey and EncryptionInitializer
            application setting values.  If not found, default values are used.
            </summary>
        </member>
        <member name="M:TSI.Security.RijndaelEncryption.#ctor(System.String,System.String)">
            <summary>
            Initializes the object with the specified EncryptionKey and EncryptionInitializer
            values.
            </summary>
        </member>
        <member name="P:TSI.Security.RijndaelEncryption.EncryptionKey">
            <summary>
            The Encryption Key to use for encryption and
            decrytion.  If the length of the key exceeds the
            cryptogrophy's BlockSize, it will be truncated to
            that BlockSize.
            </summary>
        </member>
        <member name="P:TSI.Security.RijndaelEncryption.Initializer">
            <summary>
            The Initializer to use for encryption and
            decryption.
            </summary>
        </member>
        <member name="M:TSI.Security.RijndaelEncryption.Encrypt(System.String)">
            <summary>
            Encrypts the specified text.
            </summary>
            <param name="szPlainText"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.Security.RijndaelEncryption.Decrypt(System.String)">
            <summary>
            Decrypts the specified text.
            </summary>
            <param name="szEncryptedText"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.Security.RijndaelEncryption.encryptStringToBytes_AES(System.String,System.Byte[],System.Byte[])">
            <summary>
            Encrypts the specified text using the RijndaelManaged class
            with the specified Key and IV.
            </summary>
            <param name="plainText"></param>
            <param name="Key"></param>
            <param name="IV"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.Security.RijndaelEncryption.decryptStringFromBytes_AES(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Decrypts the specified text using the RijndaelManaged class
            with the specified Key and IV.
            </summary>
            <param name="cipherText"></param>
            <param name="Key"></param>
            <param name="IV"></param>
            <returns></returns>
        </member>
        <member name="P:TSI.Security.RijndaelEncryption.BlockSize">
            <summary>
            The blocksize for the cryptography provider.
            </summary>
        </member>
        <member name="T:TSI.Security.IEncryptionProvider">
            <summary>
            Interface for all TSI supported encryption
            providers.
            </summary>
        </member>
        <member name="P:TSI.Security.IEncryptionProvider.EncryptionKey">
            <summary>
            The key to use for encryption.
            </summary>
        </member>
        <member name="P:TSI.Security.IEncryptionProvider.Initializer">
            <summary>
            The initializer to use for incryption
            </summary>
        </member>
        <member name="P:TSI.Security.IEncryptionProvider.BlockSize">
            <summary>
            The blocksized used by the
            Encryptions provider
            </summary>
        </member>
        <member name="M:TSI.Security.IEncryptionProvider.Encrypt(System.String)">
            <summary>
            Encrypts the specified value
            </summary>
            <param name="szValue"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.Security.IEncryptionProvider.Encrypt(System.String,System.String)">
            <summary>
            Encrypts the specified value using the
            specified key.
            </summary>
            <param name="szValue"></param>
            <param name="szKey"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.Security.IEncryptionProvider.Encrypt(System.String,System.String,System.String)">
            <summary>
            Encrypts the specified value using the
            specified key and initializer.
            </summary>
            <param name="szValue"></param>
            <param name="szKey"></param>
            <param name="szInit"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.Security.IEncryptionProvider.Decrypt(System.String)">
            <summary>
            Decrypts the specified value
            </summary>
            <param name="szValue"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.Security.IEncryptionProvider.Decrypt(System.String,System.String)">
            <summary>
            Decrypts the specified value using the
            specified key.
            </summary>
            <param name="szValue"></param>
            <param name="szKey"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.Security.IEncryptionProvider.Decrypt(System.String,System.String,System.String)">
            <summary>
            Decrypts the specified value using the
            specified key and initializer.
            </summary>
            <param name="szValue"></param>
            <param name="szKey"></param>
            <param name="szInit"></param>
            <returns></returns>
        </member>
        <member name="T:TSI.Security.IUser">
            <summary>
            
            </summary>
        </member>
        <member name="P:TSI.Security.IUser.UserID">
            <summary>
            UserID accessor
            </summary>
        </member>
        <member name="P:TSI.Security.IUser.Password">
            <summary>
            Password accessor
            </summary>
        </member>
        <member name="P:TSI.Security.IUser.FirstName">
            <summary>
            FirstName accessor
            </summary>
        </member>
        <member name="P:TSI.Security.IUser.LastName">
            <summary>
            LastName accessor
            </summary>
        </member>
        <member name="P:TSI.Security.IUser.Email">
            <summary>
            Email accessor
            </summary>
        </member>
        <member name="P:TSI.Security.IUser.LoginCount">
            <summary>
            LoginCount accessor
            </summary>
        </member>
        <member name="P:TSI.Security.IUser.LastLoginDate">
            <summary>
            LastLoginDate accessor
            </summary>
        </member>
        <member name="P:TSI.Security.IUser.Roles">
            <summary>
            Roles accessor
            </summary>
        </member>
        <member name="M:TSI.Security.IUser.IsInRole(System.String)">
            <summary>
            Determines if the current user has the specified
            role.
            </summary>
            <param name="szRole">szRole</param>
            <returns>bool</returns>
        </member>
        <member name="M:TSI.Security.IUser.AddRole(System.String)">
            <summary>
            Adds the role to the current user.
            </summary>
            <param name="szRole"></param>
        </member>
        <member name="M:TSI.Security.IUser.Authenticate(System.String)">
            <summary>
            Determines if the user is authenticated.  If the specified
            password matches the current password, the user is authenticated.
            If the user supports encryption, the specified password is 
            encrypted and then compared to the current password.
            </summary>
            <param name="szPassword">Provided Password</param>
            <returns>bool</returns>
        </member>
        <member name="P:TSI.Security.SHA256HashEncryption.EncryptionKey">
            <summary>
            The Encryption Key to use for encryption and
            decrytion.  If the length of the key exceeds the
            cryptogrophy's BlockSize, it will be truncated to
            that BlockSize.
            </summary>
        </member>
        <member name="P:TSI.Security.SHA256HashEncryption.Initializer">
            <summary>
            The Initializer to use for encryption and
            decryption.
            </summary>
        </member>
        <member name="M:TSI.Security.SHA256HashEncryption.Encrypt(System.String)">
            <summary>
            Encrypts the specified text.
            </summary>
            <param name="szPlainText"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.Security.SHA256HashEncryption.Decrypt(System.String)">
            <summary>
            Decrypts the specified text.
            </summary>
            <param name="szEncryptedText"></param>
            <returns></returns>
        </member>
        <member name="P:TSI.Security.SHA256HashEncryption.BlockSize">
            <summary>
            The blocksize for the cryptography provider.
            </summary>
        </member>
        <member name="T:TSI.Security.SimpleEncryption">
            <summary>
            Provides basic encryption services.
            </summary>
        </member>
        <member name="M:TSI.Security.SimpleEncryption.#ctor">
            <summary>
            Initializes the object with the EncryptionKey and EncryptionInitializer
            application setting values.  If not found, default values are used.
            </summary>
        </member>
        <member name="M:TSI.Security.SimpleEncryption.#ctor(System.String,System.String)">
            <summary>
            Initializes the object with the specified EncryptionKey and EncryptionInitializer
            values.
            </summary>
        </member>
        <member name="P:TSI.Security.SimpleEncryption.EncryptionKey">
            <summary>
            The Encryption Key to use for encryption and
            decrytion.  If the length of the key exceeds the
            cryptogrophy's BlockSize, it will be truncated to
            that BlockSize.
            </summary>
        </member>
        <member name="P:TSI.Security.SimpleEncryption.Initializer">
            <summary>
            The Initializer to use for encryption and
            decryption.
            </summary>
        </member>
        <member name="P:TSI.Security.SimpleEncryption.BlockSize">
            <summary>
            The blocksize for the cryptography provider.
            </summary>
        </member>
        <member name="M:TSI.Security.SimpleEncryption.Encrypt(System.String)">
            <summary>
            Encrypt the value using the instances
            Encryption Key and Initializer.
            </summary>
            <param name="szValue">Value to Encrypt</param>
            <returns>Encrypted Value</returns>
        </member>
        <member name="M:TSI.Security.SimpleEncryption.Encrypt(System.String,System.String)">
            <summary>
            Encrypt the value using the instances
            Initializer.
            </summary>
            <param name="szValue">Value to Encrypt</param>
            <param name="szKey">Encryption Key</param>
            <returns>Encrypted Value</returns>
        </member>
        <member name="M:TSI.Security.SimpleEncryption.Encrypt(System.String,System.String,System.String)">
            <summary>
            Encrypt the value.
            </summary>
            <param name="szValue">Value to Encrypt</param>
            <param name="szKey">Encryption Key</param>
            <param name="szInit">Initializer</param>
            <returns>Encrypted Value</returns>
        </member>
        <member name="M:TSI.Security.SimpleEncryption.Decrypt(System.String)">
            <summary>
            Decrypt the value using the instances
            Encryption Key and Initializer.
            </summary>
            <param name="szValue">Value to Decrypt</param>
            <returns>Decrypted Value</returns>
        </member>
        <member name="M:TSI.Security.SimpleEncryption.Decrypt(System.String,System.String)">
            <summary>
            Decrypt the value using the instances
            Initializer.
            </summary>
            <param name="szValue">Value to Decrypt</param>
            <param name="szKey">Encryption Key</param>
            <returns>Decrypted Value</returns>
        </member>
        <member name="M:TSI.Security.SimpleEncryption.Decrypt(System.String,System.String,System.String)">
            <summary>
            Decrypt the value.
            </summary>
            <param name="szValue">Value to Decrypt</param>
            <param name="szKey">Encryption Key</param>
            <param name="szInit">Initializer</param>
            <returns>Decrypted Value</returns>
        </member>
        <member name="M:TSI.Security.SimpleEncryption.GetByteArray(System.String)">
            <summary>
            Creates an array of Bytes from the specified
            string
            </summary>
            <param name="szValue"></param>
            <returns></returns>
        </member>
        <member name="T:TSI.Security.TSIIdentity">
            <summary>
            Custom Identity.
            </summary>
        </member>
        <member name="P:TSI.Security.TSIIdentity.AuthenticationType">
            <summary>
            AuthenticationType accessor
            </summary>
        </member>
        <member name="P:TSI.Security.TSIIdentity.IsAuthenticated">
            <summary>
            IsAuthenticated accessor
            </summary>
        </member>
        <member name="P:TSI.Security.TSIIdentity.Name">
            <summary>
            Name accessor
            </summary>
        </member>
        <member name="P:TSI.Security.TSIIdentity.FirstName">
            <summary>
            FirstName accessor
            </summary>
        </member>
        <member name="P:TSI.Security.TSIIdentity.LastName">
            <summary>
            LastName accessor
            </summary>
        </member>
        <member name="P:TSI.Security.TSIIdentity.Email">
            <summary>
            Email accessor
            </summary>
        </member>
        <member name="P:TSI.Security.TSIIdentity.UserID">
            <summary>
            UserID accessor
            </summary>
        </member>
        <member name="T:TSI.Security.TSIPrincipal">
            <summary>
            Custom implementation of IPrincipal.  Provides more 
            robust information.
            </summary>
        </member>
        <member name="T:TSI.Security.TSIUser">
            <summary>
            Combination of Principal and Identity functionality.
            </summary>
        </member>
        <member name="M:TSI.Security.TSIUser.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:TSI.Security.TSIUser.Name">
            <summary>
            Name accessor
            </summary>
        </member>
        <member name="P:TSI.Security.TSIUser.FirstName">
            <summary>
            FirstName accessor
            </summary>
        </member>
        <member name="P:TSI.Security.TSIUser.LastName">
            <summary>
            LastName accessor
            </summary>
        </member>
        <member name="P:TSI.Security.TSIUser.Email">
            <summary>
            Email accessor
            </summary>
        </member>
        <member name="P:TSI.Security.TSIUser.UserID">
            <summary>
            UserID accessor
            </summary>
        </member>
        <member name="M:TSI.Security.TSIUser.IsInRole(System.String)">
            <summary>
            Indicates if the user has the 
            specified role.
            </summary>
            <param name="szRole">Role</param>
            <returns>Indicator</returns>
        </member>
        <member name="P:TSI.Security.TSIUser.Roles">
            <summary>
            Roles accessor
            </summary>
        </member>
        <member name="T:TSI.Security.User">
            <summary>
            Provides functionality to manage user information
            including authentication.
            </summary>
        </member>
        <member name="M:TSI.Security.User.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:TSI.Security.User.IsPasswordEncrypted">
            <summary>
            Indicates if the password for this class
            is encrypted.
            </summary>
        </member>
        <member name="P:TSI.Security.User.SupportsLoginStats">
            <summary>
            Indicates if this class supports login
            statistics such as count and last date.
            </summary>
        </member>
        <member name="P:TSI.Security.User.UserID">
            <summary>
            UserID accessor
            </summary>
        </member>
        <member name="P:TSI.Security.User.Password">
            <summary>
            Password accessor
            </summary>
        </member>
        <member name="P:TSI.Security.User.Name">
            <summary>
            Name accessor
            </summary>
        </member>
        <member name="P:TSI.Security.User.FirstName">
            <summary>
            FirstName accessor
            </summary>
        </member>
        <member name="P:TSI.Security.User.LastName">
            <summary>
            LastName accessor
            </summary>
        </member>
        <member name="P:TSI.Security.User.Email">
            <summary>
            Email accessor
            </summary>
        </member>
        <member name="P:TSI.Security.User.LoginCount">
            <summary>
            LoginCount accessor
            </summary>
        </member>
        <member name="P:TSI.Security.User.LastLoginDate">
            <summary>
            LastLoginDate accessor
            </summary>
        </member>
        <member name="P:TSI.Security.User.AuthenticationType">
            <summary>
            AuthenticationType accessor
            </summary>
        </member>
        <member name="P:TSI.Security.User.IsAuthenticated">
            <summary>
            IsAuthenticated accessor
            </summary>
        </member>
        <member name="M:TSI.Security.User.IsInRole(System.String)">
            <summary>
            Determines if the current user has the specified
            role.
            </summary>
            <param name="szRole">szRole</param>
            <returns>bool</returns>
        </member>
        <member name="P:TSI.Security.User.Roles">
            <summary>
            Roles accessor
            </summary>
        </member>
        <member name="M:TSI.Security.User.AddRole(System.String)">
            <summary>
            Adds the role to the current user.
            </summary>
            <param name="szRole"></param>
        </member>
        <member name="M:TSI.Security.User.GetKeyValues">
            <summary>
            Returns the key values of the current
            instance in the same order as the key
            fields.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TSI.Security.User.SetKeyValues(System.Collections.IList)">
            <see cref="M:TSI.BusinessObjects.IBusinessObject.SetKeyValues(System.Collections.IList)"/>
        </member>
        <member name="M:TSI.Security.User.ClearKeyValues">
            <summary>
            Resets all of the key values.
            </summary>
        </member>
        <member name="M:TSI.Security.User.LoadObject(System.Collections.IDictionary,System.Int32)">
            <summary>
            Populates the object from the Dictionary
            specified.
            </summary>
            <param name="oData">Dictionary of Data</param>
            <param name="iOptions">Load Option</param>
        </member>
        <member name="M:TSI.Security.User.UnloadObject(System.Collections.IDictionary,System.Int32)">
            <summary>
            Populates the Dictionary from the Object.
            </summary>
            <param name="oData">Dictionary of Data</param>
            <param name="iOptions">Unload Option</param>
        </member>
        <member name="M:TSI.Security.User.Authenticate(System.String)">
            <summary>
            Authenticates the user based on the specified password.  If
            the password is authenticated, uses an EncryptionProvider
            to encrypt the specified password and compare it to the 
            current password.
            </summary>
            <param name="szPassword"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.Security.User.EncryptedAuthenticate(System.String)">
            <summary>
            Encrypts the specified password and then compares
            it to the current password.
            </summary>
            <param name="szPassword"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.Security.User.PlainTextAuthenticate(System.String)">
            <summary>
            Compares the specified password to the current password.
            </summary>
            <param name="szPassword"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.Security.User.UpdateStats">
            <summary>
            Updates the repository with the login statistics
            for current user.
            </summary>
        </member>
        <member name="T:TSI.Security.UserMgr">
            <summary>
            Provides data repository access functionality for
            the User class.
            </summary>
        </member>
        <member name="F:TSI.Security.UserMgr.COL_USER_ID">
            <summary>
            Database Column Name
            </summary>
        </member>
        <member name="F:TSI.Security.UserMgr.COL_EMAIL">
            <summary>
            Database Column Name
            </summary>
        </member>
        <member name="F:TSI.Security.UserMgr.COL_FIRST_NAME">
            <summary>
            Database Column Name
            </summary>
        </member>
        <member name="F:TSI.Security.UserMgr.COL_LAST_NAME">
            <summary>
            Database Column Name
            </summary>
        </member>
        <member name="F:TSI.Security.UserMgr.COL_PASSWORD">
            <summary>
            Database Column Name
            </summary>
        </member>
        <member name="F:TSI.Security.UserMgr.COL_LOGIN_COUNT">
            <summary>
            Database Column Name
            </summary>
        </member>
        <member name="F:TSI.Security.UserMgr.COL_LAST_LOGIN_DATE">
            <summary>
            Database Column Name
            </summary>
        </member>
        <member name="M:TSI.Security.UserMgr.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:TSI.Security.UserMgr.#ctor(TSI.Utils.ILogger,TSI.Security.IUser)">
            <summary>
            Constructor
            </summary>
            <param name="oLogger">Application Logger</param>
            <param name="oUser">Current User</param>
        </member>
        <member name="M:TSI.Security.UserMgr.#ctor(System.Data.IDbConnection,TSI.Utils.ILogger,TSI.Security.IUser)">
            <summary>
            Constructor
            </summary>
            <param name="oConn">Connection to Use</param>
            <param name="oLogger">Application Logger</param>
            <param name="oUser">Current User</param>
        </member>
        <member name="P:TSI.Security.UserMgr.UsesIdentity">
            <summary>
            Indicates if this object uses an Identity
            field for its ID.  Default is false.
            </summary>
        </member>
        <member name="M:TSI.Security.UserMgr.GetTableName">
            <summary>
            The name of the table our business object
            is mapped to.
            </summary>
            <returns>Table Name</returns>
        </member>
        <member name="M:TSI.Security.UserMgr.GetBusinessObjectName">
            <summary>
            The name of the business object class.
            </summary>
            <returns>Business Object Name</returns>
        </member>
        <member name="M:TSI.Security.UserMgr.GetKeyFields">
            <summary>
            The fields that uniquly identify this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TSI.Security.UserMgr.GetObjectByEmail(System.String)">
            <summary>
            Retrieves a User by the specified
            email address.
            </summary>
            <param name="szEmail">Email Address</param>
            <returns>IUser</returns>
        </member>
        <member name="T:TSI.Arch.ApplicationExpectedException">
            <summary>
            Exception class for expected application exceptions that will
            be handled by the application (i.e. should not bubble up to the
            default exception handler).
            </summary>
        </member>
        <member name="M:TSI.Arch.ApplicationExpectedException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="szMessage">Message for this exception</param>
        </member>
        <member name="M:TSI.Arch.ApplicationExpectedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="szMessage">Message for this exception</param>
            <param name="e">Nested exception</param>
        </member>
        <member name="M:TSI.Arch.ApplicationExpectedException.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="szMessage">Message for this exception</param>
            <param name="szClass">Class throwing the exception</param>
            <param name="szMethod">Method throwing the exception</param>
        </member>
        <member name="M:TSI.Arch.ApplicationExpectedException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="szMessage">Message for this exception</param>
            <param name="szClass">Class throwing the exception</param>
            <param name="szMethod">Method throwing the exception</param>
            <param name="e">Nested exception</param>
        </member>
        <member name="M:TSI.Arch.ApplicationExpectedException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="szClass">Class throwing the exception</param>
            <param name="szMethod">Method throwing the exception</param>
            <param name="e">Nested exception</param>
        </member>
        <member name="T:TSI.Arch.ApplicationUnexpectedException">
            <summary>
            Exception class for unexpected application exceptions that will
            be handled by the default exception handler.
            </summary>
        </member>
        <member name="M:TSI.Arch.ApplicationUnexpectedException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="szMessage">Message for this exception</param>
        </member>
        <member name="M:TSI.Arch.ApplicationUnexpectedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="szMessage">Message for this exception</param>
            <param name="e">Nested exception</param>
        </member>
        <member name="M:TSI.Arch.ApplicationUnexpectedException.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="szMessage">Message for this exception</param>
            <param name="szClass">Class throwing the exception</param>
            <param name="szMethod">Method throwing the exception</param>
        </member>
        <member name="M:TSI.Arch.ApplicationUnexpectedException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="szMessage">Message for this exception</param>
            <param name="szClass">Class throwing the exception</param>
            <param name="szMethod">Method throwing the exception</param>
            <param name="e">Nested exception</param>
        </member>
        <member name="M:TSI.Arch.ApplicationUnexpectedException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="szClass">Class throwing the exception</param>
            <param name="szMethod">Method throwing the exception</param>
            <param name="e">Nested exception</param>
        </member>
        <member name="T:TSI.Arch.AuthorizationException">
            <summary>
            Custom exception class to allow for explicit handling of unauthorized
            access to resources.
            </summary>
        </member>
        <member name="M:TSI.Arch.AuthorizationException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="szMessage">Message for this exception</param>
        </member>
        <member name="M:TSI.Arch.AuthorizationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="szMessage">Message for this exception</param>
            <param name="e">Nested exception</param>
        </member>
        <member name="M:TSI.Arch.AuthorizationException.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="szMessage">Message for this exception</param>
            <param name="szClass">Class throwing the exception</param>
            <param name="szMethod">Method throwing the exception</param>
        </member>
        <member name="M:TSI.Arch.AuthorizationException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="szMessage">Message for this exception</param>
            <param name="szClass">Class throwing the exception</param>
            <param name="szMethod">Method throwing the exception</param>
            <param name="e">Nested exception</param>
        </member>
        <member name="M:TSI.Arch.AuthorizationException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="szClass">Class throwing the exception</param>
            <param name="szMethod">Method throwing the exception</param>
            <param name="e">Nested exception</param>
        </member>
        <member name="T:TSI.Arch.TSIException">
            <summary>
            Base exception class for all TSI exceptions.
            </summary>
        </member>
        <member name="F:TSI.Arch.TSIException._szClass">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.Arch.TSIException._szMethod">
            <summary>Attribute backers</summary>
        </member>
        <member name="M:TSI.Arch.TSIException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="szMessage">Message for this exception</param>
        </member>
        <member name="M:TSI.Arch.TSIException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="szMessage">Message for this exception</param>
            <param name="e">Nested exception</param>
        </member>
        <member name="M:TSI.Arch.TSIException.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates the exception with the appropriate values.
            </summary>
            <param name="szMessage">Exception message</param>
            <param name="szClass">Class throwing exception</param>
            <param name="szMethod">Method throwing exception</param>
        </member>
        <member name="M:TSI.Arch.TSIException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Creates the exception with the appropriate values.
            </summary>
            <param name="szMessage">Exception message</param>
            <param name="szClass">Class throwing exception</param>
            <param name="szMethod">Method throwing exception</param>
            <param name="e">Inner Exception</param>
        </member>
        <member name="M:TSI.Arch.TSIException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Creates the exception with the appropriate values.
            </summary>
            <param name="szClass">Class throwing exception</param>
            <param name="szMethod">Method throwing exception</param>
            <param name="e">Inner Exception</param>
        </member>
        <member name="P:TSI.Arch.TSIException.Class">
            <summary>
            Class that threw the exception
            </summary>
        </member>
        <member name="P:TSI.Arch.TSIException.Method">
            <summary>
            Method that threw the exception
            </summary>
        </member>
        <member name="T:TSI.BusinessObjects.BusinessObject">
            <summary>
            Provides the base functionality for business object 
            including data persistence and standard audit fields.
            </summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObject._bIsInDB">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObject._bIsDirty">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObject._bIsDeleted">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObject._bUsesSmartUpdate">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObject._szCreatedUserID">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObject._szUpdatedUserID">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObject._dtCreatedDateTime">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObject._dtUpdatedDateTime">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObject._szOptLock">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObject._htSmartUpdate">
            <summary>Used to hold initial values for smart updating.</summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObject._oMgr">
            <summary>
            The data manager that instantiated 
            this business object
            </summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObject._htFieldColMapping">
            <summary>
            Holds the Property to Column mapping.
            </summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObject._oKeyValues">
            <summary>
            Holds the key values identifying an
            object instance.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.BusinessObject.IsInDB">
            <summary>
            Indicates if this object was retrieved
            from the database.
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.BusinessObject.IsDirty">
            <summary>
            Indicates if this object has changed
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.BusinessObject.IsDeleted">
            <summary>
            Indicates if this object has been deleted
            from the repository
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.BusinessObject.UsesReflection">
            <summary>
            Indicates if this object should use 
            reflection for Load and Unload operations.
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.BusinessObject.UsesSmartUpdate">
            <summary>
            Indicates if this object should be updated
            via the smart update mechanism.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.GetSmartUpdateDictionary">
            <summary>
            Returns the Dictionary holding the attribute values
            for the smart update.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TSI.BusinessObjects.BusinessObject.BusinessObjectManager">
            <summary>
            The object manager for this instance.
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.BusinessObject.CreatedUserID">
            <summary>
            The ID of the user who created the 
            first instance of the object.
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.BusinessObject.CreatedDateTime">
            <summary>
            The date/time this instance was first
            stored in the repository.
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.BusinessObject.UpdatedUserID">
            <summary>
            The ID of the last user to modify
            and store this object.
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.BusinessObject.UpdatedDateTime">
            <summary>
            The date/time of the last time this
            object was modified and stored in the
            repository.
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.BusinessObject.OptLock">
            <summary>
            The optimistic locking value.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.GetKeyValues">
            <summary>
            Returns the key values of the current
            instance in the same order as the key
            fields.
            </summary>
            <returns>IList</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.SetKeyValues(System.Collections.IList)">
            <summary>
            Sets the key values for this object based
            on the specified list of values.  The list of
            values must be in the same order the keys are
            defined in GetKeyValues();
            </summary>
            <param name="oKeyValues">IList</param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.ClearKeyValues">
            <summary>
            Sets the key fields for this object
            to their initialized state such that if
            stored, new values would be created.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.LoadObject(System.Collections.IDictionary,System.Int32)">
            <summary>
            Populates the object from the Dictionary
            specified.
            </summary>
            <param name="oData">Dictionary of Data</param>
            <param name="iOptions">Load Option</param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.UnloadObject(System.Collections.IDictionary,System.Int32)">
            <summary>
            Populates the Dictionary from the Object.
            </summary>
            <param name="oData">Dictionary of Data</param>
            <param name="iOptions">Unload Option</param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.PrepareForUnload(System.Int32)">
            <summary>
            Prepare the instance for unloaded based on the
            specified unload options.
            </summary>
            <param name="iOptions"></param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.GetFieldColMapping">
            <summary>
            Return a Dictionary of Field to Column mappings with the field
            as the key based on the Load/Unload options specified.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.GetColFromField(System.String)">
            <summary>
            Returns the corresponding column for the specified
            field name.
            </summary>
            <param name="szFieldName">Field Name</param>
            <returns>Column Name</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.LoadObject(System.Collections.IDictionary,System.Int32,System.Collections.IDictionary)">
            <summary>
            Loads the object using reflection via the specified
            Field to Column mapping
            </summary>
            <param name="oData">Dictionary containing data</param>
            <param name="iOptions">Load Options</param>
            <param name="htFieldColMapping">Field/Col Mapping</param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.UnloadObject(System.Collections.IDictionary,System.Int32,System.Collections.IDictionary)">
            <summary>
            Unloads the object using reflection via the specified
            Field to Column mapping
            </summary>
            <param name="oData">Dictionary to populate</param>
            <param name="iOptions">Unload Options</param>
            <param name="htFieldColMapping">Field/Col Mapping</param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.SetDirty(System.Object,System.Object)">
            <summary>
            Sets the bDirty flag if the two values are 
            different.  
            </summary>
            <param name="oValue1"></param>
            <param name="oValue2"></param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.OnCreate">
            <summary>
            Invoked by BusinessObjectMgr after this
            object instance is created new
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.OnBeforeSave">
            <summary>
            Invoked by BusinessObjectMgr prior to this
            object being saved.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.OnAfterSave">
            <summary>
            Invoked by BusinessObjectMgr just after this
            object is saved.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.OnBeforeDelete">
            <summary>
            Invoked by BusinessObjectMgr prior to this
            object being deleted.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.OnAfterDelete">
            <summary>
            Invoked by BusinessObjectMgr just after this
            object is deleted.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.OnBeforeLoad">
            <summary>
            Invoked by BusinessObjectMgr prior to this
            object being loaded.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.OnBeforeLoad(System.Collections.IDictionary,System.Int32)">
            <summary>
            Invoked by BusinessObjectMgr prior to this
            object being loaded.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.OnAfterLoad">
            <summary>
            Invoked by BusinessObjectMgr just after this
            object is loaded.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.OnAfterLoad(System.Collections.IDictionary,System.Int32)">
            <summary>
            Invoked by BusinessObjectMgr just after this
            object being loaded.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.OnBeforeUnload(System.Collections.IDictionary,System.Int32)">
            <summary>
            Invoked by BusinessObjectMgr prior to this
            object being loaded.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.OnAfterUnload(System.Collections.IDictionary,System.Int32)">
            <summary>
            Invoked by BusinessObjectMgr just after this
            object being loaded.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.Save">
            <summary>
            Saves the object.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.Save(System.Data.IDbTransaction)">
            <summary>
            Saves the object using the specified connection
            and transaction.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.Delete">
            <summary>
            Deletes the object.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.Delete(System.Data.IDbTransaction)">
            <summary>
            Deletes the object using the specified
            connection and transaction.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.Refresh">
            <summary>
            Refreshes the object with the latest values
            in the repository.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.LogMessage(System.String)">
            <summary>
            Writes a message to the trace file.
            </summary>
            <param name="szMessage"></param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.LogError(System.Exception)">
            <summary>
            Logs the error.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.Copy">
            <summary>
            Returns a copy of the current
            instance of this business object 
            resetting all non-business fields.
            </summary>
            <returns>IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.Copy(System.Boolean)">
            <summary>
            Returns a copy of the current
            instance of this business object.
            </summary>
            <param name="bOnlyBusinessFields">Indicator if only business fields should be copied</param>
            <returns>IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.ResetSmartUpdate">
            <summary>
            Prepares the SmartUpdate Dictionary for use.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObject.PrepareSmartUpdate">
            <summary>
            Prepares the business object for smart updates by
            saving a copy of the attributes.
            </summary>
        </member>
        <member name="T:TSI.BusinessObjects.BusinessObjectMgr">
            <summary>
            Provides the basic functionality for managing
            business objects.
            </summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObjectMgr.KEY_PARM_PREFIX">
            <summary>
            Used to prefix key parameters to not conflict
            with data parameters.
            </summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObjectMgr._oDBAccess">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObjectMgr._oDBConnection">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObjectMgr._oDBTransaction">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObjectMgr._oLogger">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObjectMgr._oUser">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObjectMgr._bUsesSQLParameters">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObjectMgr._bUsesOptLock">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObjectMgr._bUsesIdentity">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObjectMgr._bUsesAuditFields">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObjectMgr._bUsesNoLock">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObjectMgr._szConnectionString">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObjectMgr._bInTransaction">
            <summary>
            Indicates whether or not this data manager is currently 
            participating in a transaction
            </summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObjectMgr._oAttribsToRetrieve">
            <summary>
            Holds the property names to retrieve if not retrieving 
            the full object.
            </summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObjectMgr.COL_CREATED_USER_ID">
            <summary>
            Database Column Name
            </summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObjectMgr.COL_UPDATED_USER_ID">
            <summary>
            Database Column Name
            </summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObjectMgr.COL_CREATED_DATETIME">
            <summary>
            Database Column Name
            </summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObjectMgr.COL_UPDATED_DATETIME">
            <summary>
            Database Column Name
            </summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObjectMgr.COL_OPT_LOCK">
            <summary>
            Database Column Name
            </summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObjectMgr.OPT_LOAD_SAVE">
            <summary>
            Indicates the Unload/Load is for a save operation
            </summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObjectMgr.OPT_LOAD_RETREIVE">
            <summary>
            Indicates the Unload/Load is for a load operation
            </summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObjectMgr.OPT_LOAD_COPY">
            <summary>
            Indicates the Unload/Load is for a copy operation.
            </summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObjectMgr.OPT_LOAD_REFRESH">
            <summary>
            Indicates the Unload/Load is for a refresh operation.
            </summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObjectMgr._oTempObject">
            <summary> Used for temporary operations.</summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.InitSettings">
            <summary>
            Initializes the object manager with
            the config settings.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.#ctor(TSI.Utils.ILogger,TSI.Security.IUser)">
            <summary>
            Constructor
            </summary>
            <param name="oLogger">Application Logger</param>
            <param name="oUser">Current User</param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.#ctor(System.Data.IDbConnection,TSI.Utils.ILogger,TSI.Security.IUser)">
            <summary>
            Constructor
            </summary>
            <param name="oConn">Connection to Use</param>
            <param name="oLogger">Application Logger</param>
            <param name="oUser">Current User</param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.#ctor(System.Data.IDbTransaction,TSI.Utils.ILogger,TSI.Security.IUser)">
            <summary>
            Constructor
            </summary>
            <param name="oTran">Transaction to Use</param>
            <param name="oLogger">Application Logger</param>
            <param name="oUser">Current User</param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.#ctor(TSI.BusinessObjects.BusinessObjectMgr)">
            <summary>
            Constructor using the Logger, User, and Transaction
            of the specified Manager to initialize this manager.
            </summary>
            <param name="oBizObjMgr">Business Object Manager</param>
        </member>
        <member name="P:TSI.BusinessObjects.BusinessObjectMgr.ConnectionString">
            <summary>
            DB Connection string.  
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetUserID">
            <summary>
            Returns the current user ID.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TSI.BusinessObjects.BusinessObjectMgr.UsesOptLock">
            <summary>
            Indicates if this object uses Optimistic Locking.
            Default is true.
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.BusinessObjectMgr.UsesAuditFields">
            <summary>
            Indicates if this object uses Audit Fields.
            Default is true.
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.BusinessObjectMgr.UsesIdentity">
            <summary>
            Indicates if this object uses an Identity
            field for its ID.  Default is false.
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.BusinessObjectMgr.UsesSQLParameters">
            <summary>
            Determines if this classes uses SQL
            parameters when storing values.  Where
            clause values <b>always</b> use parameters.
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.BusinessObjectMgr.UsesNoLock">
            <summary>
            Determines if a NoLock clause should be added
            to the FROM clause when generating SQL.
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.BusinessObjectMgr.ConnectionName">
            <summary>
            This is the custom connection name to use.  If not
            specified, the default connection name is used.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.LogMessage(System.String)">
            <summary>
            Writes the specified message to the
            application log.
            </summary>
            <param name="szMessage"></param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.LogError(System.Exception)">
            <summary>
            Writes the exception information
            to the application log.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.IsEmptyStringNull">
            <summary>
            Determines if an empty string should be treated
            as NULL.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetDBAccess">
            <summary>
            Returns the current instance of the 
            DB Access Provider
            </summary>
            <returns>DB Access Provider</returns>
        </member>
        <member name="P:TSI.BusinessObjects.BusinessObjectMgr.DBConnection">
            <summary>
            Returns the current DB Connection.  The consumer
            is then responsible for closing the connection.
            </summary>
            <returns>DB Connection</returns>
        </member>
        <member name="P:TSI.BusinessObjects.BusinessObjectMgr.Transaction">
            <summary>
            Tells this object manager to use an existing
            Transaction.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.BeginTransaction">
            <summary>
            Begins a transaction on the current connection.
            </summary>
            <returns>Transaction</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.Commit">
            <summary>
            Commits the current transaction and closes
            the current connection if it was opened by
            the BeginTransaction.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.Rollback">
            <summary>
            Rolls back the current transaction and closes
            the current connection if it was opened by
            the BeginTransaction.
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.BusinessObjectMgr.Logger">
            <summary>
            Application Logger
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.BusinessObjectMgr.User">
            <summary>
            Current User
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.CloseDBConnection(System.Data.IDbConnection)">
            <summary>
            Closes the specified DB Connection.
            </summary>
            <param name="oConn"></param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetTableName">
            <summary>
            The name of the table our business object
            is mapped to.
            </summary>
            <returns>Table Name</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetQualifiedColName(System.String)">
            <summary>
            Returns the fully qualified column name in the
            format of table.column.
            </summary>
            <param name="szColName"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetBusinessObjectName">
            <summary>
            The name of the business object class.
            </summary>
            <returns>Business Object Name</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetKeyFields">
            <summary>
            The fields that uniquely identify this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.InstantiateBusinessObject(System.Collections.IDictionary)">
            <summary>
            Creates an instance of our business object
            </summary>
            <returns></returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.CreateObject">
            <summary>
            Creates a new instance of the business object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjectByKey(System.String)">
            <summary>
            Retrieves a single object using the keys specified.
            The key values must be in the same order as the key
            fields property.
            </summary>
            <param name="szKeyValue">Key Value</param>
            <returns>IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjectByKey(System.Int32)">
            <summary>
            Retrieves a single object using the keys specified.
            The key values must be in the same order as the key
            fields property.
            </summary>
            <param name="iKeyValue">Key Value</param>
            <returns>IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjectByKey(System.Collections.IList)">
            <summary>
            Retrieves a single object using the keys specified.
            The key values must be in the same order as the key
            fields property.
            </summary>
            <param name="oKeyValues">The values for the key fields</param>
            <returns>IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetSelectFromClause">
            <summary>
            Returns the basic "SELECT * FROM &lt;table&gt;" clause.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetFromClause(System.Boolean)">
            <summary>
            Returns the escaped FROM SQL clause.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetSortList(System.String)">
            <summary>
            Returns the list for a single sort field sorted
            ascending.
            </summary>
            <param name="szSortField">Sort Field</param>
            <returns>List containing a SortCriterion</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetSortList(System.String,System.Boolean)">
            <summary>
            Returns the list for a single sort field.
            </summary>
            <param name="szSortField">Sort Field</param>
            <param name="bAsc">Ascending Indicator</param>
            <returns>List containing a SortCriterion</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetParmList(System.String,System.Object)">
            <summary>
            Returns the list for a single object parameter
            </summary>
            <param name="szParmName">Parameter Name</param>
            <param name="oParmValue">Paramber Value</param>
            <returns>List containing an ObjectParameter</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetDeleteFromClause">
            <summary>
            Returns the basic "DELETE FROM &lt;table&gt;" clause.
            </summary>
            <returns>Delete clause</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.IsObjectExist(System.String)">
            <summary>
            Determines if an object exists in the repository
            with the specified where clause.
            </summary>
            <param name="szWhereClause">Where Clause</param>
            <returns>bool</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.IsObjectExist(System.String,System.Collections.IList)">
            <summary>
            Determines if an object exists in the repository
            with the specified where clause.
            </summary>
            <param name="szWhereClause">Where Clause</param>
            <param name="oParameters">Parameters</param>
            <returns>bool</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.IsObjectExistByKey(System.String)">
            <summary>
            Determines if an object exists in the repository
            with the specified key value.
            </summary>
            <param name="szKeyValue">Key Value</param>
            <returns>bool</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.IsObjectExistByKey(System.Int32)">
            <summary>
            Determines if an object exists in the repository
            with the specified key value.
            </summary>
            <param name="iKeyValue">Key Value</param>
            <returns>bool</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.IsObjectExistByKey(System.Collections.IList)">
            <summary>
            Determines if an object exists in the repository
            with the specified key value.  The values specified
            must be in the same order as the key field names.
            </summary>
            <param name="oKeyValues">Key Values</param>
            <returns>bool</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetKeyParameters(System.Collections.IList)">
            <summary>
            Creates a list of ObjectParameters for the specified
            key values.
            </summary>
            <param name="oKeyValues">List of key value objects</param>
            <returns>List of ObjectParameter objects</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.IsObjectExistByCustomSQL(System.String)">
            <summary>
            Determines if an object exists in the repository
            by executing the specified SQL.  If the SQL returns
            any value, (i.e. not NULL), this returns true.
            </summary>
            <param name="szSQL">SQL</param>
            <returns>bool</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.IsObjectExistByCustomSQL(System.String,System.Collections.IList)">
            <summary>
            Returns a bool based on the specified SQL and parameters.
            </summary>
            <param name="szSQL">The SQL to Execute</param>
            <param name="oParameters">IList of ObjectParameter objects</param>
            <returns></returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjectCount">
            <summary>
            Determines how many objects exist.
            </summary>
            <returns>Count</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjectCount(System.String)">
            <summary>
            Determines how many objects meet the
            specified condition.
            </summary>
            <param name="szWhereClause"></param>
            <returns>Count</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjectCount(System.String,System.Collections.IList)">
            <summary>
            Determines how many objects meet the
            specified condition.
            </summary>
            <param name="szWhereClause"></param>
            <param name="oParameters">IList of ObjectParameter objects</param>
            <returns>Count</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjectCountByCustomSQL(System.String)">
            <summary>
            Determines how many objects meet the
            specified condition.
            </summary>
            <param name="szSQL">SQL</param>
            <returns>Count</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjectCountByCustomSQL(System.String,System.Collections.IList)">
            <summary>
            Determines how many objects meet the
            specified condition.
            </summary>
            <param name="szSQL">SQL</param>
            <param name="oParameters">IList of ObjectParameter objects</param>
            <returns>Count</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjects">
            <summary>
            Retrieves all of the data, instantiates the objects, and
            populates them.
            </summary>
            <returns>IBusinessObjectSet of IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjects(System.String)">
            <summary>
            Retrieves the data, instantiates the objects, and
            populates them.
            </summary>
            <param name="szWhereClause">Where Clause</param>
            <returns>BusinessObjectSet of IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjects(System.String,System.Collections.IList)">
            <summary>
            Retrieves the data, instantiates the objects, and
            populates them.
            </summary>
            <param name="szWhereClause">Where Clause</param>
            <param name="oSortOrder">IList of SortCriterion objects</param>
            <returns>BusinessObjectSet of IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjects(System.String,System.Collections.IList,System.Collections.IList)">
            <summary>
            Retrieves the data, instantiates the objects, and
            populates them.
            </summary>
            <param name="szWhereClause">Where Clause</param>
            <param name="oSortOrder">IList of SortCriterion objects</param>
            <param name="oParameters">IList of ObjectParameter objects</param>
            <returns>BusinessObjectSet of IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjects(System.String,System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Retrieves the data, instantiates the objects, and
            populates them.
            </summary>
            <param name="szWhereClause">Where Clause</param>
            <param name="oSortOrder">IList of SortCriterion objects</param>
            <param name="iPageNum">Current Page Number (0 if not paging)</param>
            <param name="iPageSize">Number of objects per page</param>
            <returns>IBusinessObjectSet of IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjects(System.String,System.Int32,System.Int32)">
            <summary>
            Retrieves the data, instantiates the objects, and
            populates them.
            </summary>
            <param name="szWhereClause">Where Clause</param>
            <param name="iPageNum">Current Page Number (0 if not paging)</param>
            <param name="iPageSize">Number of objects per page</param>
            <returns>IBusinessObjectSet of IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjects(System.String,System.Collections.IList,System.Int32)">
            <summary>
            Retrieves the data, instantiates the objects, and
            populates them.
            </summary>
            <param name="szWhereClause">Where Clause</param>
            <param name="oSortOrder">Collection of SortCriterion objects</param>
            <param name="iMaxResults">Maximum number of objects to retrieve</param>
            <returns>IBusinessObjectSet of IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjects(System.String,System.Int32)">
            <summary>
            Retrieves the data, instantiates the objects, and
            populates them.
            </summary>
            <param name="szWhereClause">Where Clause</param>
            <param name="iMaxResults">Maximum number of objects to retrieve</param>
            <returns>IBusinessObjectSet of IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjects(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Retrieves the data, instantiates the objects, and
            populates them.
            </summary>
            <param name="szWhereClause">Where Clause</param>
            <param name="iPageNum">Current Page Number (0 if not paging)</param>
            <param name="iPageSize">Number of objects per page</param>
            <param name="iMaxResults">Maximum number of objects to retrieve</param>
            <returns>IBusinessObjectSet of IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjects(System.String,System.Collections.IList,System.Collections.IList,System.Int32,System.Int32,System.Int32)">
            <summary>
            Retrieves the data, instantiates the objects, and
            populates them.
            </summary>
            <param name="szWhereClause">Where Clause</param>
            <param name="oSortOrder">IList of SortCriterion objects</param>
            <param name="oParameters">IList of ObjectParameter objects</param>
            <param name="iPageNum">Current Page Number (0 if not paging)</param>
            <param name="iPageSize">Number of objects per page</param>
            <param name="iMaxResults">Maximum number of objects to retrieve</param>
            <returns>IBusinessObjectSet of IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjectsByCustomSQL(System.String)">
            <summary>
            Retrieves the data, instantiates the objects, and
            populates them.
            </summary>
            <param name="szSQL">Custom SQL</param>
            <returns>IBusinessObjectSet of IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjectsByCustomSQL(System.String,System.Collections.IList)">
            <summary>
            Retrieves the data, instantiates the objects, and
            populates them.
            </summary>
            <param name="szSQL">Custom SQL</param>
            <param name="oParameters">Parameters</param>
            <returns>IBusinessObjectSet of IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjectsByCustomSQL(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Retrieves the data, instantiates the objects, and
            populates them.
            </summary>
            <param name="szSQL">Custom SQL</param>
            <param name="iPageNum">Current Page Number (0 if not paging)</param>
            <param name="iPageSize">Number of objects per page</param>
            <param name="iMaxResults">Maximum number of objects to retrieve</param>
            <returns>IBusinessObjectSet of IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjectsByCustomSQL(System.String,System.String,System.Object)">
            <summary>
            Retrieves the data, instantiates the objects, and
            populates them.
            </summary>
            <param name="szSQL">Custom SQL</param>
            <param name="szParmName">Parm Name</param>
            <param name="oParmValue">Parm Value</param>
            <returns>IBusinessObjectSet of IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjectsByCustomSQL(System.String,System.Int32,System.Int32,System.Int32,System.String,System.Object)">
            <summary>
            Retrieves the data, instantiates the objects, and
            populates them.
            </summary>
            <param name="szSQL">Custom SQL</param>
            <param name="iPageNum">Current Page Number (0 if not paging)</param>
            <param name="iPageSize">Number of objects per page</param>
            <param name="iMaxResults">Maximum number of objects to retrieve</param>
            <param name="szParmName">Parm Name</param>
            <param name="oParmValue">Parm Value</param>
            <returns>IBusinessObjectSet of IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjectsByCustomSQL(System.String,System.Int32,System.Int32,System.Int32,System.Collections.IList)">
            <summary>
            Retrieves the data, instantiates the objects, and
            populates them.
            </summary>
            <param name="szSQL">Custom SQL</param>
            <param name="iPageNum">Current Page Number (0 if not paging)</param>
            <param name="iPageSize">Number of objects per page</param>
            <param name="iMaxResults">Maximum number of objects to retrieve</param>
            <param name="oParameters">Parameters</param>
            <returns>IBusinessObjectSet of IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetReaderCommandBehavior">
            <summary>
            Returns the appropriate CommandBehavior depending on
            the current transaction.  If in a transaction, the default
            behavior is returned, otherwise the CloseConnection behavior
            is returned.
            </summary>
            <returns>CommandBehavior</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjectByCustomSQL(System.String)">
            <summary>
            Retrieves the data, instantiates the object, and
            populates it.  Throws ObjectNotFoundException if 
            nothing is found.  Throws ApplicationUnexpectedException
            if more than one object is found.
            </summary>
            <param name="szSQL">SQL</param>
            <exception cref="T:TSI.BusinessObjects.ObjectNotFoundException">ObjectNotFoundException</exception>
            <exception cref="T:TSI.Arch.ApplicationUnexpectedException">ObjectNotFoundException</exception>
            <returns>IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjectByCustomSQL(System.String,System.String,System.Object)">
            <summary>
            Retrieves the data, instantiates the object, and
            populates it.  Throws ObjectNotFoundException if 
            nothing is found.  Throws ApplicationUnexpectedException
            if more than one object is found.
            </summary>
            <param name="szSQL">SQL</param>
            <param name="szParmName">Parm Name</param>
            <param name="oParmValue">Parm Value</param>
            <exception cref="T:TSI.BusinessObjects.ObjectNotFoundException">ObjectNotFoundException</exception>
            <exception cref="T:TSI.Arch.ApplicationUnexpectedException">ObjectNotFoundException</exception>
            <returns>IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjectByCustomSQL(System.String,System.Collections.IList)">
            <summary>
            Retrieves the data, instantiates the object, and
            populates it.  Throws ObjectNotFoundException if 
            nothing is found.  Throws ApplicationUnexpectedException
            if more than one object is found.
            </summary>
            <param name="szSQL">SQL</param>
            <param name="oParameters">Parameters</param>
            <exception cref="T:TSI.BusinessObjects.ObjectNotFoundException">ObjectNotFoundException</exception>
            <exception cref="T:TSI.Arch.ApplicationUnexpectedException">ObjectNotFoundException</exception>
            <returns>IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.CreateAndPopulateObject(System.Data.IDataReader)">
            <summary>
            Instantiates and populates our business object.
            </summary>
            <param name="oReader">Reader with data</param>
            <returns>IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.CreateAndPopulateObject(System.Collections.IDictionary)">
            <summary>
            Instantiates and populates our business object.
            </summary>
            <param name="oData">IDictionary with data</param>
            <returns>IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.CreateInput(System.Data.IDataReader)">
            <summary>
            Converts a record for a data reader into a Dictionary
            for use in populating a business object.
            </summary>
            <param name="oReader">Reader</param>
            <returns>Dictionary of current record</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.SaveObjects(System.Collections.IList)">
            <summary>
            Saves each business object in the list.
            </summary>
            <param name="oObjects">Objects to Save</param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.SaveObjects(System.Collections.IList,System.Data.IDbTransaction)">
            <summary>
            Saves each business object in the list using the
            specified connection and transaction
            </summary>
            <param name="oObjectList">Objects to Save</param>
            <param name="oTran">Transaction to use</param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.SaveObject(TSI.BusinessObjects.IBusinessObject)">
            <summary>
            Saves the specified object.
            </summary>
            <param name="oBusinessObject">The object to save</param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.SaveObject(TSI.BusinessObjects.IBusinessObject,System.Data.IDbTransaction)">
            <summary>
            Saves the specified object.
            </summary>
            <param name="oBusinessObject">The object to save</param>
            <param name="oTran">The transaction to participate in</param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.InsertIntoRepository(TSI.BusinessObjects.IBusinessObject,System.Data.IDbTransaction)">
            <summary>
            Creates and executes the Insert statement for
            the business object.
            </summary>
            <param name="oBusinessObject">The object to save</param>
            <param name="oTran">The transaction to participate in.</param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.PrepareDataForSave(TSI.BusinessObjects.IBusinessObject,System.Collections.IDictionary)">
            <summary>
            Makes any necessary modifications to the data or 
            structure prior to saving the object.
            </summary>
            <param name="oBusinessObject">The object to prepare</param>
            <param name="oData">The dictionary to populate</param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.UpdateRepository(TSI.BusinessObjects.IBusinessObject,System.Data.IDbTransaction)">
            <summary>
            Creates and executes the Update statement for
            the business object.
            </summary>
            <param name="oBusinessObject">The object so update</param>
            <param name="oTran">The transaction to participate in</param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.BuildKeyClause(System.Collections.IList)">
            <summary>
            Builds a SQL condition clause out of the Business
            Object's key fields and values.
            </summary>
            <param name="oKeyValues">List of Key Values (in order)</param>
            <returns>SQL where clause</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.BuildParmKeyClause">
            <summary>
            Builds a WHERE parameterized condition using 
            the object key fields.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.RefreshObject(TSI.BusinessObjects.IBusinessObject)">
            <summary>
            Refreshes the specified object from the repository.
            If the object is not in the repository or is not dirty,
            then the nothing is done to the instance.
            </summary>
            <param name="oBusinessObject">The object to refresh</param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetDateTime(System.Object)">
            <summary>
            Returns a valid DateTime value from the 
            specified value.  If null, returns MinValue.
            </summary>
            <param name="oValue">Potential DateTime value</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetDateTime(System.Object,System.DateTime)">
            <summary>
            Returns a valid DateTime value from the 
            specified value.  If null, returns the specified
            default value.
            </summary>
            <param name="oValue">Potential DateTime value</param>
            <param name="dtDefaultValue">Value to return if NULL</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetString(System.Object)">
            <summary>
            Returns a valid String value from the 
            specified value.  If null, returns null.
            </summary>
            <param name="oValue">Potential string value</param>
            <returns>string</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObject(System.Object)">
            <summary>
            Returns an object translating DBNull into
            a null reference.
            </summary>
            <param name="oValue"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetInt(System.Object)">
            <summary>
            Returns a valid int value from the 
            specified value.  If null, returns 0.
            </summary>
            <param name="oValue">Potential int value</param>
            <returns>int</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetLong(System.Object)">
            <summary>
            Returns a valid int value from the 
            specified value.  If null, returns 0.
            </summary>
            <param name="oValue">Potential int value</param>
            <returns>int</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetFloat(System.Object)">
            <summary>
            Returns a valid float value from the 
            specified value.  If null, returns 0.
            </summary>
            <param name="oValue">Potential float value</param>
            <returns>float</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetDouble(System.Object)">
            <summary>
            Returns a valid Double value from the 
            specified value.  If null, returns 0.
            </summary>
            <param name="oValue">Potential Double value</param>
            <returns>Double</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetDecimal(System.Object)">
            <summary>
            Returns a valid Decimal value from the 
            specified value.  If null, returns 0.
            </summary>
            <param name="oValue">Potential Decimal value</param>
            <returns>int</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetGuid(System.Object)">
            <summary>
            Returns a valid GUID value from the 
            specified value.  If null, returns 
            and "Empty" GUID, i.e. all zeros.
            </summary>
            <param name="oValue">Potential Decimal value</param>
            <returns>int</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetByte(System.Object)">
            <summary>
            Returns a valid byte value from the 
            specified value.  If null, returns 0.
            </summary>
            <param name="oValue">Potential Decimal value</param>
            <returns>int</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetBool(System.Object)">
            <summary>
            Returns a valid bool value from the 
            specified value.  If null, returns false.
            </summary>
            <param name="oValue">Potential bool value</param>
            <returns>bool</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetSortClause(System.Collections.IList)">
            <summary>
            Translate the collection of SortCriterions into
            an appropriate sort clause
            </summary>
            <param name="alSortOrder"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetSortClause(System.Collections.IList,System.Boolean)">
            <summary>
            Translate the collection of SortCriterions into
            an appropriate sort clause
            </summary>
            <param name="alSortOrder"></param>
            <param name="bTranslateFieldToCol"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.PrepareSortFieldName(System.String)">
            <summary>
            Prepares the field name to be referenced in a
            sort clause.
            </summary>
            <param name="szFieldName">Field Name</param>
            <returns></returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.PrepareSortAscValue(System.Boolean)">
            <summary>
            Prepares the sort order to be referenced in a
            sort clause.
            </summary>
            <param name="bSortAsc"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.DeleteObjects(System.Collections.IList)">
            <summary>
            Deletes each object in the specified collection.
            </summary>
            <param name="oObjects"></param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.DeleteObjects(System.Collections.IList,System.Data.IDbTransaction)">
            <summary>
            Deletes the specified objects using the specified
            DB Connection and Transaction
            </summary>
            <param name="oObjects">Object to Delete</param>
            <param name="oTran">Transaction to use</param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.DeleteObject(TSI.BusinessObjects.IBusinessObject)">
            <summary>
            Deletes the specified object.
            </summary>
            <param name="oBusinessObject">Object to Delete</param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.DeleteObject(TSI.BusinessObjects.IBusinessObject,System.Data.IDbTransaction)">
            <summary>
            Delete the specified object from the repository
            </summary>
            <param name="oBusinessObject">Business Object</param>
            <param name="oTran">Transaction To Use</param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.IsOptLockFailure(TSI.BusinessObjects.IBusinessObject)">
            <summary>
            Determines if an optimistic lock failure has occurred
            on the specified object.
            </summary>
            <param name="oBusinessObject"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.IsOptLockFailure(TSI.BusinessObjects.IBusinessObject,System.Data.IDbTransaction)">
            <summary>
            Determines if an optimistic lock failure has occurred
            on the specified object.
            </summary>
            <param name="oBusinessObject"></param>
            <param name="oTran"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.IsOptLockFailure(System.String,TSI.BusinessObjects.IBusinessObject)">
            <summary>
            Determines if an optimistic lock failure has occurred
            on the specified object.
            </summary>
            <param name="szOldOptLock"></param>
            <param name="oBusinessObject"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.IsOptLockFailure(System.String,TSI.BusinessObjects.IBusinessObject,System.Data.IDbTransaction)">
            <summary>
            Determines if an optimistic lock failure has occurred
            on the specified object.
            </summary>
            <param name="szOldOptLock"></param>
            <param name="oBusinessObject"></param>
            <param name="oTran"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.IsOptLockFailure(System.String,System.Collections.IList,System.Data.IDbTransaction)">
            <summary>
            Determines if an optimistic lock failure has occurred
            on the specified object.
            </summary>
            <param name="szOldOptLock"></param>
            <param name="oParameters"></param>
            <param name="oTran"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetTempObject">
            <summary>
            Returns a temporary instance of this manager's business object. 
            This object must not be used for any persistence.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.SetAttribsToRetreive(System.Collections.IList)">
            <summary>
            Sets which attributes to retrieve from the
            repository for all subsequent fetches.  Should 
            not be used if the object is going to be later
            saved.
            </summary>
            <param name="oAttribs">List of Attributes</param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.AddAttribsToRetrieve(System.String)">
            <summary>
            Adds the attribute to the list of those to
            retrieve for this object.
            </summary>
            <param name="szAttrib">Attribute Name</param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.LogDBConnState">
            <summary>
            Logs the state of the DB Connection
            to the trace file.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.CreateDictionaryType">
            <summary>
            Helper method that returns a type of IDictionary object that will 
            subsequently to be used to map columns to data taking into account
            whether or not the underlying DB access provider has case-sensitive
            metadata or not (if it is case sensitive, then this should return
            a case sensitive IDictionary object, otherwise it should be case
            insensitive.
            </summary>
            <returns>IDictionary type of object to be used for column=>data 
                     mapping</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.CreateBusinessObjectSetType">
            <summary>
            Helper method that returns a type of IBusinessObjectSet object that
            will subsequently be used to manage sets of IBusinessObject objects.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TSI.BusinessObjects.BusinessObjectMgr.IdentityGeneratorName">
            <summary>
            Name of the database generator / sequence to be SELECTed 
            from in order to get the value used for the identity column in the 
            last executed SQL insert statement.  For Firebird, this is the name of
            the generator behind the identity column in the mapped DB table.  For
            Oracle, this is the name of the sequence used to populate the identity
            column.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetColumnFromAttribute(System.String)">
            <summary>
            Returns the DB column that is mapped to the specified
            attribute
            </summary>
            <param name="szAttribute">Attribute Name</param>
            <returns>Column Name</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.PrepareValueForSQL(System.Object)">
            <summary>
            Prepares the Object value for a SQL string
            </summary>
            <param name="oValue">Object Value</param>
            <returns>Prepared Value</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.PrepareParmName(System.String)">
            <summary>
            Returns the parameter name for use in a SQL
            parameter.
            </summary>
            <param name="szName">Parameter Name</param>
            <returns>Modified Parameter Name</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.TranslateWildCards(System.String)">
            <summary>
            Translates user wildcard characters (*) into the wildcard
            characters supported by the DB access provider.
            </summary>
            <param name="szValue">String to be translated</param>
            <returns>Translated String</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.OnBeforeExecute(System.String)">
            <summary>
            Fires immediately prior to executing the SQL, this
            allows a class to modify the SQL before it is executed.
            </summary>
            <param name="szSQL">SQL that is to be executed</param>
            <returns>Modified SQL</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.OnBeforeExecute(System.Collections.IList)">
            <summary>
            Fires immediately prior to executing the SQL, this
            allows a class to modify the parameters before the 
            SQL is executed.
            </summary>
            <param name="oParameters">List of ObjectParameter objects</param>
            <returns>Modified Parameter List</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.FormatSQL(System.String,System.Collections.IList)">
            <summary>
            Formats the SQL string using the specified
            list of parameters ensuring the parameter
            names are in sync.
            </summary>
            <param name="szSQL">The SQL to format</param>
            <param name="oParms">The parameter to use for formatting</param>
            <returns>The SQL string formatted for parameters</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.FormatSQL(System.String,System.String,System.Collections.IList)">
            <summary>
            Formats the SQL string using the specified
            list of parameters ensuring the parameter
            names are in sync.
            </summary>
            <param name="szSQL">The SQL to format</param>
            <param name="szTableName">The table name to add to the SQL string</param>
            <param name="oParms">The parameters to use for formatting</param>
            <returns>The SQL string formatted for parameters</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.CreateOptLockValue">
            <summary>
            Creates a new optimistic lock value
            </summary>
            <returns>Optimistic Lock Value</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.PrepareForSmartUpdate(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Creates a Dictionary from the current dictionary and original dictionary that 
            only contains the attributes that have changed.
            </summary>
            <param name="oCurrent">Current Attributes</param>
            <param name="oOriginal">Original Attibutes</param>
            <returns>Changed Attributes</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.AreObjectsEqual(System.Object,System.Object)">
            <summary>
            Determines if the two specified objects are equal
            in value.
            </summary>
            <param name="oValue1"></param>
            <param name="oValue2"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjects``1">
            <summary>
            Retrieves all of the data, instantiates the objects, and
            populates them.
            </summary>
            <returns>IBusinessObjectSet of IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjects``1(System.String)">
            <summary>
            Retrieves the data, instantiates the objects, and
            populates them.
            </summary>
            <param name="szWhereClause">Where Clause</param>
            <returns>BusinessObjectSet of IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjects``1(System.String,System.Collections.IList)">
            <summary>
            Retrieves the data, instantiates the objects, and
            populates them.
            </summary>
            <param name="szWhereClause">Where Clause</param>
            <param name="oSortOrder">IList of SortCriterion objects</param>
            <returns>BusinessObjectSet of IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjects``1(System.String,System.Collections.IList,System.Collections.IList)">
            <summary>
            Retrieves the data, instantiates the objects, and
            populates them.
            </summary>
            <param name="szWhereClause">Where Clause</param>
            <param name="oSortOrder">IList of SortCriterion objects</param>
            <param name="oParameters">IList of ObjectParameter objects</param>
            <returns>BusinessObjectSet of IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjects``1(System.String,System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Retrieves the data, instantiates the objects, and
            populates them.
            </summary>
            <param name="szWhereClause">Where Clause</param>
            <param name="oSortOrder">IList of SortCriterion objects</param>
            <param name="iPageNum">Current Page Number (0 if not paging)</param>
            <param name="iPageSize">Number of objects per page</param>
            <returns>IBusinessObjectSet of IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjects``1(System.String,System.Int32,System.Int32)">
            <summary>
            Retrieves the data, instantiates the objects, and
            populates them.
            </summary>
            <param name="szWhereClause">Where Clause</param>
            <param name="iPageNum">Current Page Number (0 if not paging)</param>
            <param name="iPageSize">Number of objects per page</param>
            <returns>IBusinessObjectSet of IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjects``1(System.String,System.Collections.IList,System.Int32)">
            <summary>
            Retrieves the data, instantiates the objects, and
            populates them.
            </summary>
            <param name="szWhereClause">Where Clause</param>
            <param name="oSortOrder">Collection of SortCriterion objects</param>
            <param name="iMaxResults">Maximum number of objects to retrieve</param>
            <returns>IBusinessObjectSet of IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjects``1(System.String,System.Int32)">
            <summary>
            Retrieves the data, instantiates the objects, and
            populates them.
            </summary>
            <param name="szWhereClause">Where Clause</param>
            <param name="iMaxResults">Maximum number of objects to retrieve</param>
            <returns>IBusinessObjectSet of IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectMgr.GetObjects``1(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Retrieves the data, instantiates the objects, and
            populates them.
            </summary>
            <param name="szWhereClause">Where Clause</param>
            <param name="iPageNum">Current Page Number (0 if not paging)</param>
            <param name="iPageSize">Number of objects per page</param>
            <param name="iMaxResults">Maximum number of objects to retrieve</param>
            <returns>IBusinessObjectSet of IBusinessObject</returns>
        </member>
        <member name="T:TSI.BusinessObjects.BusinessObjectSet">
            <summary>
            Provides functionality to manage a collection
            of business objects.
            </summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObjectSet._iPageSize">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObjectSet._iPageNum">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObjectSet._iTotalCount">
            <summary>Attribute backers</summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectSet.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectSet.#ctor(System.Collections.ICollection)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectSet.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.BusinessObjectSet.PageSize">
            <summary>
            The the logical page for
            this set.
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.BusinessObjectSet.PageNum">
            <summary>
            The current logical page number
            for this set.
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.BusinessObjectSet.TotalCount">
            <summary>
            The total number of items
            in the set, regardless of
            paging.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectSet.Save">
            <summary>
            Saves each object in the set.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectSet.Save(System.Data.IDbTransaction)">
            <summary>
            Save each object in the set using the specified
            transaction.
            </summary>
            <param name="oTran">The Transaction to participate in</param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectSet.Delete">
            <summary>
            Deletes each object in the set.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectSet.Delete(System.Data.IDbTransaction)">
            <summary>
            Deletes each object in the set using the 
            specified transaction.
            </summary>
            <param name="oTran">The Transaction to participate in</param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectSet.Refresh">
            <summary>
            Refreshes each object in the set.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectSet.Add(System.Object)">
            <summary>
            Adds an object to the set
            </summary>
            <param name="value">The object to add</param>
            <returns>Index of added object</returns>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObjectSet`1._iPageSize">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObjectSet`1._iPageNum">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.BusinessObjects.BusinessObjectSet`1._iTotalCount">
            <summary>Attribute backers</summary>
        </member>
        <member name="P:TSI.BusinessObjects.BusinessObjectSet`1.PageSize">
            <summary>
            The the logical page for
            this set.
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.BusinessObjectSet`1.PageNum">
            <summary>
            The current logical page number
            for this set.
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.BusinessObjectSet`1.TotalCount">
            <summary>
            The total number of items
            in the set, regardless of
            paging.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectSet`1.Save">
            <summary>
            Saves each object in the set.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectSet`1.Save(System.Data.IDbTransaction)">
            <summary>
            Save each object in the set using the specified
            transaction.
            </summary>
            <param name="oTran">The Transaction to participate in</param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectSet`1.Delete">
            <summary>
            Deletes each object in the set.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectSet`1.Delete(System.Data.IDbTransaction)">
            <summary>
            Deletes each object in the set using the 
            specified transaction.
            </summary>
            <param name="oTran">The Transaction to participate in</param>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectSet`1.Refresh">
            <summary>
            Refreshes each object in the set.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.BusinessObjectSet`1.Add(`0)">
            <summary>
            Adds an object to the set
            </summary>
            <param name="item">The object to add</param>
            <returns>Index of added object</returns>
        </member>
        <member name="P:TSI.BusinessObjects.IBusinessObjectSetBase.PageSize">
            <summary>
            The the logical page for
            this set.
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.IBusinessObjectSetBase.PageNum">
            <summary>
            The current logical page number
            for this set.
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.IBusinessObjectSetBase.TotalCount">
            <summary>
            The total number of items
            in the set, regardless of
            paging.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObjectSetBase.Save">
            <summary>
            Saves each object in the set.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObjectSetBase.Save(System.Data.IDbTransaction)">
            <summary>
            Save each object in the set using the specified
            transaction.
            </summary>
            <param name="oTran">The Transaction to participate in</param>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObjectSetBase.Delete">
            <summary>
            Deletes each object in the set.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObjectSetBase.Delete(System.Data.IDbTransaction)">
            <summary>
            Deletes each object in the set using the 
            specified transaction.
            </summary>
            <param name="oTran">The Transaction to participate in</param>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObjectSetBase.Refresh">
            <summary>
            Refreshes each object in the set.
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.IBusinessObjectSetT`1.PageSize">
            <summary>
            The the logical page for
            this set.
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.IBusinessObjectSetT`1.PageNum">
            <summary>
            The current logical page number
            for this set.
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.IBusinessObjectSetT`1.TotalCount">
            <summary>
            The total number of items
            in the set, regardless of
            paging.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObjectSetT`1.Save">
            <summary>
            Saves each object in the set.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObjectSetT`1.Save(System.Data.IDbTransaction)">
            <summary>
            Save each object in the set using the specified
            transaction.
            </summary>
            <param name="oTran">The Transaction to participate in</param>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObjectSetT`1.Delete">
            <summary>
            Deletes each object in the set.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObjectSetT`1.Delete(System.Data.IDbTransaction)">
            <summary>
            Deletes each object in the set using the 
            specified transaction.
            </summary>
            <param name="oTran">The Transaction to participate in</param>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObjectSetT`1.Refresh">
            <summary>
            Refreshes each object in the set.
            </summary>
        </member>
        <member name="T:TSI.BusinessObjects.IBusinessObject">
            <summary>
            Provides the base functionality for business object including data persistence and standard audit fields. 
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.IBusinessObject.IsInDB">
            <summary>
            Indicates if this object was retrieved
            from the database.
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.IBusinessObject.IsDirty">
            <summary>
            Indicates if this object has changed
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.IBusinessObject.IsDeleted">
            <summary>
            Indicates if this object has been deleted
            from the repository.
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.IBusinessObject.UsesReflection">
            <summary>
            Indicates if this object should use 
            reflection for Load and Unload operations.
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.IBusinessObject.UsesSmartUpdate">
            <summary>
            Indicates if this object should be updated
            via the smart update mechanism.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObject.GetSmartUpdateDictionary">
            <summary>
            Returns the Dictionary holding the attribute values
            for the smart update.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TSI.BusinessObjects.IBusinessObject.BusinessObjectManager">
            <summary>
            The object manager for this instance.
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.IBusinessObject.CreatedUserID">
            <summary>
            The ID of the user who created the 
            first instance of the object.
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.IBusinessObject.CreatedDateTime">
            <summary>
            The date/time this instance was first
            stored in the repository.
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.IBusinessObject.UpdatedUserID">
            <summary>
            The ID of the last user to modify
            and store this object.
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.IBusinessObject.UpdatedDateTime">
            <summary>
            The date/time of the last time this
            object was modifed and stored in the
            repository.
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.IBusinessObject.OptLock">
            <summary>
            The optimistic locking value.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObject.GetKeyValues">
            <summary>
            Returns the key values of the current
            instance in the same order as the key
            fields.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObject.SetKeyValues(System.Collections.IList)">
            <summary>
            Sets the key fields for the current 
            instance in the same order as the key
            fields.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObject.ClearKeyValues">
            <summary>
            Sets the key fields for this object
            to thier initialized state such that if
            stored, new values would be created.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObject.LoadObject(System.Collections.IDictionary,System.Int32)">
            <summary>
            Populates the object from the Dictionary
            specified.
            </summary>
            <param name="oData">Dictionary of Data</param>
            <param name="iOptions">Load Option</param>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObject.UnloadObject(System.Collections.IDictionary,System.Int32)">
            <summary>
            Populates the Dictionary from the Object.
            </summary>
            <param name="oData">Dictionary of Data</param>
            <param name="iOptions">Unload Option</param>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObject.OnBeforeSave">
            <summary>
            Invoked by BusinessObjectMgr prior to this
            object being saved.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObject.OnAfterSave">
            <summary>
            Invoked by BusinessObjectMgr just after this
            object is saved.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObject.OnBeforeDelete">
            <summary>
            Invoked by BusinessObjectMgr prior to this
            object being deleted.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObject.OnAfterDelete">
            <summary>
            Invoked by BusinessObjectMgr just after this
            object is deleted.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObject.OnBeforeLoad">
            <summary>
            Invoked by BusinessObjectMgr prior to this
            object being Loaded.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObject.OnAfterLoad">
            <summary>
            Invoked by BusinessObjectMgr just after this
            object is Loaded.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObject.Save">
            <summary>
            Saves the object.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObject.Save(System.Data.IDbTransaction)">
            <summary>
            Saves the object using the specified connection
            and transaction.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObject.Delete">
            <summary>
            Deletes the object.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObject.Delete(System.Data.IDbTransaction)">
            <summary>
            Deletes the object using the specified
            connection and transaction.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObject.Refresh">
            <summary>
            Refreshes the object.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObject.GetFieldColMapping">
            <summary>
            Return a Dictionary of Field to Column mappings with the field
            as the key based on the Load/Unload options specified.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObject.Copy">
            <summary>
            Returns a copy of the current
            instance of this business object.
            </summary>
            <returns>IBusinessObject</returns>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObject.Copy(System.Boolean)">
            <summary>
            Returns a copy of the current
            instance of this business object.
            </summary>
            <param name="bOnlyBusinessFields">Indicator if only business fields should be copied</param>
            <returns>IBusinessObject</returns>
        </member>
        <member name="T:TSI.BusinessObjects.IBusinessObjectSet">
            <summary>
            Describes the BusinessObjectSet interface
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.IBusinessObjectSet.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the elements of the collection to the
            set.
            </summary>
            <param name="c"></param>
        </member>
        <member name="T:TSI.BusinessObjects.ObjectNotFoundException">
            <summary>
            Raised with a specific object is requested, by key, 
            but is not found.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.ObjectNotFoundException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="szMessage"></param>
        </member>
        <member name="M:TSI.BusinessObjects.ObjectNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="szMessage">Message for this exception</param>
            <param name="e">Nested exception</param>
        </member>
        <member name="M:TSI.BusinessObjects.ObjectNotFoundException.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="szMessage">Message for this exception</param>
            <param name="szClass">Class throwing the exception</param>
            <param name="szMethod">Method throwing the exception</param>
        </member>
        <member name="M:TSI.BusinessObjects.ObjectNotFoundException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="szMessage">Message for this exception</param>
            <param name="szClass">Class throwing the exception</param>
            <param name="szMethod">Method throwing the exception</param>
            <param name="e">Nested exception</param>
        </member>
        <member name="M:TSI.BusinessObjects.ObjectNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="szClass">Class throwing the exception</param>
            <param name="szMethod">Method throwing the exception</param>
            <param name="e">Nested exception</param>
        </member>
        <member name="T:TSI.BusinessObjects.ObjectParameter">
            <summary>
            Container for Name / Value pairs.  
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.ObjectParameter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.ObjectParameter.#ctor(System.String,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="szName">Parameter Name</param>
            <param name="oValue">Parameter Value</param>
        </member>
        <member name="M:TSI.BusinessObjects.ObjectParameter.#ctor(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            Constructor
            </summary>
            <param name="szName">Parameter Name</param>
            <param name="oValue">Parameter Value</param>
            <param name="oParameterDirection">Parameter Direction</param>
        </member>
        <member name="T:TSI.BusinessObjects.OptLockException">
            <summary>
            Raised when records is not updated due to an
            optimistic lock failure.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.OptLockException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="szMessage"></param>
        </member>
        <member name="M:TSI.BusinessObjects.OptLockException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="szMessage">Message for this exception</param>
            <param name="e">Nested exception</param>
        </member>
        <member name="M:TSI.BusinessObjects.OptLockException.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="szMessage">Message for this exception</param>
            <param name="szClass">Class throwing the exception</param>
            <param name="szMethod">Method throwing the exception</param>
        </member>
        <member name="M:TSI.BusinessObjects.OptLockException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="szMessage">Message for this exception</param>
            <param name="szClass">Class throwing the exception</param>
            <param name="szMethod">Method throwing the exception</param>
            <param name="e">Nested exception</param>
        </member>
        <member name="M:TSI.BusinessObjects.OptLockException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="szClass">Class throwing the exception</param>
            <param name="szMethod">Method throwing the exception</param>
            <param name="e">Nested exception</param>
        </member>
        <member name="T:TSI.BusinessObjects.SortCriterion">
            <summary>
            Provides functionality to specify which attributes
            to sort a set by.
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.SortCriterion.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.SortCriterion.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="szSortField">Field to Sort</param>
            <param name="bSortAsc">Sort Ascending</param>
        </member>
        <member name="P:TSI.BusinessObjects.SortCriterion.SortField">
            <summary>
            The field to sort
            </summary>
        </member>
        <member name="P:TSI.BusinessObjects.SortCriterion.SortAsc">
            <summary>
            Sort ascending
            </summary>
        </member>
        <member name="M:TSI.BusinessObjects.SortCriterion.GetSortClause">
            <summary>
            Returns the a SQL sort clause.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TSI.DataAccess.DBAccessBase">
            <summary>
            Provides base functionality for the DB Providers.
            </summary>
        </member>
        <member name="F:TSI.DataAccess.DBAccessBase._oLogger">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.DataAccess.DBAccessBase._szConnectionString">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.DataAccess.DBAccessBase._szUseVarChar1ForBool">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.DataAccess.DBAccessBase._oDBConn">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.DataAccess.DBAccessBase._bOpenedInternally">
            <summary>Attribute backers</summary>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.#ctor(TSI.Utils.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="oLogger">Application Logger</param>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.#ctor(System.Data.IDbConnection)">
            <summary>
            Constructor
            </summary>
            <param name="oDBConn">Connection to Use</param>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.#ctor(System.Data.IDbConnection,TSI.Utils.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="oDBConn">Connection to Use</param>
            <param name="oLogger">Application Logger</param>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.Init(System.Data.IDbConnection,TSI.Utils.ILogger)">
            <summary>
            Initializes the data provider.
            </summary>
            <param name="oConn">DB Connection to use</param>
            <param name="oLogger">Logger to user</param>
        </member>
        <member name="P:TSI.DataAccess.DBAccessBase.Logger">
            <summary>
            Application Logger
            </summary>
        </member>
        <member name="P:TSI.DataAccess.DBAccessBase.ConnectionString">
            <summary>
            DB Connection string.  
            </summary>
        </member>
        <member name="P:TSI.DataAccess.DBAccessBase.ConnectionName">
            <summary>
            DB Connection Name.  
            </summary>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.PrepareForInsert(System.String)">
            <summary>
            Prepares the string value to be part of a SQL
            string. Should be overriden by specific data 
            access providers as needed.
            </summary>
            <param name="szValue">The value to prepare</param>
            <returns>The prepared string.</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.BuildSQLColumnClause(System.Collections.IDictionary)">
            <summary>
            Creates a comma delimited list of column names from the
            keys of the specified Dictionary that is enclosed in
            parenthesis.
            </summary>
            <param name="htValues">Dictionary of Column/Values</param>
            <returns>The "Column Clause" string.</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.BuildSQLColumnClause(System.Collections.IDictionary,System.Boolean)">
            <summary>
            Creates a comma delimited list of column names from the
            keys of the specified Dictionary.
            </summary>
            <param name="htValues">Dictionary of Column/Values</param>
            <param name="bEncloseWithParens">Indicates if to enclose string in parenthesis</param>
            <returns>The "Column Clause" string.</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.BuildSQLValuesClause(System.Collections.IDictionary,System.Boolean,System.Boolean)">
            <summary>
            Creates a comma delimited list of string values from the
            values of the specified Dictionary.
            </summary>
            <param name="htValues">Dictionary of Column/Values</param>
            <param name="bEncloseWithParens">Indicates if to enclose string in parenthesis</param>
            <param name="bUseParameters">Indicates if parameters are being used</param>
            <returns>The "Values Clause" string.</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.PrepareValueForSQL(System.String)">
            <summary>
            Prepares the string value for a SQL string
            </summary>
            <param name="szValue">String Value</param>
            <returns>Prepared Value</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.PrepareValueForSQL(System.String,System.Boolean)">
            <summary>
            Prepares the string value for a SQL string translating
            using wildcard characters (usually "*") with Repository specific
            wildcard characters (usually "%")
            </summary>
            <param name="szValue">String Value</param>
            <param name="bTranslateWildCard"></param>
            <returns>Prepared Value</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.TranslateWildCards(System.String)">
            <summary>
            Translates user wildcard characters (*) into the wildcard
            characters supported by the DB access provider.
            </summary>
            <param name="szValue"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.PrepareValueForSQL(System.DateTime)">
            <summary>
            Prepares the DateTime value for a SQL string
            </summary>
            <param name="dtValue">DateTime Value</param>
            <returns>Prepared Value</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.PrepareValueForSQL(System.Boolean)">
            <summary>
            Prepares the Boolean value for a SQL string
            </summary>
            <param name="bValue">Boolean Value</param>
            <returns>Prepared Value</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.UseVarChar1ForBool">
            <summary>
            Indicates whether or not a Varchar(1) is eligible
            to be treated as a bool data type based on the
            <code>UseVarChar1ForBool</code> configuration
            setting.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.PrepareValueForSQL(System.Object)">
            <summary>
            Prepares the Object value for a SQL string
            </summary>
            <param name="oValue">Object Value</param>
            <returns>Prepared Value</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.BuildSQLInsertStatement(System.Collections.IDictionary,System.String,System.Boolean)">
            <summary>
            Creates a SQL insert statement from the keys/values of 
            the specified Dictionary.
            </summary>
            <param name="htValues">Dictionary of Column/Values</param>
            <param name="szTableName">The table to insert the data into</param>
            <param name="bUsesSQLParameters">Indicates parameters should be used.</param>
            <returns>The Insert statement.</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.BuildSQLUpdateStatement(System.Collections.IDictionary,System.String,System.Boolean)">
            <summary>
            Creates a SQL update statment for the column=value portion of a
            update statement statement from the keys/values of 
            the specified Dictionary.
            </summary>
            <param name="htValues">Dictionary of Column/Values</param>
            <param name="szTableName">The table to update.</param>
            <param name="bUsesSQLParameters">Indicates parameters should be used.</param>
            <returns>The update statement.</returns>	
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.BuildUpdateValuesClause(System.Collections.IDictionary,System.Boolean)">
            <summary>
            Creates a SQL clause for the column=value portion of a
            update statement statement from the keys/values of 
            the specified Dictionary.
            </summary>
            <param name="htValues">Dictionary of Column/Values</param>
            <param name="bUsesSQLParameters">Indicates parameters should be used.</param>
            <returns>The update clause statement.</returns>	
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.Open">
            <summary>
            Opens a database connection.
            </summary>
            <returns>IDbConnection</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.OpenInternal">
            <summary>
            Utilized by internal data access methods to manage
            thier own connections.  Opens the database connection and sets
            flag that connection was opened internally.
            </summary>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.OpenDB">
            <summary>
            Opens a database connection as specified
            by the DBConnectionString in the configuration
            settings.
            </summary>
            <returns>IDbConnection</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.SetDbConnection(System.Data.IDbConnection)">
            <summary>
            Sets the connection for the current instance.
            </summary>
            <param name="oConn">IDbConnection</param>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.Close(System.Data.IDbConnection)">
            <summary>
            Closes the specified connection.
            </summary>
            <param name="oDBConn">The connection to close.</param>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.Close">
            <summary>
            Closes the database connection for this
            provider instance.
            </summary>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.CloseInternal">
            <summary>
            If the database connection was opened by any of this
            instance's methods, then it is closed.  Otherwise
            it is left open.
            </summary>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.Close(System.Data.IDataReader)">
            <summary>
            Closes the specified data reader.
            </summary>
            <param name="oReader"></param>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.ExecuteNonQuery(System.String)">
            <summary>
            Executes the specified SQL statement.
            </summary>
            <param name="szSQL">The SQL to execute</param>
            <returns>Count of affected records</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.ExecuteNonQuery(System.String,System.Collections.IList)">
            <summary>
            Executes the specified SQL statement.
            </summary>
            <param name="szSQL">The SQL to execute</param>
            <param name="oParameters">Collection of DBParameter objects</param>
            <returns>Count of affected records</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.ExecuteNonQuery(System.String,System.Collections.IList,System.Data.IDbTransaction)">
            <summary>
            Executes the specified SQL statement.
            </summary>
            <param name="szSQL">The SQL to execute</param>
            <param name="oParameters">Collection of DBParameter objects</param>
            <param name="oTran">IDbTransaction</param>
            <returns>Count of affected records</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.ExecuteNonQuery(System.String,System.Collections.IList,System.Data.IDbTransaction,System.Data.CommandType)">
            <summary>
            Executes the specified SQL statement.
            </summary>
            <param name="szSQL">The SQL to execute</param>
            <param name="oParameters">Collection of DBParameter objects</param>
            <param name="oTran">IDbTransaction</param>
            <param name="oCommandType">Type of Command to Execute</param>
            <returns>Count of affected records</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.ExecuteScalar(System.String)">
            <summary>
            Executes the specified select statement.
            </summary>
            <param name="szSQL">The Select SQL to execute</param>
            <returns>Single Value</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.ExecuteScalar(System.String,System.Collections.IList)">
            <summary>
            Executes the specified select statement.
            </summary>
            <param name="szSQL">The Select SQL to execute</param>
            <param name="oParameters">Collection of DBParameter objects</param>
            <returns>Single Value</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.GetString(System.Data.IDataReader,System.String)">
            <summary>
            Retreives the specified string value from the reader
            by the column name. 
            </summary>
            <param name="oReader">Reader</param>
            <param name="szColName">Column Name</param>
            <returns>String</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.GetString(System.Data.IDataReader,System.Int32)">
            <summary>
            Retreives the specified string value from the reader
            by the ordinal. 
            </summary>
            <param name="oReader">Reader</param>
            <param name="iColOrdinal">Column Ordinal</param>
            <returns>String</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.GetString(System.Data.IDataReader,System.String,System.String)">
            <summary>
            Retreives the specified string value from the reader
            by the column name.  If null, returns the default value.
            </summary>
            <param name="oReader">Reader</param>
            <param name="szColName">Column Name</param>
            <param name="szDefaultValue">Default Value if NULL</param>
            <returns>String</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.GetString(System.Data.IDataReader,System.Int32,System.String)">
            <summary>
            Retreives the specified string value from the reader
            by the ordinal.  If null, returns the default value.
            </summary>
            <param name="oReader">Reader</param>
            <param name="iColOrdinal">Column Ordinal</param>
            <param name="szDefaultValue">Default Value if NULL</param>
            <returns>String</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.GetDateTime(System.Data.IDataReader,System.String)">
            <summary>
            Retreives the specified DateTime value from the reader
            by column name.  
            </summary>
            <param name="oReader">Reader</param>
            <param name="szColName">Column Name</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.GetInt16(System.Data.IDataReader,System.String)">
            <summary>
            Retreives the specified Int16 value from the reader
            by column name.  
            </summary>
            <param name="oReader">Reader</param>
            <param name="szColName">Column Name</param>
            <returns>Int16</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.GetInt32(System.Data.IDataReader,System.String)">
            <summary>
            Retreives the specified Int32 value from the reader
            by column name.  
            </summary>
            <param name="oReader">Reader</param>
            <param name="szColName">Column Name</param>
            <returns>Int32</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.GetInt64(System.Data.IDataReader,System.String)">
            <summary>
            Retreives the specified Int64 value from the reader
            by column name.  
            </summary>
            <param name="oReader">Reader</param>
            <param name="szColName">Column Name</param>
            <returns>Int64</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.GetBoolean(System.Data.IDataReader,System.String)">
            <summary>
            Retreives the specified bool value from the reader
            by column name.  
            </summary>
            <param name="oReader">Reader</param>
            <param name="szColName">Column Name</param>
            <returns>bool</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.GetDecimal(System.Data.IDataReader,System.String)">
            <summary>
            Retreives the specified Decimal value from the reader
            by column name.  
            </summary>
            <param name="oReader">Reader</param>
            <param name="szColName">Column Name</param>
            <returns>Decimal</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.GetFloat(System.Data.IDataReader,System.String)">
            <summary>
            Retreives the specified float value from the reader
            by column name.  
            </summary>
            <param name="oReader">Reader</param>
            <param name="szColName">Column Name</param>
            <returns>Float</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.GetOrdinal(System.Data.IDataReader,System.String)">
            <summary>
            Returns the ordinal for the specified column name
            </summary>
            <param name="oReader">DataReader</param>
            <param name="szColName">Column Name</param>
            <returns></returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.LogMessage(System.String)">
            <summary>
            Write a message to the Trace Service Provider
            </summary>
            <param name="szMessage">The Message to Write</param>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.LogError(System.Exception)">
            <summary>
            Logs the exception to the Trace Service Provider
            </summary>
            <param name="e">The Exception to Write</param>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.PrepareSQLForRowLimit(System.String,System.Int32)">
            <summary>
            Modifies the SQL to restrict the number of records to the
            number specified by the Row Limit.
            </summary>
            <param name="szSQL">SQL to Prepare</param>
            <param name="iRowLimit">Row Limit</param>
            <returns>Modified Sql</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.PrepareParmName(System.String)">
            <summary>
            Returns the parameter name for use in a SQL
            parameter.
            </summary>
            <param name="szParmName"></param>
            <returns>Modified Parameter Name</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.PrepareParmValue(System.Object)">
            <summary>
            Returns the parameter value for use in a SQL
            parameter.
            </summary>
            <param name="oParmValue"></param>
            <returns>Modified Parameter Value</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.IsEmptyStringNull">
            <summary>
            Indicates if the current repository treats
            empty strings as NULL.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.LogDBConnState">
            <summary>
            Logs the state of the connection to
            the trace file.
            </summary>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.IsCaseSensitiveMetaData">
            <summary>
            Indicates if the current repository treats metadata (column names,
            table names, etc.) as case-sensitive.  If the following 2 SQLs 
            are not the same, then this should return true, otherwise it
            should return false:
                SELECT some_col FROM some_table
                SELECT SOME_COL FROM SOME_TABLE
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.ExecuteIdentityInsert(System.String,System.String,System.Collections.IList,System.Data.IDbTransaction)">
            <summary>
            Executes the specified insert statement returning the value used for
            the identity column.  This should only be invoked when the insert
            being executed uses an identity column.  The default implementation
            in here ignores the passed szIdentitySelectorName and uses the
            "SCOPE_IDENTITY()" procedure to get the identity used.  NOTE: It must
            not be possible that the value returned is not actually the value used 
            even if this insert is not executed within a transaction.
            </summary>
            <param name="szSQL">The Insert SQL to execute</param>
            <param name="szIdentityGeneratorName">The name of the database generator / 
              sequence to be SELECTed from in order to get the value used for 
              the identity column.</param>
            <param name="oParameters">Collection of DBParameter objects</param>
            <param name="oTrans">Transaction to Use</param>
            <returns>Single Value</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.GetSelectIdentityStatement(System.String)">
            <summary>
            Returns the SQL Statement to append to an Insert
            to retrieve a generated value (i.e. Identity, autonumber, etc.)
            </summary>
            <param name="szIdentityGeneratorName">The name of the database generator / 
              sequence to be SELECTed from in order to get the value used for 
              the identity column.</param>
            <returns></returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.GetDataAdapter(System.String,System.Data.IDbConnection)">
            <summary>
            Returns a provider specific Data Adapter.
            </summary>
            <param name="szSQL"></param>
            <param name="oDBConn"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.GetDataAdapter(System.String,System.Data.IDbConnection,System.Collections.IList)">
            <summary>
            Returns a provider specific Data Adapter.
            </summary>
            <param name="szSQL"></param>
            <param name="oDBConn"></param>
            <param name="oParameters"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.ExecuteSelect(System.String)">
            <summary>
            Executes the specified select statement.
            </summary>
            <param name="szSQL">The Select SQL to execute</param>
            <returns>DataSet of results</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.ExecuteSelect(System.String,System.Collections.IList)">
            <summary>
            Executes the specified select statement.
            </summary>
            <param name="szSQL">The Select SQL to execute</param>
            <returns>DataSet of results</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.ExecuteStoredProcedure(System.String,System.Collections.IList)">
            <summary>
            Executes the specified select statement.
            </summary>
            <param name="szStoredProcecure">The Select SQL to execute</param>
            <param name="oParameters"></param>
            <returns>DataSet of results</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.GetCommand(System.Data.IDbTransaction)">
            <summary>
            Creates a connection command either with the current
            connection, or with the connection for the specified
            transaction.
            </summary>
            <param name="oTrans"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.ExecuteScalar(System.String,System.Collections.IList,System.Data.IDbTransaction)">
            <summary>
            Executes the specified select statement.
            </summary>
            <param name="szSQL">The Select SQL to execute</param>
            <param name="oParameters">Collection of DBParameter objects</param>
            <param name="oTran">IDbTransaction</param>
            <returns>Single Value</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.ExecuteScalar(System.String,System.Collections.IList,System.Data.IDbTransaction,System.Data.CommandType)">
            <summary>
            Executes the specified select statement.
            </summary>
            <param name="szSQL">The Select SQL to execute</param>
            <param name="oParameters">Collection of DBParameter objects</param>
            <param name="oTran">IDbTransaction</param>
            <param name="oCommandType">Type of Command to Execute</param>
            <returns>Single Value</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.ExecuteReader(System.String)">
            <summary>
            Executes the specified select statement.
            </summary>
            <param name="szSQL">The Select SQL to execute</param>
            <returns>DataReader of results</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.ExecuteReader(System.String,System.Data.CommandBehavior)">
            <summary>
            Executes the specified select statement.
            </summary>
            <param name="szSQL">The Select SQL to execute</param>
            <param name="cmdBehavior">The behavior for the reader</param>
            <returns>DataReader of results</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.ExecuteReader(System.String,System.Collections.IList)">
            <summary>
            Executes the specified select statement.
            </summary>
            <param name="szSQL"></param>
            <param name="oParameters"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.ExecuteReader(System.String,System.Collections.IList,System.Data.CommandBehavior,System.Data.IDbTransaction)">
            <summary>
            Executes the specified select statement.
            </summary>
            <param name="szSQL">The Select SQL to execute</param>
            <param name="oParameters">Collection of DBParameter objects</param>
            <param name="cmdBehavior">The behavior for the reader</param>
            <param name="oTran">The Transaction to participate in</param>
            <returns>DataReader of results</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.ExecuteReader(System.String,System.Collections.IList,System.Data.CommandBehavior,System.Data.IDbTransaction,System.Data.CommandType)">
            <summary>
            Executes the specified select statement.
            </summary>
            <param name="szSQL">The Select SQL to execute</param>
            <param name="oParameters">Collection of DBParameter objects</param>
            <param name="cmdBehavior">The behavior for the reader</param>
            <param name="oTran">The Transaction to participate in</param>
            <param name="oCommandType">Type of Command to Execute</param>
            <returns>DataReader of results</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.AddParameters(System.Data.IDbCommand,System.Collections.IList)">
            <summary>
            Adds the specified parameters to the specified command
            object.
            </summary>
            <param name="oCommand">SqlCommand</param>
            <param name="oParameters">Collection of DBParameter objects</param>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.CreateParameter(TSI.DataAccess.DBParameter)">
            <summary>
            Creates a parameter object from the specified name
            and value.
            </summary>
            <param name="szName">Parm Name</param>
            <param name="oValue">Parm Value</param>
            <returns>Parameter Object</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessBase.EscapeString(System.String)">
            <summary>
            Escapes the specified string for use with the
            RDMS.
            </summary>
            <param name="szValue"></param>
            <returns></returns>
        </member>
        <member name="T:TSI.DataAccess.DBAccessFactory">
            <summary>
            Creates an instance of the DB Access provider as
            specified in the DBAccessProvider application setting.
            </summary>
        </member>
        <member name="M:TSI.DataAccess.DBAccessFactory.getDBAccessProvider(System.String)">
            <summary>
            Returns an instance of the configured DB Access provider.
            </summary>
            <returns>DBAccess Instance</returns>
        </member>
        <member name="M:TSI.DataAccess.DBAccessFactory.getDBAccessProvider">
            <summary>
            Returns an instance of the configured DB Access provider.
            </summary>
            <returns>DBAccess Instance</returns>
        </member>
        <member name="T:TSI.DataAccess.DBException">
            <summary>
            Exception class for data providers.  The innerException will
            always be a data exception of types ODBC, OLEDB, or SQL.  Used
            by the DB Providers to allow consumers to handle generic SQL
            exceptions.
            </summary>
        </member>
        <member name="M:TSI.DataAccess.DBException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:TSI.DataAccess.DBException.SQLStatement">
            <summary>
            The SQL Statement that caused the exception.
            </summary>
        </member>
        <member name="P:TSI.DataAccess.DBException.SQLParameters">
            <summary>
            DBParameters for the SQL Statement
            </summary>
        </member>
        <member name="M:TSI.DataAccess.DBException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="szMessage">Exception Message</param>
        </member>
        <member name="M:TSI.DataAccess.DBException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="szMessage">Exception Message</param>
            <param name="e">Nested Exception</param>
        </member>
        <member name="M:TSI.DataAccess.DBException.#ctor(System.String,System.Exception,System.String)">
            <summary>
            
            </summary>
            <param name="szMessage">Exception Message</param>
            <param name="e">Nested Exception</param>
            <param name="szSQLStatement">SQL Statement that resulted in exception</param>
        </member>
        <member name="M:TSI.DataAccess.DBException.#ctor(System.String,System.Exception,System.String,System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="szMessage">Exception Message</param>
            <param name="e">Nested Exception</param>
            <param name="szSQLStatement">SQL Statement that resulted in exception</param>
            <param name="lSQLParameters">List of SQL Parameters for the SQL Statement</param>
        </member>
        <member name="T:TSI.DataAccess.DBFirebirdProvider">
            <summary>
            Provides data access to Firebird.  
            </summary>
        </member>
        <member name="F:TSI.DataAccess.DBFirebirdProvider.ESCAPE_TERM">
            <summary>Format used to escape identifier names</summary>
        </member>
        <member name="M:TSI.DataAccess.DBFirebirdProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:TSI.DataAccess.DBFirebirdProvider.#ctor(TSI.Utils.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="oLogger">Application Logger</param>
        </member>
        <member name="M:TSI.DataAccess.DBFirebirdProvider.#ctor(FirebirdSql.Data.Firebird.FbConnection)">
            <summary>
            Constructor
            </summary>
            <param name="oDBConnIn">Connection to Use</param>
        </member>
        <member name="M:TSI.DataAccess.DBFirebirdProvider.#ctor(FirebirdSql.Data.Firebird.FbConnection,TSI.Utils.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="oDBConnIn">Connection to Use</param>
            <param name="oLogger">Application Logger</param>
        </member>
        <member name="M:TSI.DataAccess.DBFirebirdProvider.SetDbConnection(System.Data.IDbConnection)">
            <summary>
            Sets the connection for the current instance.
            </summary>
            <param name="oConn">DB Connection</param>
        </member>
        <member name="M:TSI.DataAccess.DBFirebirdProvider.OpenDB">
            <summary>
            Opens a database connection as specified
            by the DBConnectionString in the configuration
            settings.
            </summary>
            <returns>IDbConnection</returns>
        </member>
        <member name="M:TSI.DataAccess.DBFirebirdProvider.Close(System.Data.IDbConnection)">
            <summary>
            Closes the specified connection.
            The Firebird ADO.NET provider throws intermittent
            NullReferenceExceptions.  At this point there is
            no rhyme or reason.  This code eats that specific
            exception type.
            </summary>
            <param name="oDBConn">The connection to close.</param>
        </member>
        <member name="M:TSI.DataAccess.DBFirebirdProvider.GetDataAdapter(System.String,System.Data.IDbConnection)">
            <summary>
            Returns a provider specific Data Adapter.
            </summary>
            <param name="szSQL"></param>
            <param name="oDBConn"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.DataAccess.DBFirebirdProvider.PrepareParmName(System.String)">
            <summary>
            Returns the parameter name for use in a SQL
            parameter.
            </summary>
            <param name="szParmName"></param>
            <returns>Modified Parameter Name</returns>
        </member>
        <member name="M:TSI.DataAccess.DBFirebirdProvider.CreateParameter(TSI.DataAccess.DBParameter)">
            <summary>
            Creates a parameter object from the specified name
            and value.
            </summary>
            <param name="szName">Parm Name</param>
            <param name="oValue">Parm Value</param>
            <returns>Parameter Object</returns>
        </member>
        <member name="M:TSI.DataAccess.DBFirebirdProvider.PrepareValueForSQL(System.DateTime)">
            <summary>
            Prepares the DateTime value for a SQL string
            </summary>
            <param name="dtValue">DateTime Value</param>
            <returns>Prepared Value</returns>
        </member>
        <member name="M:TSI.DataAccess.DBFirebirdProvider.PrepareSQLForRowLimit(System.String,System.Int32)">
            <summary>
            Modifies the SQL to restrict the number of records to the
            number specified by the Row Limit.
            </summary>
            <param name="szSQL">SQL to Prepare</param>
            <param name="iRowLimit">Row Limit</param>
            <returns>Modified SQL</returns>
        </member>
        <member name="M:TSI.DataAccess.DBFirebirdProvider.IsEmptyStringNull">
            <summary>
            Indicates if the current repository treats
            empty strings as NULL.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:TSI.DataAccess.DBFirebirdProvider.ExecuteIdentityInsert(System.String,System.String,System.Collections.IList,System.Data.IDbTransaction)">
            <summary>
            Executes the specified insert statement returning the value used for
            the identity column.  This should only be invoked when the insert
            being executed uses an identity column.  NOTE: It must
            not be possible that the value returned is not actually the value used 
            even if this insert is not executed within a transaction.
            </summary>
            <param name="szSQL">The Insert SQL to execute</param>
            <param name="szIdentityGeneratorName">The name of the database generator / 
              sequence to be SELECTed from in order to get the value used for 
              the identity column.</param>
            <param name="oParameters">IList of DBParameter objects</param>
            <param name="oTransIn">Transaction to Use</param>
            <returns>Single Value</returns>
        </member>
        <member name="M:TSI.DataAccess.DBFirebirdProvider.EscapeString(System.String)">
            <summary>
            Escapes the specified string for use with the
            RDMS.
            </summary>
            <param name="szValue"></param>
            <returns></returns>
        </member>
        <member name="T:TSI.DataAccess.DBMSAccessOleDBProvider">
            <summary>
            Provides data access Microsoft Access databases.   
            </summary>
        </member>
        <member name="F:TSI.DataAccess.DBMSAccessOleDBProvider.ESCAPE_STRING">
            <summary>Format used to escape identifier names</summary>
        </member>
        <member name="M:TSI.DataAccess.DBMSAccessOleDBProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:TSI.DataAccess.DBMSAccessOleDBProvider.#ctor(TSI.Utils.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="oLogger">Application Logger</param>
        </member>
        <member name="M:TSI.DataAccess.DBMSAccessOleDBProvider.#ctor(System.Data.OleDb.OleDbConnection)">
            <summary>
            Constructor
            </summary>
            <param name="oDBConn">Connection to Use</param>
        </member>
        <member name="M:TSI.DataAccess.DBMSAccessOleDBProvider.GetSelectIdentityStatement(System.String)">
            <summary>
            Returns the SQL Statement to append to an Insert
            to retrieve a generated value (i.e. Identity, autonumber, etc.)
            </summary>
            <returns></returns>
        </member>
        <member name="M:TSI.DataAccess.DBMSAccessOleDBProvider.ExecuteIdentityInsert(System.String,System.String,System.Collections.IList,System.Data.IDbTransaction)">
            <summary>
            Executes the specified insert statement returning the value used for
            the identity column.  This should only be invoked when the insert
            being executed uses an identity column.  The default implementation
            in here ignores the passed szIdentitySelectorName and uses the
            "SCOPE_IDENTITY()" procedure to get the identity used.  NOTE: It must
            not be possible that the value returned is not actually the value used 
            even if this insert is not executed within a transaction.
            </summary>
            <param name="szSQL">The Insert SQL to execute</param>
            <param name="szIdentityGeneratorName">The name of the database generator / 
              sequence to be SELECTed from in order to get the value used for 
              the identity column.</param>
            <param name="oParameters">IList of DBParameter objects</param>
            <param name="oTrans">Transaction to Use</param>
            <returns>Single Value</returns>
        </member>
        <member name="M:TSI.DataAccess.DBMSAccessOleDBProvider.PrepareSQLForRowLimit(System.String,System.Int32)">
            <summary>
            Modifies the SQL to restrict the number of records to the
            number specified by the Row Limit.
            </summary>
            <param name="szSQL">SQL to Prepare</param>
            <param name="iRowLimit">Row Limit</param>
            <returns>Modified Sql</returns>
        </member>
        <member name="M:TSI.DataAccess.DBMSAccessOleDBProvider.EscapeString(System.String)">
            <summary>
            Escapes the specified string for use in SQL.
            </summary>
            <param name="szValue"></param>
            <returns></returns>
        </member>
        <member name="T:TSI.DataAccess.DBMSAccessProvider">
            <summary>
            Provides data access Microsoft Access databases.   
            </summary>
        </member>
        <member name="F:TSI.DataAccess.DBMSAccessProvider.ESCAPE_STRING">
            <summary>Format used to escape identifier names</summary>
        </member>
        <member name="M:TSI.DataAccess.DBMSAccessProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:TSI.DataAccess.DBMSAccessProvider.#ctor(TSI.Utils.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="oLogger">Application Logger</param>
        </member>
        <member name="M:TSI.DataAccess.DBMSAccessProvider.#ctor(System.Data.Odbc.OdbcConnection)">
            <summary>
            Constructor
            </summary>
            <param name="oDBConn">Connection to Use</param>
        </member>
        <member name="M:TSI.DataAccess.DBMSAccessProvider.GetSelectIdentityStatement(System.String)">
            <summary>
            Returns the SQL Statement to append to an Insert
            to retrieve a generated value (i.e. Identity, autonumber, etc.)
            </summary>
            <returns></returns>
        </member>
        <member name="M:TSI.DataAccess.DBMSAccessProvider.ExecuteIdentityInsert(System.String,System.String,System.Collections.IList,System.Data.IDbTransaction)">
            <summary>
            Executes the specified insert statement returning the value used for
            the identity column.  This should only be invoked when the insert
            being executed uses an identity column.  The default implementation
            in here ignores the passed szIdentitySelectorName and uses the
            "SCOPE_IDENTITY()" procedure to get the identity used.  NOTE: It must
            not be possible that the value returned is not actually the value used 
            even if this insert is not executed within a transaction.
            </summary>
            <param name="szSQL">The Insert SQL to execute</param>
            <param name="szIdentityGeneratorName">The name of the database generator / 
              sequence to be SELECTed from in order to get the value used for 
              the identity column.</param>
            <param name="oParameters">IList of DBParameter objects</param>
            <param name="oTrans">Transaction to Use</param>
            <returns>Single Value</returns>
        </member>
        <member name="M:TSI.DataAccess.DBMSAccessProvider.PrepareSQLForRowLimit(System.String,System.Int32)">
            <summary>
            Modifies the SQL to restrict the number of records to the
            number specified by the Row Limit.
            </summary>
            <param name="szSQL">SQL to Prepare</param>
            <param name="iRowLimit">Row Limit</param>
            <returns>Modified Sql</returns>
        </member>
        <member name="M:TSI.DataAccess.DBMSAccessProvider.EscapeString(System.String)">
            <summary>
            Escapes the specified string for use in SQL.
            </summary>
            <param name="szValue"></param>
            <returns></returns>
        </member>
        <member name="T:TSI.DataAccess.DBMySQLProvider">
            <summary>
            Provides data access to MySQL. 
            </summary>
        </member>
        <member name="F:TSI.DataAccess.DBMySQLProvider.ESCAPE_TERM">
            <summary>Format used to escape identifier names</summary>
        </member>
        <member name="M:TSI.DataAccess.DBMySQLProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:TSI.DataAccess.DBMySQLProvider.#ctor(TSI.Utils.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="oLogger">Application Logger</param>
        </member>
        <member name="M:TSI.DataAccess.DBMySQLProvider.#ctor(MySql.Data.MySqlClient.MySqlConnection)">
            <summary>
            Constructor
            </summary>
            <param name="oDBConnIn">Connection to Use</param>
        </member>
        <member name="M:TSI.DataAccess.DBMySQLProvider.#ctor(MySql.Data.MySqlClient.MySqlConnection,TSI.Utils.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="oDBConnIn">Connection to Use</param>
            <param name="oLogger">Application Logger</param>
        </member>
        <member name="M:TSI.DataAccess.DBMySQLProvider.SetDbConnection(System.Data.IDbConnection)">
            <summary>
            Sets the connection for the current instance.
            </summary>
            <param name="oConn">DB Connection</param>
        </member>
        <member name="M:TSI.DataAccess.DBMySQLProvider.OpenDB">
            <summary>
            Opens a database connection as specified
            by the DBConnectionString in the configuration
            settings.
            </summary>
            <returns>IDbConnection</returns>
        </member>
        <member name="M:TSI.DataAccess.DBMySQLProvider.GetDataAdapter(System.String,System.Data.IDbConnection)">
            <summary>
            Returns a provider specific Data Adapter.
            </summary>
            <param name="szSQL"></param>
            <param name="oDBConn"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.DataAccess.DBMySQLProvider.PrepareParmName(System.String)">
            <summary>
            Returns the parameter name for use in a SQL
            parameter.
            </summary>
            <param name="szParmName"></param>
            <returns>Modified Parameter Name</returns>
        </member>
        <member name="M:TSI.DataAccess.DBMySQLProvider.CreateParameter(TSI.DataAccess.DBParameter)">
            <summary>
            Creates a parameter object from the specified name
            and value.
            </summary>
            <param name="szName">Parm Name</param>
            <param name="oValue">Parm Value</param>
            <returns>Parameter Object</returns>
        </member>
        <member name="M:TSI.DataAccess.DBMySQLProvider.PrepareValueForSQL(System.DateTime)">
            <summary>
            Prepares the DateTime value for a SQL string
            </summary>
            <param name="dtValue">DateTime Value</param>
            <returns>Prepared Value</returns>
        </member>
        <member name="M:TSI.DataAccess.DBMySQLProvider.PrepareSQLForRowLimit(System.String,System.Int32)">
            <summary>
            Modifies the SQL to restrict the number of records to the
            number specified by the Row Limit.
            </summary>
            <param name="szSQL">SQL to Prepare</param>
            <param name="iRowLimit">Row Limit</param>
            <returns>Modified SQL</returns>
        </member>
        <member name="M:TSI.DataAccess.DBMySQLProvider.IsEmptyStringNull">
            <summary>
            Indicates if the current repository treats
            empty strings as NULL.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:TSI.DataAccess.DBMySQLProvider.ExecuteIdentityInsert(System.String,System.String,System.Collections.IList,System.Data.IDbTransaction)">
            <summary>
            Executes the specified insert statement returning the value used for
            the identity column.  This should only be invoked when the insert
            being executed uses an identity column.  NOTE: It must
            not be possible that the value returned is not actually the value used 
            even if this insert is not executed within a transaction.
            </summary>
            <param name="szSQL">The Insert SQL to execute</param>
            <param name="szIdentityGeneratorName">The name of the database generator / 
              sequence to be SELECTed from in order to get the value used for 
              the identity column.</param>
            <param name="oParameters">IList of DBParameter objects</param>
            <param name="oTransIn">Transaction to Use</param>
            <returns>Single Value</returns>
        </member>
        <member name="M:TSI.DataAccess.DBMySQLProvider.EscapeString(System.String)">
            <summary>
            Escapes the specified string for use with the
            RDMS.
            </summary>
            <param name="szValue"></param>
            <returns></returns>
        </member>
        <member name="T:TSI.DataAccess.DBODBCProvider">
            <summary>
            Provides data access via ODBC. 
            </summary>
        </member>
        <member name="M:TSI.DataAccess.DBODBCProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:TSI.DataAccess.DBODBCProvider.#ctor(TSI.Utils.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="oLogger">Application Logger</param>
        </member>
        <member name="M:TSI.DataAccess.DBODBCProvider.#ctor(System.Data.Odbc.OdbcConnection)">
            <summary>
            Constructor
            </summary>
            <param name="oDBConn">Connection to Use</param>
        </member>
        <member name="M:TSI.DataAccess.DBODBCProvider.#ctor(System.Data.Odbc.OdbcConnection,TSI.Utils.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="oDBConn">Connection to Use</param>
            <param name="oLogger">Application Logger</param>
        </member>
        <member name="M:TSI.DataAccess.DBODBCProvider.SetDbConnection(System.Data.IDbConnection)">
            <summary>
            Sets the connection for the current instance.
            </summary>
            <param name="oConn">DB Connection</param>
        </member>
        <member name="M:TSI.DataAccess.DBODBCProvider.OpenDB">
            <summary>
            Opens a database connection as specified
            by the DBConnectionString in the configuration
            settings.
            </summary>
            <returns>IDbConnection</returns>
        </member>
        <member name="M:TSI.DataAccess.DBODBCProvider.GetDataAdapter(System.String,System.Data.IDbConnection)">
            <summary>
            Returns a provider specific Data Adapter.
            </summary>
            <param name="szSQL">The SQL to execute</param>
            <param name="oDBConn">The connection to use</param>
            <returns>Resulting data adapater</returns>
        </member>
        <member name="M:TSI.DataAccess.DBODBCProvider.PrepareParmName(System.String)">
            <summary>
            Returns the parameter name for use in a SQL
            parameter.
            </summary>
            <param name="szParmName">Parameter Name</param>
            <returns>Modified Parameter Name</returns>
        </member>
        <member name="M:TSI.DataAccess.DBODBCProvider.CreateParameter(TSI.DataAccess.DBParameter)">
            <summary>
            Creates an ODBC Parameter using the specified object.
            </summary>
            <param name="szName">Parameter Name</param>
            <param name="oValue">Parameter Value</param>
            <returns>OdbcParameter</returns>
        </member>
        <member name="T:TSI.DataAccess.DBOleDbProvider">
            <summary>
            Provides data access via OLE DB. 
            </summary>
        </member>
        <member name="M:TSI.DataAccess.DBOleDbProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:TSI.DataAccess.DBOleDbProvider.#ctor(TSI.Utils.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="oLogger">Application Logger</param>
        </member>
        <member name="M:TSI.DataAccess.DBOleDbProvider.#ctor(System.Data.IDbConnection)">
            <summary>
            Constructor
            </summary>
            <param name="oDBConn">Connection to Use</param>
        </member>
        <member name="M:TSI.DataAccess.DBOleDbProvider.#ctor(System.Data.OleDb.OleDbConnection,TSI.Utils.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="oDBConn">Connection to Use</param>
            <param name="oLogger">Application Logger</param>
        </member>
        <member name="M:TSI.DataAccess.DBOleDbProvider.SetDbConnection(System.Data.IDbConnection)">
            <summary>
            Sets the connection for the current instance.
            </summary>
            <param name="oConn">DB Connection</param>
        </member>
        <member name="M:TSI.DataAccess.DBOleDbProvider.OpenDB">
            <summary>
            Opens a database connection as specified
            by the DBConnectionString in the configuration
            settings.
            </summary>
            <returns>IDbConnection</returns>
        </member>
        <member name="M:TSI.DataAccess.DBOleDbProvider.GetDataAdapter(System.String,System.Data.IDbConnection)">
            <summary>
            Returns a provider specific Data Adapter.
            </summary>
            <param name="szSQL"></param>
            <param name="oDBConn"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.DataAccess.DBOleDbProvider.PrepareParmName(System.String)">
            <summary>
            Returns the parameter name for use in a SQL
            parameter.
            </summary>
            <param name="szParmName"></param>
            <returns>Modified Parameter Name</returns>
        </member>
        <member name="M:TSI.DataAccess.DBOleDbProvider.CreateParameter(TSI.DataAccess.DBParameter)">
            <summary>
            Creates a parameter object from the specified name
            and value.
            </summary>
            <param name="oDBParm">Parm</param>
            <returns>Parameter Object</returns>
        </member>
        <member name="M:TSI.DataAccess.DBOleDbProvider.PrepareValueForSQL(System.DateTime)">
            <summary>
            Prepares the DateTime value for a SQL string
            </summary>
            <param name="dtValue">DateTime Value</param>
            <returns>Prepared Value</returns>
        </member>
        <member name="M:TSI.DataAccess.DBOleDbProvider.PrepareValueForSQL(System.Boolean)">
            <summary>
            Prepares the Boolean value for a SQL string.
            </summary>
            <param name="bValue">Boolean Value</param>
            <returns>Prepared Value</returns>
        </member>
        <member name="M:TSI.DataAccess.DBOleDbProvider.PrepareSQLForRowLimit(System.String,System.Int32)">
            <summary>
            Modifies the SQL to restrict the number of records to the
            number specified by the Row Limit.
            </summary>
            <param name="szSQL">SQL to Prepare</param>
            <param name="iRowLimit">Row Limit</param>
            <returns>Modified Sql</returns>
        </member>
        <member name="M:TSI.DataAccess.DBOleDbProvider.GetSelectIdentityStatement(System.String)">
            <summary>
            Returns the SQL Statement to append to an Insert
            to retrieve a generated value (i.e. Identity, autonumber, etc.)
            </summary>
            <returns></returns>
        </member>
        <member name="T:TSI.DataAccess.DBParameter">
            <summary>
            Container for Name / Parameter pairs.
            </summary>
        </member>
        <member name="F:TSI.DataAccess.DBParameter._szName">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.DataAccess.DBParameter._oValue">
            <summary>Attribute backers</summary>
        </member>
        <member name="M:TSI.DataAccess.DBParameter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:TSI.DataAccess.DBParameter.#ctor(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            Constructor
            </summary>
            <param name="szName">Parameter Name</param>
            <param name="oValue">Parameter Value</param>
            <param name="oParameterDirection"></param>
        </member>
        <member name="M:TSI.DataAccess.DBParameter.#ctor(System.String,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="szName">Parameter Name</param>
            <param name="oValue">Parameter Value</param>
        </member>
        <member name="M:TSI.DataAccess.DBParameter.#ctor(System.String,System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="szName">Parameter Name</param>
            <param name="dtValue">Parameter Value</param>
        </member>
        <member name="P:TSI.DataAccess.DBParameter.Name">
            <summary>
            Name property
            </summary>
        </member>
        <member name="P:TSI.DataAccess.DBParameter.Value">
            <summary>
            Value property
            </summary>
        </member>
        <member name="P:TSI.DataAccess.DBParameter.ParmDirection">
            <summary>
            ParameterDirection property
            </summary>
        </member>
        <member name="T:TSI.DataAccess.DBSQLServerProvider">
            <summary>
            Provides data access to MS SQLServer.  Designed specifically
            for two-tier applications where each operation is autonomous.
            </summary>
        </member>
        <member name="F:TSI.DataAccess.DBSQLServerProvider.ESCAPE_TERM">
            <summary>Format used to escape identifier names</summary>
        </member>
        <member name="M:TSI.DataAccess.DBSQLServerProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:TSI.DataAccess.DBSQLServerProvider.#ctor(TSI.Utils.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="oLogger">Application Logger</param>
        </member>
        <member name="M:TSI.DataAccess.DBSQLServerProvider.#ctor(System.Data.IDbConnection)">
            <summary>
            Constructor
            </summary>
            <param name="oDBConn">Connection to Use</param>
        </member>
        <member name="M:TSI.DataAccess.DBSQLServerProvider.#ctor(System.Data.IDbConnection,TSI.Utils.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="oDBConn">Connection to Use</param>
            <param name="oLogger">Application Logger</param>
        </member>
        <member name="M:TSI.DataAccess.DBSQLServerProvider.SetDbConnection(System.Data.IDbConnection)">
            <summary>
            Sets the connection for the current instance.
            </summary>
            <param name="oConn">DB Connection</param>
        </member>
        <member name="M:TSI.DataAccess.DBSQLServerProvider.OpenDB">
            <summary>
            Opens a database connection as specified
            by the DBConnectionString in the configuration
            settings.
            </summary>
            <returns>IDbConnection</returns>
        </member>
        <member name="M:TSI.DataAccess.DBSQLServerProvider.GetDataAdapter(System.String,System.Data.IDbConnection)">
            <summary>
            Returns a provider specific Data Adapter.
            </summary>
            <param name="szSQL"></param>
            <param name="oDBConn"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.DataAccess.DBSQLServerProvider.GetDataAdapter(System.String,System.Data.IDbConnection,System.Collections.IList)">
            <summary>
            Returns a provider specific Data Adapter.
            </summary>
            <param name="szSQL"></param>
            <param name="oDBConn"></param>
            <param name="oParameters"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.DataAccess.DBSQLServerProvider.PrepareParmName(System.String)">
            <summary>
            Returns the parameter name for use in a SQL
            parameter.
            </summary>
            <param name="szParmName"></param>
            <returns>Modified Parameter Name</returns>
        </member>
        <member name="M:TSI.DataAccess.DBSQLServerProvider.CreateParameter(TSI.DataAccess.DBParameter)">
            <summary>
            Creates a parameter object from the specified name
            and value.
            </summary>
            <param name="oDBParm">Parm Name</param>
            <returns>Parameter Object</returns>
        </member>
        <member name="M:TSI.DataAccess.DBSQLServerProvider.PrepareValueForSQL(System.DateTime)">
            <summary>
            Prepares the DateTime value for a SQL string
            </summary>
            <param name="dtValue">DateTime Value</param>
            <returns>Prepared Value</returns>
        </member>
        <member name="M:TSI.DataAccess.DBSQLServerProvider.PrepareValueForSQL(System.Boolean)">
            <summary>
            Prepares the Boolean value for a SQL string.
            </summary>
            <param name="bValue">Boolean Value</param>
            <returns>Prepared Value</returns>
        </member>
        <member name="M:TSI.DataAccess.DBSQLServerProvider.PrepareSQLForRowLimit(System.String,System.Int32)">
            <summary>
            Modifies the SQL to restrict the number of records to the
            number specified by the Row Limit.
            </summary>
            <param name="szSQL">SQL to Prepare</param>
            <param name="iRowLimit">Row Limit</param>
            <returns>Modified Sql</returns>
        </member>
        <member name="M:TSI.DataAccess.DBSQLServerProvider.IsEmptyStringNull">
            <summary>
            Indicates if the current repository treats
            empty strings as NULL.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:TSI.DataAccess.DBSQLServerProvider.TranslateWildCards(System.String)">
            <summary>
            Translates user wildcard characters (*) into the wildcard
            characters supported by the DB access provider.
            </summary>
            <param name="szValue"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.DataAccess.DBSQLServerProvider.GetSelectIdentityStatement(System.String)">
            <summary>
            Returns the SQL Statement to append to an Insert
            to retrieve a generated value (i.e. Identity, autonumber, etc.)
            </summary>
            <returns></returns>
        </member>
        <member name="M:TSI.DataAccess.DBSQLServerProvider.EscapeString(System.String)">
            <summary>
            Escapes the specified string for use with the
            RDMS.
            </summary>
            <param name="szValue"></param>
            <returns></returns>
        </member>
        <member name="T:TSI.DataAccess.IDBAccess">
            <summary>
            Provides a generic interface for data access.
            </summary>
        </member>
        <member name="P:TSI.DataAccess.IDBAccess.Logger">
            <summary>
            Application Logger
            </summary>
        </member>
        <member name="P:TSI.DataAccess.IDBAccess.ConnectionString">
            <summary>
            DB Connection string.  
            </summary>
        </member>
        <member name="P:TSI.DataAccess.IDBAccess.ConnectionName">
            <summary>
            DB Connection Name.  
            </summary>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.Open">
            <summary>
            Opens the database specified in the CONN_STRING member.
            </summary>
            <returns>IDbConnection</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.SetDbConnection(System.Data.IDbConnection)">
            <summary>
            Sets the connection for the current instance.
            </summary>
            <param name="oConn">DB Connection</param>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.Close(System.Data.IDbConnection)">
            <summary>
            Closes the specified database connection.
            </summary>
            <param name="DBConn">The connection to close.</param>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.Close(System.Data.IDataReader)">
            <summary>
            Closes the specified datareader.
            </summary>
            <param name="oReader">The reader to close.</param>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.Close">
            <summary>
            Closes the previously opened database.
            </summary>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.ExecuteSelect(System.String)">
            <summary>
            Executes the specified select statement.
            </summary>
            <param name="szSQL">The Select SQL to execute</param>
            <returns>DataSet of results</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.ExecuteNonQuery(System.String)">
            <summary>
            Executes the specified select statement.
            </summary>
            <param name="szSQL">The Select SQL to execute</param>
            <returns>Count of affected records</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.ExecuteNonQuery(System.String,System.Collections.IList)">
            <summary>
            Executes the specified select statement.
            </summary>
            <param name="szSQL">The Select SQL to execute</param>
            <param name="oParameters">IList of DBParameter objects</param>
            <returns>Count of affected records</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.ExecuteNonQuery(System.String,System.Collections.IList,System.Data.IDbTransaction)">
            <summary>
            Executes the specified select statement.
            </summary>
            <param name="szSQL">The Select SQL to execute</param>
            <param name="oParameters">IList of DBParameter objects</param>
            <param name="oTrans">Transaction to Use</param>
            <returns>Count of affected records</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.ExecuteNonQuery(System.String,System.Collections.IList,System.Data.IDbTransaction,System.Data.CommandType)">
            <summary>
            Executes the specified select statement.
            </summary>
            <param name="szSQL">The Select SQL to execute</param>
            <param name="oParameters">IList of DBParameter objects</param>
            <param name="oTrans">Transaction to Use</param>
            <param name="oCommandType">Type of Command to Execute</param>
            <returns>Count of affected records</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.ExecuteScalar(System.String)">
            <summary>
            Executes the specified select statement.
            </summary>
            <param name="szSQL">The Select SQL to execute</param>
            <returns>Single Value</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.ExecuteScalar(System.String,System.Collections.IList)">
            <summary>
            Executes the specified select statement.
            </summary>
            <param name="szSQL">The Select SQL to execute</param>
            <param name="oParameters">IList of DBParameter objects</param>
            <returns>Single Value</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.ExecuteScalar(System.String,System.Collections.IList,System.Data.IDbTransaction)">
            <summary>
            Executes the specified select statement.
            </summary>
            <param name="szSQL">The Select SQL to execute</param>
            <param name="oParameters">IList of DBParameter objects</param>
            <param name="oTrans">Transaction to Use</param>
            <returns>Single Value</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.ExecuteScalar(System.String,System.Collections.IList,System.Data.IDbTransaction,System.Data.CommandType)">
            <summary>
            Executes the specified select statement.
            </summary>
            <param name="szSQL">The Select SQL to execute</param>
            <param name="oParameters">IList of DBParameter objects</param>
            <param name="oTrans">Transaction to Use</param>
            <param name="oCommandType">Type of Command to Execute</param>
            <returns>Single Value</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.ExecuteReader(System.String)">
            <summary>
            Executes the specified select statement.
            </summary>
            <param name="szSQL">The Select SQL to execute</param>
            <returns>DataReader of results</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.ExecuteReader(System.String,System.Data.CommandBehavior)">
            <summary>
            Executes the specified select statement.
            </summary>
            <param name="szSQL">The Select SQL to execute</param>
            <param name="cmdBehavior">The behavior for the reader</param>
            <returns>DataReader of results</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.ExecuteReader(System.String,System.Collections.IList,System.Data.CommandBehavior,System.Data.IDbTransaction)">
            <summary>
            Executes the specified select statement.
            </summary>
            <param name="szSQL">The Select SQL to execute</param>
            <param name="oParameters">IList of DBParameter objects</param>
            <param name="cmdBehavior">The behavior for the reader</param>
            <param name="oTran">Transaction to Use</param>
            <returns>DataReader of results</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.ExecuteReader(System.String,System.Collections.IList)">
            <summary>
            Executes the specified select statement.
            </summary>
            <param name="szSQL"></param>
            <param name="oParameters"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.ExecuteReader(System.String,System.Collections.IList,System.Data.CommandBehavior,System.Data.IDbTransaction,System.Data.CommandType)">
            <summary>
            Executes the specified select statement.
            </summary>
            <param name="szSQL">The Select SQL to execute</param>
            <param name="oParameters">IList of DBParameter objects</param>
            <param name="cmdBehavior">The behavior for the reader</param>
            <param name="oTran">Transaction to Use</param>
            <param name="oCommandType">Type of Command to Execute</param>
            <returns>DataReader of results</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.PrepareForInsert(System.String)">
            <summary>
            Prepares the string value to be part of a SQL
            string. Should be overriden by specific data 
            access providers as needed.
            </summary>
            <param name="szValue">The value to prepare</param>
            <returns>The prepared string.</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.BuildSQLColumnClause(System.Collections.IDictionary)">
            <summary>
            Creates a comma delimited list of column names from the
            keys of the specified Dictionary that is enclosed in
            parenthesis.
            </summary>
            <param name="htValues">Dictionary of Column/Values</param>
            <returns>The "Column Clause" string.</returns>	
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.BuildSQLColumnClause(System.Collections.IDictionary,System.Boolean)">
            <summary>
            Creates a comma delimited list of column names from the
            keys of the specified Dictionary.
            </summary>
            <param name="htValues">Dictionary of Column/Values</param>
            <param name="bEncloseWithParens">Indicates if to enclose string in parenthesis</param>
            <returns>The "Column Clause" string.</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.BuildSQLValuesClause(System.Collections.IDictionary,System.Boolean,System.Boolean)">
            <summary>
            Creates a comma delimited list of string values from the
            values of the specified Dictionary.
            </summary>
            <param name="htValues">Dictionary of Column/Values</param>
            <param name="bEncloseWithParens">Indicates if to enclose string in parenthesis</param>
            <param name="bUsesSQLParameters">Indicates if parameters are being used</param>
            <returns>The "Values Clause" string.</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.BuildSQLInsertStatement(System.Collections.IDictionary,System.String,System.Boolean)">
            <summary>
            Creates a SQL insert statement from the keys/values of 
            the specified Dictionary.
            </summary>
            <param name="htValues">Dictionary of Column/Values</param>
            <param name="szTableName">The table to insert the data into</param>
            <param name="bUsesSQLParameters">Indicates if parameters are being used</param>
            <returns>The Insert statement.</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.BuildSQLUpdateStatement(System.Collections.IDictionary,System.String,System.Boolean)">
            <summary>
            Creates a SQL update statment for the column=value portion of a
            update statement statement from the keys/values of 
            the specified Dictionary.
            </summary>
            <param name="htValues">Dictionary of Column/Values</param>
            <param name="szTableName">The table to update.</param>
            <param name="bUsesSQLParameters">Indicates parameters should be used.</param>
            <returns>The update statement.</returns>	
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.BuildUpdateValuesClause(System.Collections.IDictionary,System.Boolean)">
            <summary>
            Creates a SQL clause for the column=value portion of a
            update statement statement from the keys/values of 
            the specified Dictionary.
            </summary>
            <param name="htValues">Dictionary of Column/Values</param>
            <param name="bUsesSQLParameters">Indicates parameters should be used.</param>
            <returns>The update clause statement.</returns>	
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.GetString(System.Data.IDataReader,System.String)">
            <summary>
            Retreives the specified string value from the reader
            by ordinal.  If null, returns an empty string.
            </summary>
            <param name="oReader">Reader</param>
            <param name="szColName">Column Name</param>
            <returns>String</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.GetString(System.Data.IDataReader,System.String,System.String)">
            <summary>
            Retreives the specified string value from the reader
            by ordinal.  If null, returns the default value.
            </summary>
            <param name="oReader">Reader</param>
            <param name="szColName">Column Name</param>
            <param name="szDefaultValue">Default Value if NULL</param>
            <returns>String</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.GetString(System.Data.IDataReader,System.Int32)">
            <summary>
            Retreives the specified string value from the reader
            by the ordinal. 
            </summary>
            <param name="oReader">Reader</param>
            <param name="iColOrdinal">Column Ordinal</param>
            <returns>String</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.GetString(System.Data.IDataReader,System.Int32,System.String)">
            <summary>
            Retreives the specified string value from the reader
            by the ordinal.  If null, returns the default value.
            </summary>
            <param name="oReader">Reader</param>
            <param name="iColOrdinal">Column Ordinal</param>
            <param name="szDefaultValue">Default Value if NULL</param>
            <returns>String</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.GetInt16(System.Data.IDataReader,System.String)">
            <summary>
            Retreives the specified Int16 value from the reader
            by column name.  
            </summary>
            <param name="oReader">Reader</param>
            <param name="szColName">Column Name</param>
            <returns>Int16</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.GetInt32(System.Data.IDataReader,System.String)">
            <summary>
            Retreives the specified Int32 value from the reader
            by column name.  
            </summary>
            <param name="oReader">Reader</param>
            <param name="szColName">Column Name</param>
            <returns>Int32</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.GetInt64(System.Data.IDataReader,System.String)">
            <summary>
            Retreives the specified Int64 value from the reader
            by column name.  
            </summary>
            <param name="oReader">Reader</param>
            <param name="szColName">Column Name</param>
            <returns>Int64</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.GetDecimal(System.Data.IDataReader,System.String)">
            <summary>
            Retreives the specified Decimal value from the reader
            by column name.  
            </summary>
            <param name="oReader">Reader</param>
            <param name="szColName">Column Name</param>
            <returns>Decimal</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.GetDateTime(System.Data.IDataReader,System.String)">
            <summary>
            Retreives the specified DateTime value from the reader
            by column name.  
            </summary>
            <param name="oReader">Reader</param>
            <param name="szColName">Column Name</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.GetBoolean(System.Data.IDataReader,System.String)">
            <summary>
            Retreives the specified bool value from the reader
            by column name.  
            </summary>
            <param name="oReader">Reader</param>
            <param name="szColName">Column Name</param>
            <returns>bool</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.PrepareValueForSQL(System.String)">
            <summary>
            Prepares the string value for a SQL string
            </summary>
            <param name="szValue">String Value</param>
            <returns>Prepared Value</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.PrepareValueForSQL(System.String,System.Boolean)">
            <summary>
            Prepares the string value for a SQL string translating
            using wildcard characters (usually "*") with Repository specific
            wildcard characters (usually "%")
            </summary>
            <param name="szValue">String Value</param>
            <param name="bTranslateWildCard"></param>
            <returns>Prepared Value</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.PrepareValueForSQL(System.DateTime)">
            <summary>
            Prepares the DateTime value for a SQL string
            </summary>
            <param name="dtValue">DateTime Value</param>
            <returns>Prepared Value</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.PrepareValueForSQL(System.Boolean)">
            <summary>
            Prepares the Boolean value for a SQL string
            </summary>
            <param name="bValue">Boolean Value</param>
            <returns>Prepared Value</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.PrepareValueForSQL(System.Object)">
            <summary>
            Prepares the Object value for a SQL string
            </summary>
            <param name="oValue">Object Value</param>
            <returns>Prepared Value</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.PrepareSQLForRowLimit(System.String,System.Int32)">
            <summary>
            Modifies the SQL to restrict the number of records to the
            number specified by the Row Limit.
            </summary>
            <param name="szSQL">SQL to Prepare</param>
            <param name="iRowLimit">Row Limit</param>
            <returns>Modified Sql</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.PrepareParmName(System.String)">
            <summary>
            Returns the parameter name for use in a SQL
            parameter.
            </summary>
            <param name="szParmName"></param>
            <returns>Modified Parameter Name</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.TranslateWildCards(System.String)">
            <summary>
            Translates "*" into the appropriate wildcard character
            for the current repository and escapes any other wildcard
            characters.
            </summary>
            <param name="szValue">Value</param>
            <returns>String</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.IsEmptyStringNull">
            <summary>
            Indicates if the current repository treats
            empty strings as NULL.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.LogDBConnState">
            <summary>
            Logs the state of the DB Connection to
            the trace file.
            </summary>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.IsCaseSensitiveMetaData">
            <summary>
            Indicates if the current repository treats metadata (column names,
            table names, etc.) as case-sensitive.  If the following 2 SQLs 
            are not the same, then this should return true, otherwise it
            should return false:
                SELECT some_col FROM some_table
                SELECT SOME_COL FROM SOME_TABLE
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.ExecuteIdentityInsert(System.String,System.String,System.Collections.IList,System.Data.IDbTransaction)">
            <summary>
            Executes the specified insert statement returning the value used for
            the identity column.  This should only be invoked when the insert
            being executed uses an identity column.  The default implementation
            in here ignores the passed szIdentitySelectorName and uses the
            "SCOPE_IDENTITY()" procedure to get the identity used.  NOTE: It must
            not be possible that the value returned is not actually the value used 
            even if this insert is not executed within a transaction.
            </summary>
            <param name="szSQL">The Insert SQL to execute</param>
            <param name="szIdentityGeneratorName">The name of the database generator / 
              sequence to be SELECTed from in order to get the value used for 
              the identity column.</param>
            <param name="oParameters">Collection of DBParameter objects</param>
            <param name="oTrans">Transaction to Use</param>
            <returns>Single Value</returns>
        </member>
        <member name="M:TSI.DataAccess.IDBAccess.EscapeString(System.String)">
            <summary>
            Escapes the specified string for use with the
            RDMS.
            </summary>
            <param name="szValue"></param>
            <returns></returns>
        </member>
        <member name="T:TSI.Utils.EmailLogger">
            <summary>
            Queues log messages and e-mails them to the specified
            e-mail address based on user-defined triggers.
            </summary>
        </member>
        <member name="M:TSI.Utils.EmailLogger.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:TSI.Utils.EmailLogger.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="szFileName">The file name to use.</param>
        </member>
        <member name="P:TSI.Utils.EmailLogger.FileName">
            <summary>
            The ID of the current user.
            </summary>
        </member>
        <member name="P:TSI.Utils.EmailLogger.UserID">
            <summary>
            The ID of the current user.
            </summary>
        </member>
        <member name="P:TSI.Utils.EmailLogger.RequestName">
            <summary>
            The name of the current request
            </summary>
        </member>
        <member name="P:TSI.Utils.EmailLogger.TraceLevel">
            <summary>
            The current debug level of the application.  Determines
            is specified messages should be logged or not.
            </summary>
        </member>
        <member name="M:TSI.Utils.EmailLogger.DetermineIfShouldEmail(System.Boolean)">
            <summary>
            Determines if the error should generate an email
            based on the configuration file setting EMailError
            </summary>
            <param name="IsError"></param>
        </member>
        <member name="M:TSI.Utils.EmailLogger.SendLogFile">
            <summary>
            Generates an email with the log file as
            an attachment.
            </summary>
        </member>
        <member name="M:TSI.Utils.EmailLogger.LogMessage(System.String,System.Int32)">
            <summary>
            Writes the specified message at the specified
            debug level.
            </summary>
            <param name="szMessage">The message to log.</param>
            <param name="iTraceLevel">The trace level of the message.</param>
        </member>
        <member name="M:TSI.Utils.EmailLogger.LogMessage(System.String)">
            <summary>
            Writes the specified message at the default
            trace level.
            </summary>
            <param name="szMessage">The message to log.</param>
        </member>
        <member name="M:TSI.Utils.EmailLogger.LogError(System.Exception)">
            <summary>
            Logs the specified exception.
            </summary>
            <param name="e">The Exception to log.</param>
        </member>
        <member name="M:TSI.Utils.EmailLogger.LogError(System.String,System.Exception)">
            <summary>
            Logs the specified exception.
            </summary>
            <param name="szMessage">The Message to log.</param>
            <param name="e">The Exception to log.</param>
        </member>
        <member name="T:TSI.Utils.IMappingProvider">
            <summary>
            This interface defines the methods which have to be provided by classes which provide a database mapping.
            </summary>
        </member>
        <member name="M:TSI.Utils.ORMapper.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets the appropriate WHERE portion of a SQL statement for 
            the specified LINQ query.
            </summary>
            <typeparam name="T">The type on which the query should be built against.</typeparam>
            <param name="e">The LINQ expression.</param>
            <returns>A string which contains the WHERE statement with the specified conditions.</returns>
        </member>
        <member name="M:TSI.Utils.ORMapper.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.IList)">
            <summary>
            Gets the appropriate WHERE portion of a SQL statement for 
            the specified LINQ query.
            </summary>
            <typeparam name="T">The type on which the query should be built against.</typeparam>
            <param name="e">The LINQ expression.</param>
            <returns>A string which contains the WHERE statement with the specified conditions.</returns>
        </member>
        <member name="M:TSI.Utils.ORMapper.Where(System.Linq.Expressions.Expression,System.Collections.IList)">
            <summary>
            Gets the appropriate WHERE portion of a SQL statement for 
            the specified LINQ query.
            </summary>
            <typeparam name="T">The type on which the query should be built against.</typeparam>
            <param name="e">The LINQ expression.</param>
            <returns>A string which contains the WHERE statement with the specified conditions.</returns>
        </member>
        <member name="M:TSI.Utils.ORMapper.Select``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets the appropriate SQL select statement for the specified LINQ query.
            </summary>
            <typeparam name="T">The type on which the query should run.</typeparam>
            <param name="e">The LINQ expression.</param>
            <returns>A string which contains the select statement with the specified conditions.</returns>
        </member>
        <member name="M:TSI.Utils.ORMapper.Select``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.IList)">
            <summary>
            Gets the appropriate SQL select statement for the specified LINQ query.
            </summary>
            <typeparam name="T">The type on which the query should run.</typeparam>
            <param name="e">The LINQ expression.</param>
            <returns>A string which contains the select statement with the specified conditions.</returns>
        </member>
        <member name="M:TSI.Utils.ORMapper.Select(System.Linq.Expressions.Expression,System.Collections.IList)">
            <summary>
            Gets the appropriate SQL select statement for the specified LINQ query.
            </summary>
            <typeparam name="T">The type on which the query should run.</typeparam>
            <param name="e">The LINQ expression.</param>
            <returns>A string which contains the select statement with the specified conditions.</returns>
        </member>
        <member name="M:TSI.Utils.ORMapper.OrderBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets the appropriate SQL select statement for an order-by clause.
            </summary>
            <typeparam name="T">The type on which the query should run.</typeparam>
            <param name="e">The LINQ expression.</param>
            <returns>A string which contains the order-by clause for the specified expression.</returns>
        </member>
        <member name="M:TSI.Utils.ORMapper.OrderBy(System.Linq.Expressions.Expression)">
            <summary>
            Gets the appropriate SQL select statement for an order-by clause.
            </summary>
            <typeparam name="T">The type on which the query should run.</typeparam>
            <param name="e">The LINQ expression.</param>
            <returns>A string which contains the order-by clause for the specified expression.</returns>
        </member>
        <member name="M:TSI.Utils.ORMapper.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets the appropriate SQL delete statement for the specified LINQ query.
            </summary>
            <typeparam name="T">The type on which the query should run.</typeparam>
            <param name="e">The e.</param>
            <returns>A string which contains the delete statemnt with the spedified conditions.</returns>
        </member>
        <member name="M:TSI.Utils.ORMapper.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.IList)">
            <summary>
            Gets the appropriate SQL delete statement for the specified LINQ query.
            </summary>
            <typeparam name="T">The type on which the query should run.</typeparam>
            <param name="e">The e.</param>
            <returns>A string which contains the delete statemnt with the spedified conditions.</returns>
        </member>
        <member name="M:TSI.Utils.ORMapper.Delete(System.Linq.Expressions.Expression,System.Collections.IList)">
            <summary>
            Gets the appropriate SQL delete statement for the specified LINQ query.
            </summary>
            <typeparam name="T">The type on which the query should run.</typeparam>
            <param name="e">The e.</param>
            <returns>A string which contains the delete statemnt with the spedified conditions.</returns>
        </member>
        <member name="M:TSI.Utils.ORMapper.VisitExpression(System.Linq.Expressions.Expression,System.Text.StringBuilder,System.Boolean,System.Collections.IList)">
            <summary>
            This method is the dispatcher for the different expression types.
            NOTE: not all expression types are considered.
            </summary>
            <param name="expression">The expression.</param>
            <param name="sql">The SQL string builder.</param>
            <param name="isOnRightSide">Tells if the expression is on the right hand side. Necessary for some expression evaluations.</param>
        </member>
        <member name="M:TSI.Utils.ORMapper.GetOperandFromExpression(System.Linq.Expressions.Expression)">
            <summary>
            This method is the dispatcher for the operands.
            NOTE: not all operands are implemented!
            </summary>
            <param name="expression">The expression to dispatch.</param>
            <returns>The appropriate SQL operand.</returns>
        </member>
        <member name="M:TSI.Utils.ORMapper.VisitOrderByExpression(System.Linq.Expressions.Expression,System.Text.StringBuilder,System.Boolean)">
            <summary>
            This method is the dispatcher for the different expression types.
            NOTE: not all expression types are considered.
            </summary>
            <param name="expression">The expression.</param>
            <param name="sql">The SQL string builder.</param>
            <param name="isOnRightSide">Tells if the expression is on the right hand side. Necessary for some expression evaluations.</param>
        </member>
        <member name="M:TSI.Utils.ORMapper.GetOrderByOperandFromExpression(System.Linq.Expressions.BinaryExpression)">
            <summary>
            This method is the dispatcher for the operands.
            NOTE: not all operands are implemented!
            </summary>
            <param name="expression">The expression to dispatch.</param>
            <returns>The appropriate SQL operand.</returns>
        </member>
        <member name="M:TSI.Utils.ORMapperExtensions.ASC(System.Object)">
            <summary>
            Used to build Expression-based ORDER BY clauses.
            </summary>
            <param name="oTargetMember"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.Utils.ORMapperExtensions.DESC(System.Object)">
            <summary>
            Used to build Expression-based ORDER BY clauses.
            </summary>
            <param name="oTargetMember"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.Utils.ORMapperExtensions.LIKE(System.Object,System.String)">
            <summary>
            Allows for a SQL LIKE clause in Expression-based criteria (NOTE: 
            it is recommended that the String methods Contains, StartsWith, 
            and/or EndsWith be used instead of this).
            </summary>
            <param name="oTargetMember"></param>
            <param name="likeString"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.Utils.ORMapperExtensions.IN``1(System.Object,TSI.Utils.ORMapper,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Used to build Expression-based IN clauses with a sub-select.
            </summary>
            <param name="oTargetMember"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.Utils.ORMapperExtensions.IN``1(System.Object,TSI.BusinessObjects.BusinessObjectMgr,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Used to build Expression-based IN clauses with a sub-select.
            </summary>
            <param name="oTargetMember"></param>
            <returns></returns>
        </member>
        <member name="T:TSI.Utils.ILogger">
            <summary>
            Defines a common logger interface.
            </summary>
        </member>
        <member name="P:TSI.Utils.ILogger.TRACE_LEVEL_ALL">
            <summary>
            Trace level for controlling output
            </summary>
        </member>
        <member name="P:TSI.Utils.ILogger.TRACE_LEVEL_SQL">
            <summary>
            Trace level for controlling output
            </summary>
        </member>
        <member name="P:TSI.Utils.ILogger.TRACE_LEVEL_NAV">
            <summary>
            Trace level for controlling output
            </summary>
        </member>
        <member name="P:TSI.Utils.ILogger.TRACE_LEVEL_PARMS">
            <summary>
            Trace level for controlling output
            </summary>
        </member>
        <member name="P:TSI.Utils.ILogger.TRACE_LEVEL_ARCH">
            <summary>
            Trace level for controlling output
            </summary>
        </member>
        <member name="P:TSI.Utils.ILogger.TRACE_LEVEL_GENERAL">
            <summary>
            Trace level for controlling output
            </summary>
        </member>
        <member name="P:TSI.Utils.ILogger.TRACE_LEVEL_ERROR">
            <summary>
            Trace level for controlling output
            </summary>
        </member>
        <member name="P:TSI.Utils.ILogger.TRACE_LEVEL_BUSINESS_OBJECT">
            <summary>
            Trace level for controlling output
            </summary>
        </member>
        <member name="P:TSI.Utils.ILogger.DEFAULT_REQUEST_NAME">
            <summary>
            Trace level for controlling output
            </summary>
        </member>
        <member name="P:TSI.Utils.ILogger.FileName">
            <summary>
            The filename to write to.
            </summary>
        </member>
        <member name="P:TSI.Utils.ILogger.UserID">
            <summary>
            The ID of the current user.
            </summary>
        </member>
        <member name="P:TSI.Utils.ILogger.RequestName">
            <summary>
            The name of the current request
            </summary>
        </member>
        <member name="P:TSI.Utils.ILogger.TraceLevel">
            <summary>
            The current debug level of the application.  Determines
            is specified messages should be logged or not.
            </summary>
        </member>
        <member name="P:TSI.Utils.ILogger.EmailError">
            <summary>
            Determines if errors should be emailed to the configured
            address <code>EMailSupportAddress</code> in addition to being written to the log.
            </summary>
        </member>
        <member name="P:TSI.Utils.ILogger.IsEnabled">
            <summary>
            Determines if loging is enabled
            </summary>
        </member>
        <member name="M:TSI.Utils.ILogger.LogMessage(System.String,System.Int32)">
            <summary>
            Writes the specified message at the specified
            debug level.
            </summary>
            <param name="szMessage">The message to log.</param>
            <param name="iTraceLevel">The trace level of the message.</param>
        </member>
        <member name="M:TSI.Utils.ILogger.LogMessage(System.String)">
            <summary>
            Writes the specified message at the default
            debug level.
            </summary>
            <param name="szMessage">The message to log.</param>
        </member>
        <member name="M:TSI.Utils.ILogger.LogError(System.String,System.Exception)">
            <summary>
            Logs the specified exception.
            </summary>
            <param name="szMessage">The MEssage to log.</param>
            <param name="e">The Exception to log.</param>
        </member>
        <member name="M:TSI.Utils.ILogger.LogError(System.Exception)">
            <summary>
            Logs the specified exception.
            </summary>
            <param name="e">The Exception to log.</param>
        </member>
        <member name="P:TSI.Utils.ILogger.TriggerMode">
            <summary>
            Determines what event triggers 
            the email.
            </summary>
        </member>
        <member name="P:TSI.Utils.ILogger.FileSizeThreshold">
            <summary>
            If TriggerMode = FileSize, specifies the
            threshold for triggering the email
            </summary>
        </member>
        <member name="P:TSI.Utils.ILogger.IntervalThreshold">
            <summary>
            If TriggerMode = Interval, specifies the
            number of minutes between emails.
            </summary>
        </member>
        <member name="M:TSI.Utils.ILogger.DeleteFile">
            <summary>
            Deletes the current trace file.
            </summary>
        </member>
        <member name="M:TSI.Utils.ILogger.RenameFile">
            <summary>
            Renames the trace file using
            the current date.
            </summary>
        </member>
        <member name="M:TSI.Utils.ILogger.GetFileSize">
            <summary>
            Returns the current size of the 
            trace file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TSI.Utils.ILogger.GetCreateDate">
            <summary>
            Returns the date/time the trace file
            was created.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TSI.Utils.FileLogger">
            <summary>
            Provides a file logging facility.  Designed to be used
            in a web application.  If no filename is specified, it looks
            for the <code>TraceFileName</code> configuration value.  If 
            no debug level is specified, it looks for the <code>TraceLevel</code> 
            configuration value.
            </summary>
        </member>
        <member name="F:TSI.Utils.FileLogger._LOCK_OBJECT">
            <summary>
            Used to synchronize access
            to the trace file. 
            </summary>
        </member>
        <member name="F:TSI.Utils.FileLogger._LOCK_OBJECT_ERR">
            <summary>
            Used to synchronize access
            to the error file. 
            </summary>
        </member>
        <member name="F:TSI.Utils.FileLogger._bPathValidated">
            <summary>
            Indicates if the file path has been
            validated.
            </summary>
        </member>
        <member name="F:TSI.Utils.FileLogger._bAttachLogFile">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.Utils.FileLogger._bInitialized">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.Utils.FileLogger._bEventLogEnabled">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.Utils.FileLogger._szSMTP">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.Utils.FileLogger._szEmailSupport">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.Utils.FileLogger._szEmailFrom">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.Utils.FileLogger._szAppName">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.Utils.FileLogger._szSubject">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.Utils.FileLogger._szEventLogSource">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.Utils.FileLogger._szEventLogName">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.Utils.FileLogger._szMessageFormat">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.Utils.FileLogger._szTimestampFormat">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.Utils.FileLogger._iMaxFilesToKeep">
            <summary>Attribute backers</summary>
        </member>
        <member name="M:TSI.Utils.FileLogger.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:TSI.Utils.FileLogger.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="szFileName">The filename to use</param>
        </member>
        <member name="M:TSI.Utils.FileLogger.Init">
            <summary>
            Initializes the object based on configuration
            settings.
            
            <code>TraceLevel</code>
            <code>TraceEnabled</code>
            <code>EMailError</code>
            </summary>
        </member>
        <member name="M:TSI.Utils.FileLogger.InitEmailSupport">
            <summary>
            Initialize the properties needed to
            generate a support email.
            </summary>
        </member>
        <member name="M:TSI.Utils.FileLogger.PrepareMessage(System.String)">
            <summary>
            Prepares the specified message to be logged by prefixing
            it with various identifying information.
            <code>dd/mm/yyyy hh:mm:ss:mmmm|UserID|RequestName|Message</code>
            </summary>
            <param name="szMessage">The original log message</param>
            <returns>Prepared String</returns>
        </member>
        <member name="M:TSI.Utils.FileLogger.LogMessage(System.String,System.Int32)">
            <summary>
            Writes the specified message at the specified
            debug level.
            </summary>
            <param name="szMessage">The message to log.</param>
            <param name="iTraceLevel">The trace level of the message.</param>
        </member>
        <member name="M:TSI.Utils.FileLogger.LogMessage(System.String,System.Int32,System.Boolean)">
            <summary>
            Writes the specified message at the specified
            trace level.
            </summary>
            <param name="szMessage">The message to log.</param>
            <param name="iTraceLevel">The trace level of the message.</param>
            <param name="bPrepareMessage">Indicates if the message should be prepared.</param>
        </member>
        <member name="M:TSI.Utils.FileLogger.LogMessage(System.String)">
            <summary>
            Writes the specified message at the default
            debug level.
            </summary>
            <param name="szMessage">The message to log.</param>
        </member>
        <member name="M:TSI.Utils.FileLogger.LogError(System.Exception)">
            <summary>
            Logs the specified exception.
            </summary>
            <param name="e">The Exception to log.</param>
        </member>
        <member name="M:TSI.Utils.FileLogger.LogError(System.String,System.Exception)">
            <summary>
            Logs the specified exception.
            </summary>
            <param name="szMessage">The Message to log.</param>
            <param name="e">The Exception to log.</param>
        </member>
        <member name="M:TSI.Utils.FileLogger.EMailError(System.String,System.Exception,System.String)">
            <summary>
            Generates an e-mail to support with the details
            of the exception.
            </summary>
            <param name="szMessage">The Message to EMail.</param>
            <param name="e">The Exception to EMail.</param>
            <param name="szAdditionalInformation"></param>
        </member>
        <member name="M:TSI.Utils.FileLogger.DeleteFile">
            <summary>
            Deletes the trace file.
            </summary>
        </member>
        <member name="M:TSI.Utils.FileLogger.RenameFile">
            <summary>
            Renames the trace file with
            the current date/time.
            </summary>
        </member>
        <member name="M:TSI.Utils.FileLogger.RenameFile(System.String)">
            <summary>
            Renames the trace file with
            the current date/time.
            </summary>
        </member>
        <member name="M:TSI.Utils.FileLogger.GetFileSize">
            <summary>
            Returns the current size of the 
            trace file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TSI.Utils.FileLogger.GetCreateDate">
            <summary>
            Returns the date/time the trace file
            was created.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TSI.Utils.FileLogger.WriteLine(System.String)">
            <summary>
            Writes the message to the trace file.
            </summary>
            <param name="szMessage"></param>
        </member>
        <member name="M:TSI.Utils.FileLogger.WriteErrorLine(System.String)">
            <summary>
            Writes the message to the trace file.
            </summary>
            <param name="szMessage"></param>
        </member>
        <member name="M:TSI.Utils.FileLogger.ValidatePath">
            <summary>
            Validates the filename is valid and the
            specified path exists.
            </summary>
        </member>
        <member name="M:TSI.Utils.FileLogger.ValidatePath(System.String)">
            <summary>
            Validates the filename is valid and the
            specified path exists.
            </summary>
        </member>
        <member name="M:TSI.Utils.FileLogger.WriteToEventLog(System.String,System.Diagnostics.EventLogEntryType)">
            <summary>
            Writes the specified message to the Event Log
            </summary>
            <param name="szMsg">Message to Write</param>
            <param name="oType">Event Log Entry Type</param>
        </member>
        <member name="T:TSI.Utils.LoggerBase">
            <summary>
            Provides base functionality for Logging
            </summary>
        </member>
        <member name="F:TSI.Utils.LoggerBase._TRACE_LEVEL_NAV">
            <summary>
            Trace Level Navigation
            </summary>
        </member>
        <member name="F:TSI.Utils.LoggerBase._TRACE_LEVEL_PARMS">
            <summary>
            Trace Level Navigation Parameters
            </summary>
        </member>
        <member name="F:TSI.Utils.LoggerBase._TRACE_LEVEL_GENERAL">
            <summary>
            Trace Level General
            </summary>
        </member>
        <member name="F:TSI.Utils.LoggerBase._TRACE_LEVEL_ERROR">
            <summary>
            Trace Level Error
            </summary>
        </member>
        <member name="F:TSI.Utils.LoggerBase._TRACE_LEVEL_ARCH">
            <summary>
            Trace Level Architecture
            </summary>
        </member>
        <member name="F:TSI.Utils.LoggerBase._TRACE_LEVEL_BUSINESS_OBJECT">
            <summary>
            Trace Level Business Object
            </summary>
        </member>
        <member name="F:TSI.Utils.LoggerBase._TRACE_LEVEL_SQL">
            <summary>
            Trace Level SQL
            </summary>
        </member>
        <member name="F:TSI.Utils.LoggerBase._TRACE_LEVEL_ALL">
            <summary>
            Trace Level All
            </summary>
        </member>
        <member name="F:TSI.Utils.LoggerBase._TRACE_LEVEL_DEFAULT">
            <summary>
            When no level is specified, the
            default level is used.
            </summary>
        </member>
        <member name="F:TSI.Utils.LoggerBase._DEFAULT_REQUEST_NAME">
            <summary>
            When no request name is specfied,
            the default value is used.
            </summary>
        </member>
        <member name="F:TSI.Utils.LoggerBase._iCurrentTraceLevel">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.Utils.LoggerBase._szUserID">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.Utils.LoggerBase._szFileName">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.Utils.LoggerBase._szErrorFileName">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.Utils.LoggerBase._szRequestName">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.Utils.LoggerBase._bTraceEnabled">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.Utils.LoggerBase._bEmailError">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.Utils.LoggerBase._iTriggerMode">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.Utils.LoggerBase._lFileSizeThreshold">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.Utils.LoggerBase._lIntervalThreshold">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.Utils.LoggerBase._bErrorSameAsTrace">
            <summary>Attribute backers</summary>
        </member>
        <member name="F:TSI.Utils.LoggerBase.TRIGGER_MODE_FILE_SIZE">
            <summary>
            File Processing Trigger - File Size
            </summary>
        </member>
        <member name="F:TSI.Utils.LoggerBase.TRIGGER_MODE_INTERVAL">
            <summary>
            File Processing Trigger - Time Interval
            </summary>
        </member>
        <member name="M:TSI.Utils.LoggerBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:TSI.Utils.LoggerBase.Init">
            <summary>
            Initializes the object based on configuration
            file settings.
            
            <code>TriggerMode</code>
            <code>FileSizeThreshold</code>
            <code>IntervalThreshold</code>
            </summary>
        </member>
        <member name="P:TSI.Utils.LoggerBase.TRACE_LEVEL_ALL">
            <summary>
            Trace level for controlling output
            </summary>
        </member>
        <member name="P:TSI.Utils.LoggerBase.TRACE_LEVEL_SQL">
            <summary>
            Trace level for controlling output
            </summary>
        </member>
        <member name="P:TSI.Utils.LoggerBase.TRACE_LEVEL_NAV">
            <summary>
            Trace level for controlling output
            </summary>
        </member>
        <member name="P:TSI.Utils.LoggerBase.TRACE_LEVEL_PARMS">
            <summary>
            Trace level for controlling output
            </summary>
        </member>
        <member name="P:TSI.Utils.LoggerBase.TRACE_LEVEL_ARCH">
            <summary>
            Trace level for controlling output
            </summary>
        </member>
        <member name="P:TSI.Utils.LoggerBase.TRACE_LEVEL_GENERAL">
            <summary>
            Trace level for controlling output
            </summary>
        </member>
        <member name="P:TSI.Utils.LoggerBase.TRACE_LEVEL_ERROR">
            <summary>
            Trace level for controlling output
            </summary>
        </member>
        <member name="P:TSI.Utils.LoggerBase.TRACE_LEVEL_BUSINESS_OBJECT">
            <summary>
            Trace level for controlling output
            </summary>
        </member>
        <member name="P:TSI.Utils.LoggerBase.DEFAULT_REQUEST_NAME">
            <summary>
            Default request name.
            </summary>
        </member>
        <member name="P:TSI.Utils.LoggerBase.FileName">
            <summary>
            The filename to write to.
            </summary>
        </member>
        <member name="P:TSI.Utils.LoggerBase.UserID">
            <summary>
            The ID of the current user.
            </summary>
        </member>
        <member name="P:TSI.Utils.LoggerBase.IsEnabled">
            <summary>
            Determines if loging is enabled
            </summary>
        </member>
        <member name="P:TSI.Utils.LoggerBase.EmailError">
            <summary>
            Determines if errors should be emailed to the configured
            address <code>EMailSupportAddress</code> in addition to being written to the log.
            </summary>
        </member>
        <member name="P:TSI.Utils.LoggerBase.RequestName">
            <summary>
            The name of the current request
            </summary>
        </member>
        <member name="P:TSI.Utils.LoggerBase.TraceLevel">
            <summary>
            The current debug level of the application.  Determines
            is specified messages should be logged or not.
            </summary>
        </member>
        <member name="P:TSI.Utils.LoggerBase.TriggerMode">
            <summary>
            Determines what event triggers 
            the email.
            </summary>
        </member>
        <member name="P:TSI.Utils.LoggerBase.FileSizeThreshold">
            <summary>
            If TriggerMode = FileSize, specifies the
            threshold for triggering the email
            </summary>
        </member>
        <member name="P:TSI.Utils.LoggerBase.IntervalThreshold">
            <summary>
            If TriggerMode = Interval, specifies the
            number of minutes between emails.
            </summary>
        </member>
        <member name="M:TSI.Utils.LoggerBase.LogMessage(System.String,System.Int32)">
            <summary>
            Writes the specified message at the specified
            debug level.
            </summary>
            <param name="szMessage">The message to log.</param>
            <param name="iTraceLevel">The trace level of the message.</param>
        </member>
        <member name="M:TSI.Utils.LoggerBase.LogMessage(System.String)">
            <summary>
            Writes the specified message at the default
            debug level.
            </summary>
            <param name="szMessage">The message to log.</param>
        </member>
        <member name="M:TSI.Utils.LoggerBase.LogError(System.String,System.Exception)">
            <summary>
            Logs the specified exception.
            </summary>
            <param name="szMessage">The MEssage to log.</param>
            <param name="e">The Exception to log.</param>
        </member>
        <member name="M:TSI.Utils.LoggerBase.LogError(System.Exception)">
            <summary>
            Logs the specified exception.
            </summary>
            <param name="e">The Exception to log.</param>
        </member>
        <member name="M:TSI.Utils.LoggerBase.IsFileEventTriggered">
            <summary>
            Determines if the file meets any specified
            processing criteria.
            </summary>
            <returns>Trigger Indicator</returns>
        </member>
        <member name="M:TSI.Utils.LoggerBase.GetConfigValue(System.String,System.String)">
            <summary>
            Returns the specified configuration value. If not found 
            the default value is returned.
            </summary>
            <param name="szConfigName">Configuration Setting</param>
            <param name="szDefaultValue">Default Value</param>
            <returns>Configuration Value</returns>
        </member>
        <member name="M:TSI.Utils.LoggerBase.GetConfigValue(System.String)">
            <summary>
            Returns the specified configuration value.  If not found and
            required, throws an exception.  
            </summary>
            <param name="szConfigName">Configuration Setting</param>
            <returns>Configuration Value</returns>
        </member>
        <member name="M:TSI.Utils.LoggerBase.GetConfigValue(System.String,System.String,System.Boolean)">
            <summary>
            Returns the specified configuration value.  If not found and
            required, throws an exception.  If not found and not required,
            the default value is returned.
            </summary>
            <param name="szConfigName">Configuration Setting</param>
            <param name="bRequired">Is Required</param>
            <param name="szDefaultValue">Default Value</param>
            <returns>Configuration Value</returns>
        </member>
        <member name="M:TSI.Utils.LoggerBase.GetFileSize">
            <summary>
            Returns the current size of the 
            trace file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TSI.Utils.LoggerBase.GetCreateDate">
            <summary>
            Returns the date/time the trace file
            was created.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TSI.Utils.LoggerBase.RenameFile">
            <summary>
            Renames the Trace File
            </summary>
        </member>
        <member name="M:TSI.Utils.LoggerBase.DeleteFile">
            <summary>
            Deletes the Trace File
            </summary>
        </member>
        <member name="T:TSI.Utils.LoggerFactory">
            <summary>
            Creates an instance of the Logging Provider as
            specified in the TraceServiceProvider application
            setting.
            </summary>
        </member>
        <member name="M:TSI.Utils.LoggerFactory.#ctor">
            <summary>
            Constructor.  Cannot be instantiated.
            </summary>
        </member>
        <member name="M:TSI.Utils.LoggerFactory.GetLogger">
            <summary>
            Returns an instance of the configured logging provider.
            </summary>
            <returns>Logger Instance</returns>
        </member>
        <member name="T:TSI.Utils.Utilities">
            <summary>
            Hold general, all-purpose functions that do not
            directly pertian to any business function.
            </summary>
        </member>
        <member name="M:TSI.Utils.Utilities.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:TSI.Utils.Utilities.GetConfigValue(System.String,System.String,System.String)">
            <summary>
            Returns the specified configuration value.  If not
            found and a default is specified, the default value
            is returned.  If the default value is null, an
            exception is thrown.
            </summary>
            <param name="szName">Value Name</param>
            <param name="szDefault">Default Value</param>
            <param name="szConfigSection">Configuration Section</param>
            <returns>Value</returns>
        </member>
        <member name="M:TSI.Utils.Utilities.GetConfigValue(System.String)">
            <summary>
            Returns the specified configuration value.  
            </summary>
            <param name="szName">Value Name</param>
            <returns>Value</returns>
        </member>
        <member name="M:TSI.Utils.Utilities.GetIntConfigValue(System.String,System.Int32)">
            <summary>
            Returns the specified configuration value
            cast to an int.
            </summary>
            <param name="szName">Value Name</param>
            <param name="iDefault">Default Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:TSI.Utils.Utilities.GetIntConfigValue(System.String)">
            <summary>
            Returns the specified configuration value
            cast to an int.
            </summary>
            <param name="szName">Value Name</param>
            <returns>Value</returns>
        </member>
        <member name="M:TSI.Utils.Utilities.GetIntConfigValue(System.String,System.String)">
            <summary>
            Returns the specified configuration value
            cast to an int.
            </summary>
            <param name="szName">Value Name</param>
            <param name="szConfigSection"></param>
            <returns>Value</returns>
        </member>
        <member name="M:TSI.Utils.Utilities.GetBoolConfigValue(System.String,System.Boolean)">
            <summary>
            Returns the specified configuration value
            cast to an bool.
            </summary>
            <param name="szName">Value Name</param>
            <param name="bDefault">Default Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:TSI.Utils.Utilities.GetBoolConfigValue(System.String)">
            <summary>
            Returns the specified configuration value
            cast to an bool.
            </summary>
            <param name="szName">Value Name</param>
            <returns>Value</returns>
        </member>
        <member name="M:TSI.Utils.Utilities.GetDateTimeConfigValue(System.String,System.DateTime)">
            <summary>
            Returns the specified configuration value
            cast to an DateTime.
            </summary>
            <param name="szName">Value Name</param>
            <param name="dtDefault">Default Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:TSI.Utils.Utilities.GetDateTimeConfigValue(System.String)">
            <summary>
            Returns the specified configuration value
            cast to an bool.
            </summary>
            <param name="szName">Value Name</param>
            <returns>Value</returns>
        </member>
        <member name="M:TSI.Utils.Utilities.IsOptLockException(System.Exception)">
            <summary>
            Determines if any Exception in the chain
            is an OptLock exception.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.Utils.Utilities.GetDecimalConfigValue(System.String,System.Decimal)">
            <summary>
            Returns the specified configuration value
            cast to an decimal.
            </summary>
            <param name="szName">Value Name</param>
            <param name="dDefault">Default Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:TSI.Utils.Utilities.GetDecimalConfigValue(System.String,System.Decimal,System.String)">
            <summary>
            Returns the specified configuration value
            cast to an decimal.
            </summary>
            <param name="szName"></param>
            <param name="dDefault"></param>
            <param name="szConfigSection"></param>
            <returns></returns>
        </member>
        <member name="M:TSI.Utils.Utilities.GetDecimalConfigValue(System.String)">
            <summary>
            Returns the specified configuration value
            cast to an decimal.
            </summary>
            <param name="szName">Value Name</param>
            <returns>Value</returns>
        </member>
        <member name="M:TSI.Utils.Utilities.GetDecimalConfigValue(System.String,System.String)">
            <summary>
            Returns the specified configuration value
            cast to an decimal.
            </summary>
            <param name="szName">Value Name</param>
            <param name="szConfigSection"></param>
            <returns>Value</returns>
        </member>
        <member name="T:TSI.QA.TestBase">
            <summary>
            Provides common NUnit testing functionality
            </summary>
        </member>
        <member name="M:TSI.QA.TestBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:TSI.QA.TestBase.Init">
            <summary>
            Initialize our testing session.
            </summary>
        </member>
        <member name="M:TSI.QA.TestBase.DeleteTraceFile">
            <summary>
            Depending upon the <code>QATestDeleteTraceFile</code> configuration
            setting, deletes the trace file prior to execution. 
            </summary>
        </member>
        <member name="M:TSI.QA.TestBase.Cleanup">
            <summary>
            Deletes all previously created objects.
            Mama always said to cleanup after yourself...
            </summary>
        </member>
        <member name="M:TSI.QA.TestBase.AddObjectToCleanup(TSI.BusinessObjects.IBusinessObject)">
            <summary>
            Adds an object to the list to be deleted upon test
            tear down.
            </summary>
            <param name="oBizObject"></param>
        </member>
        <member name="M:TSI.QA.TestBase.AddObjectForVersion(System.Object)">
            <summary>
            Adds an object to the list that is used to determine the
            assembly versions.
            </summary>
            <param name="oObject"></param>
        </member>
        <member name="M:TSI.QA.TestBase.LogMessage(System.String)">
            <summary>
            Logs the message to the trace file and console.
            </summary>
            <param name="szMessage"></param>
        </member>
        <member name="M:TSI.QA.TestBase.LogError(System.Exception)">
            <summary>
            Logs the exeception to the trace file.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TSI.QA.TestBase.LogBeginTest(System.String)">
            <summary>
            Writes a "Begin" messgae to the log.
            </summary>
            <param name="szName"></param>
        </member>
        <member name="M:TSI.QA.TestBase.LogEndTest(System.String)">
            <summary>
            Writes an "End" message to the log.
            </summary>
            <param name="szName"></param>
        </member>
        <member name="M:TSI.QA.TestBase.WriteLogToConsole">
            <summary>
            Depending upon the <code>QAWriteLogToConsole</code> configuration
            setting, determines if the log messages should
            be written to the console (STDOUT).
            </summary>
            <returns>Indicator</returns>
        </member>
        <member name="M:TSI.QA.TestBase.DisplayAppSettings">
            <summary>
            Displays the values found in the
            configuration file.  The DisplayAppSettings
            config value controls if this is executed.
            </summary>
        </member>
        <member name="M:TSI.QA.TestBase.DisplayAssemblyInfo">
            <summary>
            Displays version information
            </summary>
        </member>
        <member name="M:TSI.QA.TestBase.SetPrivateFieldValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of a private (or protected) instance field.
            </summary>
            <param name="oDest">Object to be changed (destination)</param>
            <param name="szFieldName">Name of field to be changed</param>
            <param name="oFieldValue">Value to set the field to</param>
            <returns>The prior value</returns>
        </member>
        <member name="T:TSI.QA.TSIAssert">
            <summary>
            Custom asserts for NUnit testing
            </summary>
        </member>
        <member name="M:TSI.QA.TSIAssert.IsGreaterThan(System.Int32,System.Int32)">
            <summary>
             Custom Assert that Value 1 is greater than Value 2.
            </summary>
            <param name="iVal1">Value 1</param>
            <param name="iVal2">Value 2</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.IsGreaterThan(System.Int32,System.Int32,System.String)">
            <summary>
             Custom Assert that Value 1 is greater than Value 2.
            </summary>
            <param name="iVal1">Value 1</param>
            <param name="iVal2">Value 2</param>
            <param name="szMsg">Additional Information</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.IsGreaterThan(System.Decimal,System.Decimal)">
            <summary>
             Custom Assert that Value 1 is greater than Value 2.
            </summary>
            <param name="dVal1">Value 1</param>
            <param name="dVal2">Value 2</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.IsGreaterThan(System.Decimal,System.Decimal,System.String)">
            <summary>
             Custom Assert that Value 1 is greater than Value 2.
            </summary>
            <param name="dVal1">Value 1</param>
            <param name="dVal2">Value 2</param>
            <param name="szMsg">Additional Information</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.IsLessThan(System.Int32,System.Int32)">
            <summary>
             Custom Assert that Value 1 is ess than Value 2.
            </summary>
            <param name="iVal1">Value 1</param>
            <param name="iVal2">Value 2</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.IsLessThan(System.Int32,System.Int32,System.String)">
            <summary>
             Custom Assert that Value 1 is less than Value 2.
            </summary>
            <param name="iVal1">Value 1</param>
            <param name="iVal2">Value 2</param>
            <param name="szMsg">Additional Information</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.IsLessThan(System.Decimal,System.Decimal)">
            <summary>
             Custom Assert that Value 1 is ess than Value 2.
            </summary>
            <param name="dVal1">Value 1</param>
            <param name="dVal2">Value 2</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.IsLessThan(System.Decimal,System.Decimal,System.String)">
            <summary>
             Custom Assert that Value 1 is less than Value 2.
            </summary>
            <param name="dVal1">Value 1</param>
            <param name="dVal2">Value 2</param>
            <param name="szMsg">Additional Information</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.IsLessThanEqualTo(System.Int32,System.Int32)">
            <summary>
             Custom Assert that Value 1 is greater than or equal toValue 2.
            </summary>
            <param name="iVal1">Value 1</param>
            <param name="iVal2">Value 2</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.IsLessThanEqualTo(System.Int32,System.Int32,System.String)">
            <summary>
             Custom Assert that Value 1 is greater than or equal toValue 2.
            </summary>
            <param name="iVal1">Value 1</param>
            <param name="iVal2">Value 2</param>
            <param name="szMsg">Additional Information</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.IsLessThanEqualTo(System.Decimal,System.Decimal)">
            <summary>
             Custom Assert that Value 1 is greater than Value 2.
            </summary>
            <param name="dVal1">Value 1</param>
            <param name="dVal2">Value 2</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.IsLessThanEqualTo(System.Decimal,System.Decimal,System.String)">
            <summary>
             Custom Assert that Value 1 is greater than Value 2.
            </summary>
            <param name="dVal1">Value 1</param>
            <param name="dVal2">Value 2</param>
            <param name="szMsg">Additional Information</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.IsLessThanEqualTo(System.DateTime,System.DateTime)">
            <summary>
             Custom Assert method comparing DateTime values
            </summary>
            <param name="dtVal1">Value 1</param>
            <param name="dtVal2">Value 2</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.IsLessThanEqualTo(System.DateTime,System.DateTime,System.String)">
            <summary>
             Custom Assert method comparing DateTime values
            </summary>
            <param name="dtVal1">Value 1</param>
            <param name="dtVal2">Value 2</param>
            <param name="szMsg">Additional Information</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.IsGreaterThanEqualTo(System.Int32,System.Int32)">
            <summary>
             Custom Assert that Value 1 is greater than or equal toValue 2.
            </summary>
            <param name="iVal1">Value 1</param>
            <param name="iVal2">Value 2</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.IsGreaterThanEqualTo(System.Int32,System.Int32,System.String)">
            <summary>
             Custom Assert that Value 1 is greater than or equal toValue 2.
            </summary>
            <param name="iVal1">Value 1</param>
            <param name="iVal2">Value 2</param>
            <param name="szMsg">Additional Information</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.IsGreaterThanEqualTo(System.Decimal,System.Decimal)">
            <summary>
             Custom Assert that Value 1 is greater than or equal toValue 2.
            </summary>
            <param name="dVal1">Value 1</param>
            <param name="dVal2">Value 2</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.IsGreaterThanEqualTo(System.Decimal,System.Decimal,System.String)">
            <summary>
             Custom Assert that Value 1 is greater than or equal toValue 2.
            </summary>
            <param name="dVal1">Value 1</param>
            <param name="dVal2">Value 2</param>
            <param name="szMsg">Additional Information</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.IsGreaterThanEqualTo(System.DateTime,System.DateTime)">
            <summary>
             Custom Assert method comparing DateTime values
            </summary>
            <param name="dtVal1">Value 1</param>
            <param name="dtVal2">Value 2</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.IsGreaterThanEqualTo(System.DateTime,System.DateTime,System.String)">
            <summary>
             Custom Assert method comparing DateTime values
            </summary>
            <param name="dtVal1">Value 1</param>
            <param name="dtVal2">Value 2</param>
            <param name="szMsg">Additional Information</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.IsGreaterThan(System.DateTime,System.DateTime)">
            <summary>
             Custom Assert method comparing DateTime values
            </summary>
            <param name="dtVal1">Value 1</param>
            <param name="dtVal2">Value 2</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.IsGreaterThan(System.DateTime,System.DateTime,System.String)">
            <summary>
             Custom Assert that Value 1 is less than Value 2.
            </summary>
            <param name="dtVal1">Value 1</param>
            <param name="dtVal2">Value 2</param>
            <param name="szMsg">Additional Information</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.AreNotEqual(System.Int32,System.Int32)">
            <summary>
             Custom Assert that Value 1 is not equal to Value 2.
            </summary>
            <param name="iVal1">Value 1</param>
            <param name="iVal2">Value 2</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.AreNotEqual(System.Int32,System.Int32,System.String)">
            <summary>
             Custom Assert that Value 1 is greater than Value 2.
            </summary>
            <param name="iVal1">Value 1</param>
            <param name="iVal2">Value 2</param>
            <param name="szMsg">Additional Information</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.AreNotEqual(System.Decimal,System.Decimal)">
            <summary>
             Custom Assert that Value 1 is not equal to Value 2.
            </summary>
            <param name="dVal1">Value 1</param>
            <param name="dVal2">Value 2</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.AreNotEqual(System.Decimal,System.Decimal,System.String)">
            <summary>
             Custom Assert that Value 1 is greater than Value 2.
            </summary>
            <param name="dVal1">Value 1</param>
            <param name="dVal2">Value 2</param>
            <param name="szMsg">Additional Information</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.AreNotEqual(System.String,System.String)">
            <summary>
             Custom Assert that Value 1 is not equal to Value 2.
            </summary>
            <param name="szVal1">Value 1</param>
            <param name="szVal2">Value 2</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.AreNotEqual(System.String,System.String,System.String)">
            <summary>
             Custom Assert that Value 1 is greater than Value 2.
            </summary>
            <param name="szVal1">Value 1</param>
            <param name="szVal2">Value 2</param>
            <param name="szMsg">Additional Information</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.IsLessThan(System.DateTime,System.DateTime)">
            <summary>
             Custom Assert that Value 1 is less than Value 2.
            </summary>
            <param name="dtVal1">Value 1</param>
            <param name="dtVal2">Value 2</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.IsLessThan(System.DateTime,System.DateTime,System.String)">
            <summary>
             Custom Assert that Value 1 is less than Value 2.
            </summary>
            <param name="dtVal1">Value 1</param>
            <param name="dtVal2">Value 2</param>
            <param name="szMsg">Additional Information</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.AreEqual(System.DateTime,System.DateTime,System.String)">
            <summary>
             Custom Assert that Value 1 is equal to Value 2 excluding
             milliseconds.
            </summary>
            <param name="dtVal1">Value 1</param>
            <param name="dtVal2">Value 2</param>
            <param name="szMsg">Additional Information</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.AreEqual(System.DateTime,System.DateTime,System.Boolean,System.String)">
            <summary>
             Custom Assert that Value 1 is equal to Value 2.
            </summary>
            <param name="dtVal1">Value 1</param>
            <param name="dtVal2">Value 2</param>
            <param name="bIncludeMS">Include Milliseconds in the comparison</param>
            <param name="szMsg">Additional Information</param>
        </member>
        <member name="M:TSI.QA.TSIAssert.FailTest(System.String,System.Object,System.Object,System.String)">
            <summary>
            Helper method that invokes the AssertFail for comparing
            two values.
            </summary>
            <param name="szFailureMsg">The test failure message</param>
            <param name="oVal1">Value 1</param>
            <param name="oVal2">Value 2</param>
            <param name="szAdditionalMsg">User provided message</param>
        </member>
    </members>
</doc>
