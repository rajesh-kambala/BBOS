<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SageCRMNet</name>
    </assembly>
    <members>
        <member name="T:Sage.Styles">
            <summary>
            Used for drawing screens and grids.
            </summary>
        </member>
        <member name="T:Sage.CRM.Controls.EntrySelectTable">
            <summary>
            Class to represent a Select Table Entry.
            </summary>
        </member>
        <member name="T:Sage.CRM.Controls.EntrySelect">
            <summary>
            Represents a select-type entry field.
            </summary>
        </member>
        <member name="T:Sage.CRM.Controls.Entry">
            <summary>
            Represents a single field within an EntryGroup.
            <returnedby>EntryGroup.GetEntry, EntryGroup.AddEntry.</returnedby>    
            </summary>
        </member>
        <member name="F:Sage.CRM.Controls.Entry.iBaseEntry">
            <summary>
            Interface to represent the Entry on Unmanaged Code. This should be used only
            for inherited classes.
            </summary>
        </member>
        <member name="M:Sage.CRM.Controls.Entry.#ctor(System.String)">
            <summary>
            Initializes a new instance of <b>Entry</b>.
            </summary>
            <param name="fieldName">Field Name.</param>
        </member>
        <member name="M:Sage.CRM.Controls.Entry.#ctor(System.String,Sage.EntryTypes)">
            <summary>
            Initializes a new instance of <b>Entry</b>.
            </summary>
            <param name="fieldName">Field Name.</param>
            <param name="type">Used to override the Entry Type on unmanaged code.</param>
        </member>
        <member name="M:Sage.CRM.Controls.Entry.Finalize">
            <summary>
            Destructor for the Entry class.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.Entry.Caption">
            <summary>
            Enables you to change the caption on a Entry. You use this property only if the caption is required to be different on this particular screen only.
            If the caption is to be permanently changed, it should be done in Administration | Customization | &lt;Entity&gt; | Fields. The change is automatically reflected throughout the system.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.Entry.CaptionFamily">
            <summary>
            Enables the family of the Entry to be set. This controls what captions appear on each entry.
            If no CaptionFamily is set, the default "ColNames" will be used.
            The caption shown is the translation for the caption family (ColNames) plus the caption code (field name).
            You can change the caption by changing the CaptionFamily value and adding a translation for that CaptionFamily and the field name.
            For more information refer to the System Administrator Guide. Note that you can view a list of column names in Administration | Customization | Translations.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.Entry.CaptionPos">
            <summary>
            Enables you to re-position the captions on fields to reflect the value in the field.
            <see cref="T:Sage.CaptionPositions"/>
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.Entry.CreateScript">
            <summary>
            Enables you to enter server-side JavaScript that is executed when the entry is created. This is limited to this instance of entry.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.Entry.DefaultType">
            <summary>
            You use this property to set the default type of the entry. This is used in conjunction with the EntryType and DefaultValue properties.
            <see cref="T:Sage.DefaultTypes"/>
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.Entry.DefaultValue">
            <summary>
            Specifies the default value given to the field when a new record is created.
            This property will only be used if the DefaultType property is set to Sage.DefaultTypes.DefaultValue (1)        
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.Entry.EntryType">
            <summary>
            Gets the Entry Type.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.Entry.Height">
            <summary>
            The number of rows that this Entry will span when the EntryGroup is displayed.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.Entry.Hidden">
            <summary>
            A Hidden entry is not displayed when the EntryGroup it is in is executed. 
            This is useful if you want to tag an entry to an EntryGroup but do not want customers to view it.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.Entry.JumpAction">
            <summary>
            Action to be invoked when the entry is in view mode.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.Entry.JumpCustomPage">
            <summary>
            ASP file to jump when the entry is in view mode.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.Entry.JumpEntity">
            <summary>
            Allows the field (in view mode) to be hyperlinked to an entity summary screen.
            Note that the entity must be relevant to the field, that is, the identity field of the 
            entity selected must exist within the table or view on which the screen is based.
            In practice, this is only useful when the screen is based on a view that contains fields from multiple tables.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.Entry.JumpKey">
            <summary>
            The key that is used by this action e.g. (int)KeyList.CompanyId.
            </summary>
            <see cref="T:Sage.KeyList"/>
        </member>
        <member name="P:Sage.CRM.Controls.Entry.MaxLength">
            <summary>
            Controls the maximum amount of characters that can be entered into an 
            Entry when editing this entry. This does not change the size of the entry box, 
            only the number of characters that can be entered. 
            (Use the Size property to control the appearance of the field.)
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.Entry.Name">
            <summary>
            Gets the name by which the field is referenced. 
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.Entry.NewLine">
            <summary>
            Set if this Entry is to start a new line within the EntryGroup.
            </summary>
            <see cref="T:Sage.CRM.Controls.EntryGroup"/>
        </member>
        <member name="P:Sage.CRM.Controls.Entry.OnChangeScript">
            <summary>
            Specifies the JavaScript to be executed when the value in the field is edited. 
            This property is only applicable when the ReadOnly property is set to false.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.Entry.ReadOnly">
            <summary>
            Specifies that a field is read-only. If this is set to true,
            the value in the field is not editable.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.Entry.Required">
            <summary>
            Specifies that a value must be entered in this field. 
            If no value is entered a validation error is displayed.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.Entry.Size">
            <summary>
            Specifies the size of the field displayed onscreen.
            This is the length of the field in pixels.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.Entry.ValidateScript">
            <summary>
            Enables you to set a validation script on a Entry object. 
            You use this to enter server-side JavaScript that is executed when the entry is 
            executed in save mode.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.Entry.Width">
            <summary>
            The number of columns that this Entry will span when the EntryGroup is displayed.
            </summary>
        </member>
        <member name="F:Sage.CRM.Controls.EntrySelect.iEntrySelect">
            <summary>
            Interface to represent the EntrySelect on Unmanaged Code. This should be used only
            for inherited classes.
            </summary>
        </member>
        <member name="M:Sage.CRM.Controls.EntrySelect.#ctor(System.String)">
            <summary>
            Initializes a new instance of <b>EntrySelect</b>.
            </summary>
            <param name="fieldName">Field Name.</param>
        </member>
        <member name="M:Sage.CRM.Controls.EntrySelect.#ctor(System.String,Sage.EntryTypes)">
            <summary>
            Initializes a new instance of <b>EntrySelect</b>.
            </summary>
            <param name="fieldName">Field Name.</param>
            <param name="type">Used to setup the Entry Type correctly on unmanaged code.</param>
        </member>
        <member name="M:Sage.CRM.Controls.EntrySelect.RemoveLookup(System.String)">
            <summary>
            Removes a Lookup item.
            </summary>
            <param name="code">The code of the Lookup item to be removed.</param>
        </member>
        <member name="P:Sage.CRM.Controls.EntrySelect.AllowBlank">
            <summary>
            Gets or sets the AllowBlank property.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.EntrySelect.IsMultiple">
            <summary>
            Gets or sets the IsMultiple property.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.EntrySelect.LookupFamily">
            <summary>
            Gets or sets LookupFamily property.
            </summary>
        </member>
        <member name="M:Sage.CRM.Controls.EntrySelectTable.#ctor(System.String)">
            <summary>
            Initializes a new instance of <b>EntrySelectTable</b>.
            </summary>
            <param name="fieldName">Field Name.</param>
        </member>
        <member name="P:Sage.CRM.Controls.EntrySelectTable.AllowUnassigned">
            <summary>
            Enable or Disable the Unassigned option.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.EntrySelectTable.SearchSql">
            <summary>
            Gets or sets a SQL filter.
            </summary>
        </member>
        <member name="T:Sage.CRM.Blocks.GraphicBlock">
            <summary>
            Graphic Blocks are more powerful than standard static images because variables can be used in their creation.
            These variables may represent live data from a database or incorporate details of the current user such as their privileges or settings.
            Graphics created by the Graphics Block are recreated every time they are requested so, where variables are used, the graphic is based on real time data.
            </summary>
        </member>
        <member name="T:Sage.CRM.Blocks.SageCrmBlock">
            <summary>
            SageCrmBlock - Base representation of one CRM Block, this class can be used to get any Metadata block.
            </summary>
        </member>
        <member name="M:Sage.CRM.Blocks.SageCrmBlock.#ctor(System.String)">
            <summary>
            Initializes a new instance of <b>SageCrmBlock</b>.
            </summary>
            <param name="blockName">Block Name.</param>
        </member>
        <member name="M:Sage.CRM.Blocks.SageCrmBlock.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Sage.CRM.Blocks.SageCrmBlock.Execute">
            <summary>
            Generates the HTML output for the block.
            </summary>
            <returns>HTML string.</returns>
        </member>
        <member name="M:Sage.CRM.Blocks.SageCrmBlock.Execute(System.String)">
            <summary>
            Execute the block, passing in an optional argument. Argument depends on the type of the block.
            </summary>
            <param name="Arg">Depends on the type of block.</param>
            <returns>HTML string.</returns>
        </member>
        <member name="P:Sage.CRM.Blocks.SageCrmBlock.DisplayForm">
            <summary>
            Enable/Disable automatic adding forms. The Default is true.
            </summary>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.#ctor">
            <summary>
            Initializes a new instance of <b>GraphicBlock</b>.
            </summary>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.#ctor(System.String)">
            <summary>
            Initializes a new instance of <b>GraphicBlock</b>.
            </summary>
            <param name="blockName">Block Name.</param>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.Finalize">
            <summary>
            Destructor for GraphicBlock class.
            </summary>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.Animation(System.String,System.String)">
            <summary>
            The Graphics Block supports animation. Frames contained in an animation can be shown at varying intervals using the Delay mode. Using 'Add', the current state of the image is saved as a frame to be shown after the specified delay. 
            The whole animation can be looped for a definite or indefinite number of times. This animation technique can also be used for charts. The delay is specified where 100=1 second and indefinite loops can be obtained by setting the Loop valueto 0.
            </summary>
            <param name="mode"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.Arc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws an elliptically curved line.
            The arc traverses the perimeter of an ellipse that is bound by the points (X1,Y1) and (X2,Y2). The arc is drawn following the perimeter of the ellipse, counter clockwise, from the starting point to the ending point. The starting point is defined by the intersection of the ellipse and a line defined by the center of the ellipse and (X3,Y3). The ending point is defined by the intersection of the ellipse and a line defined by the center of the ellipse and (X4, Y4).
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="x3"></param>
            <param name="y3"></param>
            <param name="x4"></param>
            <param name="y4"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.Brush(System.String,System.String)">
            <summary>
            Changes the color and pattern used when drawing the background or filling in graphical shapes. The pattern can be one of a predetermined list using the Style mode or can be from an image using the Load mode.
            </summary>
            <param name="mode"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.Chord(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a shape that is defined by an arc and a line that joins the endpoints of the arc. The chord consists of a portion of an ellipse that is bound by the points (X1,Y1) and (X2,Y2). 
            The ellipse is bisected by a line that runs between the points (X3,Y3) and (X4,Y4). The perimeter of the chord runs counter clockwise from (X3, Y3), counterclockwise along the ellipse to (X4,Y4), and straight back to (X3,Y3). 
            If (X3,Y3) and (X4,Y4) are not on the surface of the ellipse, the corresponding corners on the chord are the closest points on the perimeter that intersect the line.
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="x3"></param>
            <param name="y3"></param>
            <param name="x4"></param>
            <param name="y4"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.Effect(System.String,System.String)">
            <summary>
            Changes GraphicBlock effects.
            </summary>
            <example>
            Sage.CRM.SageCrmGraphicBlock Graphic1;
            Graphic1 = GetGraphicBlock();
            Graphic1.Effect('Zoom','200');
            Graphic1.Effect('Transparent','True');
            Graphic1.Effect('Dither','Floyd');
            Graphic1.Effect('Merge','c:\\winnt\\winnt.bmp, White,0,0');
            Graphic1.Effect('DisplayErrors','false');
            Graphic1.Effect('Clear','');
            Graphic1.Effect('ChangeColor','White,Red');
            </example>        
            <param name="property">See Sage.Graphics.EffectProperties for values</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.Ellipse(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a circle or ellipse.
            Specify the bounding rectangle by giving the top left point at pixel coordinates (X1, Y1) and the bottom right point at (X2, Y2).If the bounding rectangle is a square, a circle is drawn. The ellipse is drawn using the current pen width and color.
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.Font(System.String,System.String)">
            <summary>
            Allows for various changes to be carried out on the current font depending on the value specified in Mode. These changes then take effect with TextOut commands. 
            To ensure success, use True Type fonts. 
            </summary>
            <param name="property">See Sage.Graphics.FontProperties for available property values</param>
            <param name="value"></param>
            <example>
            Graphic1 = new GraphicBlock();
            Graphic1.Font('Name','Times New Roman');
            Graphic1.Font('Color','Blue');
            Graphic1.Font('Size','24');
            Graphic1.Font('Bold','True');
            Graphic1.Font('StrikeOut','True');
            Graphic1.Font('Rotate','45');</example>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.GradientFill(System.String,System.String,System.String,System.Int32)">
            <summary>
            Fills the graphic with a gradient of colors starting from the color specified in startColor and ending with the one specified in endColor.
            Gradients usually look better in 24 bit JPEG images, as the colors that can be used with GIFs is more limiting.
            </summary>
            <param name="startColor"></param>
            <param name="endColor"></param>
            <param name="direction">See Sage.Grahics.GradientDirection for options</param>
            <param name="colors">Colors is a numeric parameter that specifies the number of colors to use when creating your gradient. This defaults to 64. The more colors used, the better the gradient effect.</param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.LineTo(System.Int32,System.Int32)">
            <summary>
            Draws a line from the current pen position up to, but not including the points specified by the numbers in X and Y. This method also changes the pen position to the co-ordinates specified in (X,Y). 
            The line is drawn using the current pen width and color.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.LoadBMP(System.String)">
            <summary>
            This method is the same as the LoadImage Graphic block method except that it enables you to specifically load a bitmap file. Loads the file specified as the new image. The ImageWidth and ImageHeight changes to the dimensions of the new image.
            </summary>
            <param name="fileName">Absolute server address of a BMP file to load.</param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.LoadImage(System.String)">
            <summary>
            Loads the file specified as the new image. The ImageWidth and ImageHeight changes to the dimensions of the new image. The following image formats are supported:
            BMP (Windows Bitmap), ICO (Icon), GIF (256 color compressed image), JPG (24 bit color compressed image), WMF / EMF (Windows / Enhanced Metafile).        
            </summary>
            <param name="fileName">Name of the image file. If you store the image in the Img folder of the CRM directory, you need only name the file. Otherwise, you must include the complete path.</param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.LoadJPG(System.String)">
            <summary>
            This method is the same as the LoadImage method except that it enables you to specifically load a JPEG file. Loads the file specified in text as the new image. The ImageWidth and ImageHeight changes to the dimensions of the new image.
            </summary>
            <param name="fileName">Absolute server address of JPG file to load.</param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.MoveTo(System.Int32,System.Int32)">
            <summary>
            Changes the pen position to co-ordinates specified in (X,Y). Use MoveTo to set the current pen position before calling LineTo.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.Pen(System.String,System.String)">
            <summary>
            Allows for various changes to be carried out on the current pen, depending on the value specified in Mode. Any line drawing commands, such as Arc and Rectangle, used after this command are affected.
            </summary>
            <param name="property">See Sage.Graphics.PenProperties for allowed values.</param>
            <param name="value"></param>
            <example>
            Graphic1 = new GraphicBlock();
            Graphic1.Pen('Style','DashDot');
            Graphic1.Pen('Color','Blue');
            Graphic1.Pen('Width','3');
            </example>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.PieShape(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a pie-shaped wedge on the image.
            The wedge is defined by the ellipse bound by the rectangle determined by the points (X1, Y1) and (X2, Y2). The section drawn is determined by two lines radiating from the center of the ellipse through the points (X3, Y3) and (X4, Y4).
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="x3"></param>
            <param name="y3"></param>
            <param name="x4"></param>
            <param name="y4"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.Rectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a rectangle.
            Specify the rectangle by giving the top left point at pixel coordinates (X1, Y1) and the bottom right point at (X2, Y2).The rectangle is drawn using the current pen width and color.
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.Resize(System.Int32,System.Int32)">
            <summary>
            Specifies the new width and height of your image. Unlike ImageWidth and ImageHeight, the image is scaled to this new size. You should not set the ImageWidth and ImageHeight properties in the same block as they take precedence.
            Note that WAP WBMP files are currently restricted to a maximum size of 96x96.
            </summary>
            <param name="width">Width to resize to.</param>
            <param name="height">Height to resize to.</param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.Rotate(System.Int32)">
            <summary>
            Use this function to rotate an image by a specified number of degree points. The corners of a rotated image are colored in the current brush color.
            </summary>
            <param name="angle">0-360, corresponds to degrees.</param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.RoundRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Use RoundRect to draw a rounded rectangle.
            The rectangle has edges defined by the points (X1,Y1), (X2,Y1), (X2,Y2), (X1,Y2), but the corners are shaved to create a rounded appearance. The curve of the rounded corners matches the curvature of an ellipse with width X3 and height Y3. The rounded rectangle is drawn using the current pen width and color.
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="x3"></param>
            <param name="y3"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.SaveAsJPG(System.String)">
            <summary>
            Saves the current image in the JPEG image file format. Images are stored using 16 million colors. 
            Note that JPEG images do not have an option for transparency or animation.
            </summary>
            <param name="fileName">File Name to save as. The system checks if a file of the same name exists. If it does and it contains the same extension (for example .gif or .jpg) only then does the save command overwrite the previous file.</param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.SaveAsWBMP(System.String)">
            <summary>
            Saves the current image in the WBMP image file format. This is the format used for images in WAP devices. The saved image is a version of the one currently being used but monochrome with a maximum resolution of 96x96 pixels and no transparency or animation.
            </summary>
            <param name="fileName">File name to save as.</param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.SetFlipHorizontal">
            <summary>
            Flips the image horizontally.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.SetFlipVertical">
            <summary>
            Flips the image vertically.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.SetFontColor(System.String)">
            <summary>
            Enables the color of the current font to be changed depending on the value specified. This is the same as using the Font(Mode, Value) except it refers only to the color mode. It is quicker to use if this is the only mode you are resetting.
            </summary>
            <param name="color">Color of font to use.</param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.SetFontSize(System.Int32)">
            <summary>
            Enables the size of the current font to be changed depending on the value specified. This is the same as using the Font(Mode, Value) except it refers only to the size mode. It is quicker to use if this is the only mode you are resetting.
            </summary>
            <param name="size">Size in pixels.</param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.SetGrayscaleOn">
            <summary>
            Converts an image to grayscale. It does not reduce the number of colors in use.
            </summary>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.SetMonochrome(System.Boolean)">
            <summary>
            Converts an image to and from using only two colors, black and white. Note that when an image is set to monochrome, the changes that occur are irreversible unless theimage is redrawn.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.SetPenColor(System.String)">
            <summary>
            Enables the color of the current pen to be changed depending on the value specified. This is the same as using the Pen(Mode, Value) except it refers only to the color property.
            </summary>
            <param name="color">Color of pen to use</param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.SetPenWidth(System.Int32)">
             <summary>
            Enables the width of the current pen to be changed depending on the value specified. This is the same as using the Pen(Mode, Value) except it refers only to the width property.
             </summary>
             <param name="width">Width of pen in pixels.</param>
             <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.TextOut(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            You use TextOut to write some text in your image. As an option, the text can be made transparent. By default, the text creates a blank rectangle where it is placed. It is written in coordinates specified in (X,Y) and is written in the current font color and size.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="text"></param>
            <param name="isTransparent"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.GraphicBlock.TextOutCenter(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Writes text to your image in much the same way as TextOut but can center it in a rectangle area defined by the parameters passed to it. If Ellipse is set to true, it can also add '…' to the end of text if that text cannot fit into the rectangle without being truncated.
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <param name="text"></param>
            <param name="isTransparent"></param>
            <param name="isEllipse"></param>
            <returns></returns>
        </member>
        <member name="P:Sage.CRM.Blocks.GraphicBlock.Border">
            <summary>
            Controls the thickness of the border around the image.
            The default value is 0.
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.GraphicBlock.Description">
            <summary>
            Specifies the description of the image. For browser users with image loading switched off, the description specified in this parameter takes its place.
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.GraphicBlock.HSpace">
            <summary>
            Controls the horizontal space above and below the image. The default value is 0.
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.GraphicBlock.ImageHeight">
            <summary>
            Specifies the height of the image. Dimensions in pixels. This is the height of the box in which the image is loaded.
            The default value is 0.
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.GraphicBlock.ImageWidth">
            <summary>
            Specifies the width of the image. Dimensions in pixels. This is the width of the box in which the image is loaded.
            The default value is 0.
            </summary>        
        </member>
        <member name="P:Sage.CRM.Blocks.GraphicBlock.SaveAsGifs">
            <summary>
            Determines whether an image should be stored as a GIF (256 colors) or a JPEG image (16m colors). If the server's display adapter is set to allow for 16m colors, this property is set to false by default, otherwise it is set to true.
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.GraphicBlock.VSpace">
            <summary>
            Controls the vertical space above and below the image.
            The default value is 0.
            </summary>
        </member>
        <member name="T:Sage.CRM.UI.ImageLink">
            <summary>
            Class to represent one ImageLink.
            </summary>
        </member>
        <member name="T:Sage.CRM.UI.Hyperlink">
            <summary>
            Class to represent one HTML Link.
            </summary>
        </member>
        <member name="T:Sage.CRM.UI.UIObject">
            <summary>
            Abstract class to represent a HTML object.
            </summary>
            <example> The following is an example of how
            the <c>UIObject</c> can be used to abstract
            a HTML Link.
            <code>
            public class Hyperlink : UIObject
            {
                private string _caption;
            
                public Hyperlink(string caption, string url)
                    : base("a") // HTML object
                {
                    this.URL = url;
                    this.Caption = caption;
                }
                public string URL {
                    get { return ReadAttribute("href"); }
                    set { AddAttribute("href", value); }
                }
                public string Caption {
                    get { return this._caption; }
                    set { this._caption = value; }
                }
                public override string HtmlBody() {
                    return Caption;
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Sage.CRM.UI.UIObject.#ctor(System.String)">
            <summary>
            Initializes a new instance of <b>UIObject</b>.
            </summary>
            <param name="htmlType">HTML Tag (e.g. table, div, input, img etc.).</param>
        </member>
        <member name="M:Sage.CRM.UI.UIObject.ReadAllAttributes">
            <summary>
            Returns all Attributes added to the element.
            </summary>
            <returns>Element Attributes in HTML Format.</returns>
        </member>
        <member name="M:Sage.CRM.UI.UIObject.AddAttribute(System.String,System.String)">
            <summary>
            Adds one attribute to the Element.
            </summary>
            <param name="name">Attribute name.</param>
            <param name="value">Attribute value.</param>
            <remarks>The HTML supports some attributes without value, such as
            READONLY on the INPUT tag. In this case you can add NULL as the attribute value.        
            </remarks>
        </member>
        <member name="M:Sage.CRM.UI.UIObject.RemoveAttribute(System.String)">
            <summary>
            Removes one attribute element.
            </summary>
            <param name="name">Attribute Name.</param>
        </member>
        <member name="M:Sage.CRM.UI.UIObject.ReadAttribute(System.String)">
            <summary>
            Returns the value of one attribute.
            </summary>
            <param name="name">Attribute Name.</param>
            <returns>
            <b>Element Value:</b> if the element exists.
            <b>Element Name:</b> if the element exists and the value is null.
            <b>Null:</b> if the element isn't exists.
            </returns>
        </member>
        <member name="M:Sage.CRM.UI.UIObject.HtmlBody">
            <summary>
            Determines the value which will be added into the HTML Tags.
            </summary>
            <returns>Value to be added into the HTML TAG.</returns>
        </member>
        <member name="M:Sage.CRM.UI.UIObject.ToHtml">
            <summary>
            Return the UIObject as a HTML string.
            </summary>
            <returns>HTML string</returns>
        </member>
        <member name="P:Sage.CRM.UI.UIObject.HTMLId">
            <summary>
            Gets or sets the HTML Element ID.
            </summary>
        </member>
        <member name="P:Sage.CRM.UI.UIObject.StyleName">
            <summary>
            Gets or sets the Style attribute to the HTML Element.
            </summary>
        </member>
        <member name="P:Sage.CRM.UI.UIObject.HtmlElement">
            <summary>
            Get the base HTML Tag set on constructor.
            </summary>
        </member>
        <member name="P:Sage.CRM.UI.UIObject.CloseElement">
            <summary>
            Specifies whether the element has a close tag. Some HTML element don't have 
            a close tag, e.g. IMG and INPUT.
            </summary>
            <remarks>The default value to this property is <b>true</b>.</remarks>
        </member>
        <member name="M:Sage.CRM.UI.Hyperlink.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <b>Hyperlink</b>.
            </summary>
            <param name="caption">Hyperlink Caption.</param>
            <param name="url">Hyperlink URL.</param>
        </member>
        <member name="M:Sage.CRM.UI.Hyperlink.HtmlBody">
            <summary>
            Returns the Hyperlink Body.
            </summary>
            <returns>Hyperlink Body as string.</returns>
        </member>
        <member name="P:Sage.CRM.UI.Hyperlink.URL">
            <summary>
            Gets or sets the Hyperlink URL.
            </summary>
        </member>
        <member name="P:Sage.CRM.UI.Hyperlink.Caption">
            <summary>
            Gets or sets the Hyperlink Caption.
            </summary>
        </member>
        <member name="M:Sage.CRM.UI.ImageLink.#ctor">
            <summary>
            Initializes a new instance of <b>ImageLink</b>.
            </summary>
        </member>
        <member name="M:Sage.CRM.UI.ImageLink.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <b>ImageLink</b>.
            </summary>
            <param name="image">File Name.</param>
            <param name="caption">ImageLink Caption.</param>
            <param name="url">URL Link.</param>
        </member>
        <member name="M:Sage.CRM.UI.ImageLink.HtmlBody">
            <summary>
            Returns the ImageLink body.
            </summary>
            <returns>ImageLink body string.</returns>
        </member>
        <member name="P:Sage.CRM.UI.ImageLink.Image">
            <summary>
            Gets or sets the file name.
            </summary>
        </member>
        <member name="P:Sage.CRM.UI.ImageLink.ImageObject">
            <summary>
            Gets ImageObject to access its attributes.
            </summary>
        </member>
        <member name="T:Sage.CRM.UI.Panel">
            <summary>
            Abstract class Panel, implements a collection of UIObject.
            </summary>
            <seealso cref="T:Sage.CRM.UI.VerticalPanel"/>
            <seealso cref="T:Sage.CRM.UI.HorizontalPanel"/>
        </member>
        <member name="M:Sage.CRM.UI.Panel.#ctor">
            <summary>
            Initializes a new instance of <b>Panel</b>.
            </summary>
        </member>
        <member name="M:Sage.CRM.UI.Panel.#ctor(Sage.CRM.UI.UIObject[])">
            <summary>
            Initializes a new instance of <b>Panel</b>
            </summary>
            <param name="items">Array of UIObject to be added to the Panel.</param>
        </member>
        <member name="M:Sage.CRM.UI.Panel.IndexOf(Sage.CRM.UI.UIObject)">
            <summary>
            Determines the index of a specific item in the IList.
            </summary>
            <param name="item">UIObject item.</param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.UI.Panel.Insert(System.Int32,Sage.CRM.UI.UIObject)">
            <summary>
            Inserts an item to the IList at the specified index.
            </summary>
            <param name="index">Index.</param>
            <param name="item">UIObject item.</param>
        </member>
        <member name="M:Sage.CRM.UI.Panel.RemoveAt(System.Int32)">
            <summary>
            Removes the IList item at the specified index.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="M:Sage.CRM.UI.Panel.Add(Sage.CRM.UI.UIObject)">
            <summary>
            Adds an item to the IList.
            </summary>
            <param name="item">UIObject item.</param>
        </member>
        <member name="M:Sage.CRM.UI.Panel.Clear">
            <summary>
            Removes all items from the IList.
            </summary>
        </member>
        <member name="M:Sage.CRM.UI.Panel.Contains(Sage.CRM.UI.UIObject)">
            <summary>
            Determines whether the IList contains a specific item.
            </summary>
            <param name="item">UIObject item.</param>
            <returns>True if the Object is found in the IList. Otherwise returns false.</returns>
        </member>
        <member name="M:Sage.CRM.UI.Panel.CopyTo(Sage.CRM.UI.UIObject[],System.Int32)">
            <summary>
            Copies the items of the IList to an Array, starting at a particular Array index.
            </summary>
            <param name="array">One-dimensional Array that is the destination of the elements.</param>
            <param name="arrayIndex">Start index.</param>
        </member>
        <member name="M:Sage.CRM.UI.Panel.Remove(Sage.CRM.UI.UIObject)">
            <summary>
            Removes one item from the IList.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.UI.Panel.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sage.CRM.UI.Panel.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">Index.</param>
            <returns>UIObject element.</returns>
        </member>
        <member name="P:Sage.CRM.UI.Panel.Count">
            <summary>
            Gets the number of elements contained in IList.
            </summary>
        </member>
        <member name="P:Sage.CRM.UI.Panel.IsReadOnly">
            <summary>
            Gets a value indicating whether the IList is read-only.
            </summary>
        </member>
        <member name="T:Sage.CRM.UI.ImageObject">
            <summary>
            Class to represent an Image Object.
            </summary>
        </member>
        <member name="M:Sage.CRM.UI.ImageObject.#ctor(System.String)">
            <summary>
            Initializes a new instance of <b>ImageObject</b>.
            </summary>
            <param name="image">Image name.</param>
        </member>
        <member name="M:Sage.CRM.UI.ImageObject.HtmlBody">
            <summary>
            Returns the ImageObject body.
            </summary>
            <returns>String.Empty</returns>
        </member>
        <member name="P:Sage.CRM.UI.ImageObject.Image">
            <summary>
            Gets or Sets the Image file name.
            </summary>
        </member>
        <member name="T:Sage.CRM.Data.CommunicationEntity">
            <summary>
            Used to create new appointments and tasks.
            This is a specialised version of an Entity.
            <see cref="M:Sage.CRM.WebObject.Web.CreateAppointment"/>
            <see cref="M:Sage.CRM.WebObject.Web.CreateTask"/>
            </summary>
        </member>
        <member name="T:Sage.CRM.Data.Entity">
            <summary>
            A more intelligent version of the Record class, this is used to update CRM Entities.
            <see cref="M:Sage.CRM.WebObject.Web.FindEntity(System.String,System.String,System.String)"/>
            <seealso cref="M:Sage.CRM.WebObject.Web.CreateEntity(System.String)"/>        
            </summary>
        </member>
        <member name="T:Sage.CRM.Data.Record">
            <summary>
            Used to create and update records from CRM tables.
            <see cref="M:Sage.CRM.WebObject.Web.FindRecord(System.String,System.String)"/>
            <seealso cref="M:Sage.CRM.WebObject.Web.CreateRecord(System.String)"/>
            </summary>
        </member>
        <member name="M:Sage.CRM.Data.Record.#ctor(System.String)">
            <summary>
            Initializes a new instance of <b>Record</b>.
            </summary>
            <param name="tableName">Table Name.</param>
        </member>
        <member name="M:Sage.CRM.Data.Record.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <b>Record</b>.
            </summary>
            <param name="tableName">Table Name.</param>
            <param name="machineName">Machine Name.</param>
        </member>
        <member name="M:Sage.CRM.Data.Record.Finalize">
            <summary>
            Disposes of a Record object.
            </summary>
        </member>
        <member name="M:Sage.CRM.Data.Record.Eof">
            <summary>
            Used to check if there are any records remaining.
            </summary>
            <returns>true/false</returns>
        </member>
        <member name="M:Sage.CRM.Data.Record.GetFieldAsString(System.String)">
            <summary>
            Gets the value from the database for the specified field.
            </summary>
            <param name="fieldName">The field name whose value to retrieve.</param>
            <returns>The String value or Empty String</returns>
        </member>
        <member name="M:Sage.CRM.Data.Record.GetFieldAsStringOrNull(System.String)">
            <summary>
            Gets the value from the database for the specified field.
            This function was add for keep the compatibility with 1.0 version and
            instead of convert the COM result to String it will try to cast and
            may return null for empty strings.
            </summary>
            <param name="fieldName">The field name whose value to retrieve.</param>
            <returns>Returns the String value or null if the value is empty</returns>
        </member>
        <member name="M:Sage.CRM.Data.Record.GetFieldAsDateTime(System.String)">
            <summary>
            Gets the value from the database as a datetime.
            </summary>
            <param name="fieldName">Name of the field. Must be a date time field.</param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Data.Record.GetFieldAsObject(System.String)">
            <summary>
            Gets the value from a field as an object.
            </summary>
            <param name="fieldName">The field name whose value to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Data.Record.GetFieldAsInt(System.String)">
            <summary>
            Gets field value from the database as an integer.
            </summary>
            <param name="fieldName">Field name whose value to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Data.Record.GetFieldAsDouble(System.String)">
            <summary>
            Get field value as a floating point number.
            </summary>
            <param name="fieldName">Field name whose value to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Data.Record.SetField(System.String,System.String)">
            <summary>
            An overload to set a text value into a field.
            Values are stored and saved when SaveChanges is called.
            </summary>
            <param name="fieldName">Field name of field to update.</param>
            <param name="fieldValue">Value to set into field.</param>
        </member>
        <member name="M:Sage.CRM.Data.Record.SetField(System.String,System.Double)">
            <summary>
            An overload to set a floating point value into a field.
            Values are stored and saved when SaveChanges is called.
            </summary>
            <param name="fieldName">Field name of field to update.</param>
            <param name="fieldValue">Floating point value to save in field.</param>
        </member>
        <member name="M:Sage.CRM.Data.Record.SetField(System.String,System.DateTime)">
            <summary>
            An overload to set a datetime value into a field.
            Values are stored and saved when SaveChanges is called.
            </summary>
            <param name="fieldName">Field name of field to update.</param>
            <param name="fieldValue">DateTime value to save in field.</param>   
        </member>
        <member name="M:Sage.CRM.Data.Record.SetField(System.String,System.Int32)">
            <summary>
            An overload to set an integer value into a field.
            Values are stored and saved when SaveChanges is called.
            </summary>
            <param name="fieldName">Field name of field to update.</param>
            <param name="fieldValue">Integer value to save in field.</param>
        </member>
        <member name="M:Sage.CRM.Data.Record.SetWorkflowInfo(System.String,System.String)">
            <summary>
            Specifies what workflow state the record should be in when it is saved.
            Values are stored and applied when SaveChanges is called.
            </summary>
            <param name="workflowName">The name of the workflow as it appears within the Admin workflow configuration screen.</param>
            <param name="workflowState">The name of the state within the given workflow in which the record should be saved.</param>
        </member>
        <member name="M:Sage.CRM.Data.Record.SaveChanges">
            <summary>
            Updates the database with the new or updated values (as set by SetField).
            If this object was created with a FindXX method then that record will be updated.
            If this object was created with a NewXX method then a new record will be inserted.
            </summary>
        </member>
        <member name="M:Sage.CRM.Data.Record.GoToFirst">
            <summary>
            Reopens the query so it is pointing at the first record in the original query.
            </summary>
        </member>
        <member name="M:Sage.CRM.Data.Record.GoToNext">
            <summary>
            Moves to the next record if the original query selected more than 1 record.
            </summary>
        </member>
        <member name="M:Sage.CRM.Data.Record.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Sage.CRM.Data.Record.DeleteRecord">
            <summary>
            If this is set to true then SaveChanges() will delete the current record.
            </summary>
        </member>
        <member name="P:Sage.CRM.Data.Record.IdField">
            <summary>
            The name of the field within the table that holds the ID value.
            </summary>
        </member>
        <member name="P:Sage.CRM.Data.Record.RecordCount">
            <summary>
            The number of records that the record object is currently pointing at.
            </summary>
        </member>
        <member name="P:Sage.CRM.Data.Record.RecordId">
            <summary>
            A read-only property to get the ID of the current record.
            </summary>
        </member>
        <member name="P:Sage.CRM.Data.Record.OrderBy">
            <summary>
            Sets "order by" fields for records.
            </summary>
        </member>
        <member name="M:Sage.CRM.Data.Entity.#ctor(System.String)">
            <summary>
            Initializes a new instance of <b>Entity</b>.
            </summary>
            <param name="entityName">Entity Name.</param>
        </member>
        <member name="M:Sage.CRM.Data.Entity.Finalize">
            <summary>
            Destructor - releases the references to Entity COM objects. 
            </summary>
        </member>
        <member name="M:Sage.CRM.Data.Entity.SaveChanges">
            <summary>
            Saves changes to the record specified in the entity and all it's collections.
            If the object is new then a new record will be inserted.
            </summary>
        </member>
        <member name="M:Sage.CRM.Data.Entity.GetSubCollection(System.String)">
            <summary>
            Returns an EntityCollection object that is a list of the
            related records for this entity.
            E.g. a Company entity will have a sub collection of Email records.
            </summary>
            <param name="EntityName">Name of the sub entity.</param>
            <returns>EntityCollection.</returns>
        </member>
        <member name="M:Sage.CRM.Data.CommunicationEntity.AddUser(System.String)">
            <summary>
            Adds a user to a communication using their logon ID.
            </summary>
            <param name="userLogon">LogonId of user to add.</param>
            <returns>Entity referencing the user added.</returns>
        </member>
        <member name="M:Sage.CRM.Data.CommunicationEntity.AddUser(System.Int32)">
            <summary>
            Adds a user to a communication using their user ID.
            </summary>
            <param name="userID">User ID of user to add.</param>
            <returns>Entity referencing the user added.</returns>
        </member>
        <member name="T:Sage.Mode">
            <summary>
            List of modes on a page.
            </summary>
        </member>
        <member name="T:Sage.DataSource">
            <summary>
            CRM Data Source
            </summary>
        </member>
        <member name="T:Sage.PermissionType">
            <summary>
            List of permission types used for security.    
            </summary>
        </member>
        <member name="T:Sage.ParamNames">
            <summary>
            System Parameter names used in GetParam to check the value of system settings.
            </summary>
        </member>
        <member name="T:Sage.UserOptions">
            <summary>
            Available User Preferences that can be checked from the UserSession object.
            </summary>
        </member>
        <member name="F:Sage.UserOptions.DefaultToDo">
            <summary>
            Setting to define what screen a user sees on first logon.
            </summary>
        </member>
        <member name="F:Sage.UserOptions.CalendarView">
            <summary>
            Setting to define the default calendar view for the user.
            </summary>
        </member>
        <member name="F:Sage.UserOptions.UseAMPM">
            <summary>
            Setting to define if a user uses AM/PM or not.
            </summary>
        </member>
        <member name="F:Sage.UserOptions.DateFormat">
            <summary>
            Setting to define the user's preference for date formatting.
            </summary>
        </member>
        <member name="F:Sage.UserOptions.TimeFormat">
            <summary>
            Setting to define the user's preference for time formatting.
            </summary>
        </member>
        <member name="F:Sage.UserOptions.WeekStartDay">
            <summary>
            Setting to define the user's preference for first day of the week (Sunday is 1).
            </summary>
        </member>
        <member name="F:Sage.UserOptions.InitialFindScreen">
            <summary>
            Setting to define the user's preference for default find screen.
            </summary>
        </member>
        <member name="F:Sage.UserOptions.GridSize">
            <summary>
            Setting to define the user's preference for how many rows to show in grids/lists.
            </summary>
        </member>
        <member name="F:Sage.UserOptions.DecimalPoint">
            <summary>
            Setting to define the user's preference for decimal point symbol.
            </summary>
        </member>
        <member name="F:Sage.UserOptions.DecimalPlaces">
            <summary>
            Setting to define the user's preference for number of decimal places shown.
            </summary>
        </member>
        <member name="F:Sage.UserOptions.ThousandSeparator">
            <summary>
            Setting to define the user's preference for the thousand separator symbol.
            </summary>
        </member>
        <member name="F:Sage.UserOptions.DisplayCurrency">
            <summary>
            Settting to define the user's preference for currency.
            </summary>
        </member>
        <member name="F:Sage.UserOptions.LeadPipeline">
            <summary>
            Setting to define if Lead pipeline should be display for a user (Y/N).
            </summary>
        </member>
        <member name="F:Sage.UserOptions.OpportunityPipeline">
            <summary>
            Setting to define if Opportunity pipeline should be display for a user (Y/N).
            </summary>
        </member>
        <member name="F:Sage.UserOptions.CasePipeline">
            <summary>
            Setting to define if Cases pipeline should be display for a user (Y/N).
            </summary>    
        </member>
        <member name="F:Sage.UserOptions.SolutionsInToDo">
            <summary>
            Setting to define if Solutions should be shown in ToDo for a user.
            </summary>
        </member>
        <member name="F:Sage.UserOptions.OutboundCallsinToDo">
            <summary>
            Setting to define if Outbound Calls should be show in Todo for a user.
            </summary>
        </member>
        <member name="T:Sage.EntryTypes">
            <summary>
            Values to use when creating a new Entry with CreateEntry.
            </summary>
        </member>
        <member name="F:Sage.EntryTypes.Text">
            <summary>
            Single line text entry.
            </summary>
        </member>
        <member name="F:Sage.EntryTypes.MultiText">
            <summary>
            Multi line text entry.
            </summary>
        </member>
        <member name="F:Sage.EntryTypes.EmailText">
            <summary>
            E-mail address.
            </summary>
        </member>
        <member name="F:Sage.EntryTypes.UrlText">
            <summary>
            Web URL address.
            </summary>
        </member>
        <member name="F:Sage.EntryTypes.Select">
            <summary>
            Selection from lookup (combo box).
            </summary>
        </member>
        <member name="F:Sage.EntryTypes.UserSelect">
            <summary>
            User-select entry type (the list of users).
            </summary>
        </member>
        <member name="F:Sage.EntryTypes.ChannelSelect">
            <summary>
            Channel (team) Select entry type. 
            </summary>
        </member>
        <member name="F:Sage.EntryTypes.ProductSelect">
            <summary>
            Select from product table.
            </summary>
        </member>
        <member name="F:Sage.EntryTypes.SearchSelect">
            <summary>
            Search Select entry type.
            </summary>
        </member>
        <member name="F:Sage.EntryTypes.SelectTable">
            <summary>
            SelectTable entry type. Similar to the Intelligent Select entry type.
            </summary>
        </member>
        <member name="F:Sage.EntryTypes.MultiSelect">
            <summary>
            Multiple selection from lookup (combo box).
            </summary>
        </member>
        <member name="F:Sage.EntryTypes.Integer">
            <summary>
            Integer entry type.
            </summary>
        </member>
        <member name="F:Sage.EntryTypes.DateTime">
            <summary>
            Date and time entry type. 
            </summary>
        </member>
        <member name="F:Sage.EntryTypes.Date">
            <summary>
            Date only entry type.
            </summary>
        </member>
        <member name="F:Sage.EntryTypes.CheckBox">
            <summary>
            Checkbox.
            </summary>
        </member>
        <member name="F:Sage.EntryTypes.TargetListSelect">
            <summary>
            Target list selection.
            </summary>
        </member>
        <member name="F:Sage.EntryTypes.Password">
            <summary>
            Password entry type.
            </summary>
        </member>
        <member name="F:Sage.EntryTypes.Currency">
            <summary>
            Currency.
            </summary>
        </member>
        <member name="F:Sage.EntryTypes.Territory">
            <summary>
            Territory selection.
            </summary>
        </member>
        <member name="F:Sage.EntryTypes.AdvSearchSelect">
            <summary>
            Advanced Search Select field.
            </summary>
        </member>
        <member name="F:Sage.EntryTypes.CustomDotNet">
            <summary>
            Type used for custom .NET entries.
            </summary>
        </member>
        <member name="T:Sage.DefaultTypes">
            <summary>
            Values to be used as DefaultType property on an Entry object.
            </summary>
        </member>
        <member name="F:Sage.DefaultTypes.NoDefault">
            <summary>
            The Entry has no default. 
            </summary>
        </member>
        <member name="F:Sage.DefaultTypes.DefaultValue">
            <summary>
            The Entry will use the value set in the DefaultValue property.
            </summary>
        </member>
        <member name="F:Sage.DefaultTypes.CurrentUserId">
            <summary>
            For entrys that are UserSelects, default to the currently logged-on user.
            </summary>
        </member>
        <member name="F:Sage.DefaultTypes.CurrentDateTime">
            <summary>
            For entrys that are DateTime, default to current date and time (for the current user).
            </summary>
        </member>
        <member name="F:Sage.DefaultTypes.CurrentDatePlus30">
            <summary>
            For entrys that are DateTime, default to current date and time plus 30 mins (for the current user).
            </summary>
        </member>
        <member name="T:Sage.CaptionPositions">
            <summary>
            Values to be used as CaptionPos on an Entry object.
            </summary>
        </member>
        <member name="F:Sage.CaptionPositions.Top">
            <summary>
            Puts the caption on top of the values.
            </summary>
        </member>
        <member name="F:Sage.CaptionPositions.Left">
            <summary>
            Puts the caption to the left of the values.
            </summary>
        </member>
        <member name="F:Sage.CaptionPositions.LeftAlignedLeft">
            <summary>
            Puts the caption to the left of the values. The captions are left aligned and values are left aligned.
            </summary>
        </member>
        <member name="F:Sage.CaptionPositions.LeftAlignedRight">
            <summary>
             Puts the caption to the left of the values. The captions are right aligned and values are left aligned.
            </summary>
        </member>
        <member name="T:Sage.PermissionLevels">
            <summary>
            User's permission levels in relation to Info Admin rights.
            </summary>
        </member>
        <member name="F:Sage.PermissionLevels.iPerLevel_None">
            <summary>
            User has no Info Admin rights.
            </summary>
        </member>
        <member name="F:Sage.PermissionLevels.iPerLevel_View">
            <summary>
            User has "view only" Info Admin rights.
            </summary>
        </member>
        <member name="F:Sage.PermissionLevels.iPerLevel_Update">
            <summary>
            User has "update records only" Info Admin rights.
            </summary>
        </member>
        <member name="F:Sage.PermissionLevels.iPerLevel_Full">
            <summary>
            User has full Info Admin rights. 
            </summary>
        </member>
        <member name="T:Sage.InfoAdminRights">
            <summary>
            The List of Info Admin rights that a user has. 
            </summary>
        </member>
        <member name="T:Sage.AddressTypes">
            <summary>
            Types to use when adding addresses to Emails.
            </summary>
        </member>
        <member name="F:Sage.AddressTypes.TO">
            <summary>
            The main "To:" address field of an email.
            </summary>
        </member>
        <member name="F:Sage.AddressTypes.CC">
            <summary>
            The "CC" address field of an email.
            </summary>
        </member>
        <member name="F:Sage.AddressTypes.BCC">
            <summary>
            The "BCC" address field of an email.
            </summary>
        </member>
        <member name="T:Sage.CRM.Blocks.PipelineGraphicBlock">
            <summary>
            The PipelineGraphicBlock is an implementation of the Graphic Block that includes extra functionality.
            You use the PipelineGraphicBlock to create cross-sectional diagrams that can represent data from an Application Extension or data from a table.
            You use the parameters of this block to change the look and feel of the pipeline.
            </summary>
        </member>
        <member name="M:Sage.CRM.Blocks.PipelineGraphicBlock.#ctor">
            <summary>
            Initializes a new instance of <b>PipelineGraphicBlock</b>.
            </summary>
        </member>
        <member name="M:Sage.CRM.Blocks.PipelineGraphicBlock.#ctor(System.String)">
            <summary>
            Initializes a new instance of <b>PipelineGraphicBlock</b>.
            </summary>
            <param name="blockName">Block Name.</param>
        </member>
        <member name="M:Sage.CRM.Blocks.PipelineGraphicBlock.Finalize">
            <summary>
            Destructor for the PipelineGraphicBlock.
            </summary>
        </member>
        <member name="M:Sage.CRM.Blocks.PipelineGraphicBlock.AddPipeEntry(System.String,System.Int32)">
            <summary>
            The easiest way to create a pipeline diagram is to build it up one section at a time using the AddPipeEntry command.
            </summary>
            <param name="name">The name of the section of the pipe that is shown in the Legend for the pipeline.</param>
            <param name="value">The value determines the size that this particular pipeline takes. Each section of pipe fills a percentage of the image width that is directly determined by its value.</param>
        </member>
        <member name="M:Sage.CRM.Blocks.PipelineGraphicBlock.AddPipeEntry(System.String,System.Int32,System.String,System.String)">
            <summary>
            Overload of AddPipeEntry to allow description and URLs to be added to the pipeline sections.
            </summary>
            <param name="name">The name of the section of the pipe that is shown in the Legend for the pipeline.</param>
            <param name="value">The value determines the size that this particular pipeline takes. Each section of pipe fills a percentage of the image width that is directly determined by its value.</param>
            <param name="description">The text that appears when the user hovers over that section of pipe.</param>
            <param name="url">The Web address (or ASP page) to link to should the user click on that section of the pipe.</param>
        </member>
        <member name="M:Sage.CRM.Blocks.PipelineGraphicBlock.AddPipeEntry(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Overload of AddPipeEntry to allow a color index to be set on a section of the pipeline
            </summary>
            <param name="name">The name of the section of the pipe that is shown in the Legend for the pipeline.</param>
            <param name="value">The value determines the size that this particular pipeline takes. Each section of pipe fills a percentage of the image width that is directly determined by its value.</param>
            <param name="description">The text that appears when the user hovers over that section of pipe.</param>
            <param name="url">The Web address (or ASP page) to link to should the user click on that section of the pipe.</param>
            <param name="colorIndex">Index of color.</param>
            <example>
            <code>
                SageCrmPipelineGraphicBlock MyPipe;
                MyPipe = New PipelineGraphicBlock();
                MyPipe.AddPipeEntry("Sold", 100,"100items sold", "http://www.eware.com");
                MyPipe.AddPipeEntry("Prospect", 40,"40prospects", "http://www.yahoo.com");
                AddContent(MyPipe.Execute());
            </code>
            </example>
        </member>
        <member name="M:Sage.CRM.Blocks.PipelineGraphicBlock.PipelineStyle(Sage.CRM.Graphics.PipelineStyles,System.String)">
            <summary>
            You can set various parameters of the PipelineGraphic block to change the appearance and size of individual sections of the pipeline. These parameters include adding gradients, displaying legends and adjusting diameters.
            </summary>
            <param name="property">Sage.Graphics.PipelineStyles</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.PipelineGraphicBlock.PipelineStyle(System.String,System.String)">
            <summary>
            You can set various parameters of the PipelineGraphic block to change the appearance and size of individual sections of the pipeline. These parameters include adding gradients, displaying legends and adjusting diameters.
            </summary>
            <param name="property">See Sage.Graphics.PipelineStyles for details</param>
            <param name="value"></param>
            <returns></returns>
            <example>
            SageCrmPipelineGraphicBlock MyPipe;
            MyPipe = new PipelineGraphicBlock();
            MyPipe.AddPipeEntry("Sold", 100,"100items sold", "http://www.eware.com");
            MyPipe.AddPipeEntry("Prospect", 40,"40prospects", "http://www.yahoo.com");
            MyPipe.PipelineStyle("Shape","Circle");
            MyPipe.PipelineStyle("UseGradient","False");
            MyPipe.PipelineStyle("Animated","False");
            MyPipe.PipelineStyle("Selected","Sold");
            MyPipe.PipelineStyle("SelectedWidth","10");
            MyPipe.PipelineStyle("SelectedHeight","10");
            MyPipe.PipelineStyle("PipeWidth","40");
            MyPipe.PipelineStyle("PipeHeight","60");
            MyPipe.PipelineStyle("ShowLegend","True");
            AddContent(MyPipe.Execute());
            </example>
        </member>
        <member name="M:Sage.CRM.Blocks.PipelineGraphicBlock.ChooseBackground(System.Int32)">
            <summary>
            Sets the background of the pipeline graphic. Default is white.
            </summary>
            <param name="value">Integer value for different background images. The images are loaded by default into the CRM images directory during installation.</param>
            <returns></returns>
        </member>
        <member name="P:Sage.CRM.Blocks.PipelineGraphicBlock.Summary">
            <summary>
            Enables you to enter HTML text that displays to the right of a pipeline section when the section is selected. You can also use this property to display a legend/description of what is selected.
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.PipelineGraphicBlock.Selected">
            <summary>
            Sets a section of the pipeline so that you can alter the style of that section when it is clicked on. 
            Value is the number of the section that you are selecting.
            </summary>
        </member>
        <member name="T:Sage.CRM.UI.VerticalPanel">
            <summary>
            Render the content objects in one single vertical column.
            </summary>
        </member>
        <member name="M:Sage.CRM.UI.VerticalPanel.#ctor">
            <summary>
            Initializes a new instance of <b>VerticalPanel</b>.
            </summary>
        </member>
        <member name="M:Sage.CRM.UI.VerticalPanel.#ctor(Sage.CRM.UI.UIObject[])">
            <summary>
            Initializes a new instance of <b>VerticalPanel</b>.
            </summary>
            <param name="items">Array of UIObject to be added to the VerticalPanel.</param>
        </member>
        <member name="M:Sage.CRM.UI.VerticalPanel.HtmlBody">
            <summary>
            Returns the HTMLBody of the VerticalPanel.
            </summary>
            <returns>HTMLBody string.</returns>
        </member>
        <member name="T:Sage.CRM.WebObject.DataPageEdit">
            <summary>
             Page used to Edit an existing record.
             Shows one or more entry boxes in edit mode.
             Shows Save button and Continue button.
            </summary>
        </member>
        <member name="T:Sage.CRM.WebObject.DataPageBase">
            <summary>
            Abstract class for all Data Pages.
            </summary>
        </member>
        <member name="T:Sage.CRM.WebObject.Web">
            <summary>
            The <c>Web</c> class is the basic building block for your custom CRM Application Extension in .NET.
            <remarks>
              <para>
                The <c>Web</c> class contains methods to add content to your CRM web page.
              </para>
            </remarks>    
            </summary>      
        </member>
        <member name="F:Sage.CRM.WebObject.Web._modeDefault">
            <summary>
            This is the mode that will be set when Dispatch.EitherField("HiddenMode") return blank. The default value for this property is Mode.View.
            The specialized class should set this value on the constructor.
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.BuildContents">
            <summary>
            This is the main method that is used to create a web page. Override this to build your own page. The main function of this method is to use the AddContent() method to build up the HTML that creates the screen that is shown to the user.
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.Content(System.String)">
            <summary>
            Get the value for a field from the query fields or the content fields.
            Queryfields are checked first.
            </summary>
            <param name="fieldName">The fieldname whose value to return.</param>
            <returns>The value in the field. If the field is not found then a blank string.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.AddContent(System.String)">
            <summary>
            Add a string of HTML text to the page content that will be displayed to user.
            </summary>
            <param name="contentString">Any HTML string to be added to the page.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.AddContent(Sage.CRM.UI.UIObject)">
            <summary>
            Add one UIObject to the page content that will be displayed to user.
            This is the main method used to display query results to the user.
            </summary>
            <param name="value">UIObject to be added to the page.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.AddContent(System.String,System.String)">
            <summary>
            This an overload of AddContent to display the HTML text with a specified style applied. 
            Style can be any style from the CRM style sheet (Sage.Styles).
            </summary>
            <param name="contentString">Any HTML string to be added to the page.</param>
            <param name="crmStyle">Any CRM style to apply to the content (see Sage.Styles for full list).</param>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.AddButtonContent(System.String)">
            <summary>
            Add a HTML string to the section of page underneath the buttons.
            </summary>
            <param name="content">HTML to be added.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.AddConfirmButton(System.String,System.String,System.String)">
            <summary>
            Adds a button that asks the user for confirmation before submitting a form.
            </summary>
            <param name="caption">Caption for the button (will be translated with Button family).</param>
            <param name="image">Image for the button (must exist in img\button folder).</param>        
            <param name="question">Text of question to show to the user in an alert box.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.AddConfirmButton(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds a button that asks the user for confirmation before inserting a value into a content field and then submitting the form.
            </summary>
            <param name="caption">Caption for the button (will be translated with Button family).</param>
            <param name="image">Image for the button (must exist in img\button folder).</param>
            <param name="question">Text of question to show to user in alert box.</param>
            <param name="fieldName">Name of any field that has been added within the &lt;FORM&gt; tag</param>
            <param name="fieldValue">Value to set into the field before submitting the form</param>        
        </member>
        <member name="M:Sage.CRM.WebObject.Web.AddSubmitButton(System.String,System.String,System.String)">
            <summary>
            Adds a submit button to the list of buttons on the page.
            </summary>
            <param name="caption">Caption for the button. This will be translated with the Button family.</param>
            <param name="image">The name of the image file to use for the button. The file must reside in the img\buttons folder of the install.</param>
            <param name="onSubmit">Javascript that is to run in the onSubmit event of the button.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.AddSubmitButton(System.String,System.String,System.String,System.String)">
            <summary>
            Adds a button that inserts a value into a content field and submits a form.
            </summary>
            <param name="caption">Caption for the button. This will be translated with the Button family.</param>
            <param name="image">The name of the image file to use for the button. The file must reside in the img\buttons folder of the install.</param>
            <param name="fieldName">Name of any field that has been added within the &lt;FORM&gt; tag.</param>
            <param name="fieldValue">Value to set into the field before submitting the form.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.AddUrlButton(System.String,System.String,System.String)">
            <summary>
            Add a URL button to the list of buttons on the page. When the button is clicked the page location is set to the URL.
            </summary>
            <param name="caption">Caption for the button. This will be translated with the Button family.</param>
            <param name="image">The name of the image file to use for the button. The file must reside in the img\buttons folder of the install.</param>
            <param name="url">The URL to go to when the button is clicked.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.AddWorkflowButtons(System.String)">
            <summary>
            Adds workflow buttons for an entity to the the page.
            </summary>
            <param name="entityName">Entity name for which to display buttons.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.AddError(System.String)">
            <summary>
            Adds a HTML string to the error content. Any strings added here will be displayed in a red banner at the top of the page.
            </summary>
            <param name="errorString">The error string to be added.</param>
            <example>AddError("Validation failed, please re-enter details");</example>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.AddToHeader(System.String)">
            <summary>
            Adds HTML content to the &lt;HEAD&gt; section of the page.
            </summary>
            <param name="html">HTML string to be added.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.AddHeaderContent(System.String)">
            <summary>
            Adds HTML content to the &lt;BODY&gt; tag. This HTML content will be added to the page before any content that is added with AddContent.
            </summary>
            <param name="content">HTML string to be added.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.AddHeaderScript(System.String)">
            <summary>
            Adds Javascript to the &lt;SCRIPT&gt; section of the page.
            </summary>
            <param name="script">Valid Javascript.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.AddInfo(System.String)">
            <summary>
            Adds text to the "Info Content" of the page. The Info Content is text that is displayed in a blue line at the top of the page.
            </summary>
            <param name="infoString">The text to be added.</param>
            <example>AddInfo("This company cannot be deleted");</example>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.AddTopContent(System.String)">
            <summary>
            Adds HTML to the top content section of the CRM page.
            </summary>
            <param name="topString">HTML to be added to the top content.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.AddTopContent(Sage.CRM.UI.UIObject)">
            <summary>
            Adds HTML to the top content section of the CRM page.
            </summary>
            <param name="value">An UIObject to be added to the top content area.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.CreateEntity(System.String)">
            <summary>
            Creates an instance of an Entity object that can be used to insert a new entity.
            </summary>
            <param name="entityName">The name of the entity that you want to create.</param>
            <returns>An Entity object.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.CreateAppointment">
            <summary>
            Creates a new appointment object. User can fill in details and click Save to create a new appointment on the calendar. Note appointments should be used for communications that have more than one user.
            </summary>
            <returns>CommunicationEntity.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.CreateTask">
            <summary>
            Creates a new Task object. The user can fill in details and click Save to create a new task on the calendar.
            </summary>
            <returns>CommunicationEntity.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.FindEntity(System.String,System.String,System.String)">
            <summary>
            Returns an Entity Object and record(s) for the specified entity. This can be used to update records.
            </summary>
            <returns>An Entity object.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.FindCurrentRecord(System.String)">
            <summary>
            Returns a record object for the current record. It retrieves the current record based on the current context. 
            </summary>
            <param name="tableName"></param>
            <returns>A Record object.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.FindCurrentEntity(System.String)">
            <summary>
            Returns an Entity object representing the current record if applicable.        
            </summary>
            <param name="entityName"></param>
            <returns>An Entity object</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.FindRecord(System.String,System.String)">
            <summary>
            Returns a Record object representing the record or records specified by the WHERE clause given, within the specified table.
            </summary>
            <param name="tableName">Table name to select from.</param>
            <param name="whereClause">Valid SQL WHERE clause to use to select record or records.</param>
            <returns>A Record object.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.GetContextInfo(System.String)">
            <summary>
            Returns the current ID (based on the current context) of the given entity. 
            </summary>
            <param name="context">Name of any main entity within CRM.</param>
            <returns>The ID of the entity.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.GetContextInfo(System.String,System.String)">
            <summary>
            Returns a field value for a given entity name and field name in the current context.
            </summary>
            <param name="context">Name of any main entity within CRM.</param>
            <param name="fieldname">Name of any field that exists on the entity.</param>
            <returns>The value of that field in the current context.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.GetCustomEntityTopFrame(System.String)">
            <summary>
            Returns the HTML for top content based on the entity name passed in.
            </summary>
            <param name="sEntityName"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.GetJsString(System.String)">
            <summary>
            Transforms a string into a safe string to use in Javascript, escaping all neccessary characters.
            </summary>
            <param name="inString">String to transform.</param>
            <returns>String with characters escaped.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.GetNextId(System.String)">
            <summary>
            Retrieves the next ID for a table.
            </summary>
            <param name="tableName">The table for which to get the next ID. Must be a standard CRM table within the CRM database.</param>
            <returns>The next ID value.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.GetNextId(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves the next ID for a table in another database.
            </summary>        
            <param name="tableName"></param>
            <param name="driver"></param>
            <param name="server"></param>
            <param name="databaseName"></param>
            <param name="userName"></param>
            <param name="password"></param>
            <returns>The next ID value.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.GetQuery">
            <summary>
            Gets an instance of a QuerySelect that can be used to select records from the database.
            </summary>
            <returns>A QuerySelect object.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.GetTabs">
            <summary>
            Adds tabs for the current context to the page.
            </summary>        
        </member>
        <member name="M:Sage.CRM.WebObject.Web.GetTabs(System.String)">
            <summary>
            An overload of GetTabs to add the specific tab group to the page.
            </summary>
            <param name="groupName">Name of tab group.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.GetTabs(System.String,System.String)">
            <summary>
            GetTabs to add the specific tab group to the page and highlight one tab
            </summary>
            <param name="groupName">Name of tab group</param>
            <param name="highlight">Tab caption (no translated), it can be find on table Custom_Tabs.Tabs_Caption.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.AddTabHead(System.String)">
            <summary>
            Adds a heading where the tabs usually appear.
            </summary>        
            <param name="Caption">Caption to be shown.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.LogMessage(System.String)">
            <summary>
            Logs a message to the standard .NET log located in the CRM logs folder.
            This message will always be logged regardless of system logging level.
            </summary>
            <param name="message">Message to put into the log file. All messages are appended onto new line and have the current date/time prepended to them.</param>
            <returns>True if successfull.</returns>        
        </member>
        <member name="M:Sage.CRM.WebObject.Web.LogMessage(System.String,System.Int32)">
            <summary>
            Logs a message to the standard .NET log located in crm logs folder. Log files can be viewed in Admin/System/Logging.
            The message will only be logged if the level specified is greater than or equal to the current .NET logging level as set in Admin/System/Logging.
            </summary>
            <param name="message">Message to put into file. New line and current date time will be automatically appended.</param>
            <param name="level">The level at which system logging must be set in order for this message to be logged.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.LogMessage(System.String,System.String,System.Int32)">
            <summary>
            Logs a message to a new log file of your choice. The file will be created in the CRM Logs folder.
            </summary>
            <param name="fileName">"System" or "SQL" for one of the existing crm log files, or any other text to create a new log file.</param>
            <param name="message">Message to put into the file. Current datetime will be appended to the message automatically before writing to file.</param>
            <param name="level">The level at which system logging must be set in order for this message to be logged.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.MailMerge(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            This method is obsolete on version 7.1SP2 and above
            Performs a mail merge of selected data from the database with a merge document in the Library of the installation.
            </summary>
            <param name="database">Database Name when applicable.</param>
            <param name="sql">SQL Query to select the data.</param>
            <param name="action">Merge Action.</param>
            <param name="userOptions">User options.</param>
            <param name="save">Y or N to save or not.</param>
            <param name="docLibPath"></param>
            <param name="print"></param>
            <param name="templatePath">Path to template document.</param>
            <param name="namedTemplate"></param>
            <param name="nextUrl">Next URL if successful.</param>
            <param name="failUrl">Next URL if fails.</param>
            <param name="notSavedUrl">URL if not Saved.</param>
            <param name="emailSubject"></param>
            <param name="saveTemplateTitle"></param>
            <param name="saveDocName"></param>
            <param name="saveDocDir"></param>
            <param name="templateName"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.MailMerge(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            This method is obsolete on version 7.1SP2 and above
            Performs a mail merge of selected data from the database with a merge document in the Library of the installation.
            </summary>
            <param name="sql">SQL Query to select the data.</param>
            <param name="nextUrl">Next URL if successful.</param>
            <param name="failUrl">Next URL if fails.</param>
            <param name="notSavedUrl">URL if not Saved.</param>
            <param name="saveDocName">Document Name.</param>
            <param name="save">True to autosave the document.</param>
            <returns>HTML script to be added to the content.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.MailMerge(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            This method is obsolete on version 7.1SP2 and above.
            Performs a mail merge of selected data from the database with a merge document in the Library of the installation.
            </summary>
            <param name="sql">SQL Query to select the data.</param>
            <param name="templatePath">Path to template document.</param>
            <param name="nextUrl">Next URL if successful.</param>
            <param name="failUrl">Next URL if fails.</param>
            <param name="notSavedUrl">URL if not Saved.</param>
            <param name="saveDocName">Document Name.</param>
            <param name="save">True to autosave the document.</param>
            <returns>HTML script to be added to the content.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.PreBuildContents">
            <summary>
            This method will be invoked before the BuildContents method and can be overriden and used to setup variables or pre-conditions for BuildContents.
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.RefreshMetata">
            <summary>
            Refreshes all metadata. Run this if updating custom_* tables directly.
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.RefreshMetadata(System.String)">
            <summary>
            Refreshes one translation family only. Run this if updating the custom_captions family directly.
            </summary>
            <param name="captionFamily">Name of translation family to refresh.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.SetContext(System.String)">
            <summary>
            Sets the context e.g. "find" or "new".
            </summary>
            <param name="contextString"></param>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.SetContext(System.String,System.Int32)">
            <summary>
            SetContext for an entity with given ID.
            </summary>
            <param name="entityName">Name of entity.</param>
            <param name="entityId">ID of current record.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.SetContext(System.String,System.Int32,System.Boolean)">
            <summary>
            SetContext for an entity with given ID.
            </summary>
            <param name="entityName">Name of entity.</param>
            <param name="entityId">ID of current record.</param>
            <param name="addToRecentList">false to not add to the recent list</param>
            <remarks>A new link is added to the recent list when the SetContext is invoked and it will refer to the current DLL and Function. 
            If Setcontext is invoked with the same value in different DLLs or functions, 
            multiple entries will be created on the recent list, and will give the impression of duplicate links.
            </remarks>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.UrlDotNet">
            <summary>
            Provides a URL to link directly back to the current .NET Dll.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.UrlDotNet(System.String,System.String)">
            <summary>
            Provided a URL to link to another DotNetFunction within the same .NET Dll or another one.
            </summary>
            <param name="fileName">The name of the .Net Dll.</param>
            <param name="functionName">The function within the .NET Dll to call.</param>
            <returns>URL string that can be used on a button or a link.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.Url(System.String)">
            <summary>
            Returns a URL for the given action that can be used on a button.
            </summary>
            <param name="action">Action number.</param>
            <returns>Url string.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.UrlSetKeys(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a URL with different key values than currently used.
            </summary>
            <param name="AAction">Action number.</param>
            <param name="AJumpKey">Key for entity to jump.</param>
            <param name="AJumpKeyValue">Key value for jump entity.</param>
            <returns>URL string.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.UrlSetKeys(System.String,System.String,System.Int32)">
            <summary>
            Creates a URL for CustomEntity ASP page with different key values than currently used.
            </summary>
            <param name="ACustomFileName">The ASP page to open.</param>
            <param name="AJumpKeyFieldName"></param>
            <param name="AJumpKeyValue">KeyValue for jump Entity.</param>
            <returns>URL string.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.UrlForPopUpWindow(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Creates a URL that will open a pop-up window. 
            The URL contains a field that will indicate to CRM that the page is 
            being displayed in a Pop-up. The Popup window created with this function
            will have height and width set according to parameters, but scrollbars and re-size are both turned on.
            </summary>
            <param name="sUrl"></param>
            <param name="sWindowName"></param>
            <param name="iHeight"></param>
            <param name="iWidth"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.UrlForPopUpWindow(System.String,System.String,System.String)">
            <summary>
            Creates a URL that will open a pop-up window. Allows more properties to put on the window besides height and width.
            </summary>
            <param name="sUrl"></param>
            <param name="sWindowName"></param>
            <param name="sProperties">The properties for the window e.g. "scrollbars=yes,height=700".</param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.PopUpWindowButton(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Creates a HTML button that will open a Pop up window. Uses the UrlForPopUpWindow function
            to transform the passed in URL to script to open the window. Height and width parameters also 
            need to be given. This will create the HTML that renders the image and caption.
            </summary>
            <param name="sCaption">The text to appear on the button.</param>
            <param name="sUrl">URL for the popup. This must be the complete address. You can use the 'URL' function to get this.</param>
            <param name="sImage">The image name and folder. The function will apply the install name.</param>
            <param name="iHeight"></param>
            <param name="iWidth"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.AddHelpButton(System.String)">
            <summary>
            Adds a help button to the set of buttons on a page.        
            </summary>
            <param name="sFileName">The fully qualified name of the help file e.g. 
            "/Main Menu/wwhelp/wwhimpl/js/html/wwhelp.htm?href=AddingInformation.html".
            the install name will be pre-pended to this.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.AddHelpButton(System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds a help button to the page.
            </summary>
            <param name="aHelpFile">Help file name.</param>
            <param name="aUseCaption">Show help caption.</param>
            <param name="aSmallButton">Show small button.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.GetHelpButton(System.String)">
            <summary>
            Returns the HTML String for a help button.
            </summary>
            <param name="sFileName">Help file name.</param>
            <returns>HTML String.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.GetHelpButton(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns the HTML String for a help button.
            </summary>
            <param name="aHelpFile">Help file name.</param>
            <param name="aUseCaption">Show help caption.</param>
            <param name="aSmallButton">Show small button.</param>
            <returns>HTML string.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.UrlFromKeys(System.String,Sage.CRM.Utils.Keys)">
            <summary>
            Gets a URL for the given action, that will include the key values.
            </summary>
            <param name="action">The action number.</param>
            <param name="Keys">A list of Key values.</param>
            <returns>URL string.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.OverrideValue(System.String,System.String)">
            <summary>
            Overrides content and query values.
            </summary>
            <param name="Name">Field name.</param>
            <param name="Value">Field value.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.DontAddToHistory">
            <summary>
            When this is invoked the current page will not be added to the history.
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.Validate">
            <summary>
            This method can be used to perform data validation on a .NET Screen after a user has submitted data. 
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.OverrideContent(System.String)">
            <summary>
            This function will force CRM return ONLY the strings/values added through Web.AddContent. 
            No HTML Tags, CSS or JavaScript will be added by CRM to the result HTML.
            The function AddTopContent, list pagination or any other function who need some 
            CRM Javascript will not work properly.
            </summary>
            <param name="ContentType">ContentType if null it will be set to text/html</param>        
        </member>
        <member name="M:Sage.CRM.WebObject.Web.GetBlock(System.String)">
            <summary>
            Creates a Sage CRM block object.
            </summary>
            <param name="blockName">The name of the block to retrieve. Standard system Block Names include the following = "marquee","message","file","graphic","chart","pipeline","orgChart".
            In a custom Dll you could choose to send in an alternate name if you know that the block exists.
            </param>        
            <returns>A SageCrmBlock object.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.GetChartGraphicBlock">
            <summary>
            Creates a blank Chart Graphic Block.
            A Chart Graphic Block inherits all the capabilities of the Graphics Block and adds to it the ability to generate a variety of different charts. These charts may be based on data retrieved via SQL or added through ASP for their values. In this way, they can be fully dynamic and represent data at a specific moment in time.
            </summary>
            <returns>SageCrmChartGraphicBlock object.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.GetChartGraphicBlock(System.String)">
            <summary>
            Creates a Chart Graphic Block that has already been configured in the CRM interface through Admin |  Customization. A Chart Graphic Block inherits all the capabilities of the Graphics Block and adds to it the ability to generate a variety of different charts. These charts may depend on data retrieved via SQL or added through ASP for their values. In this way, they can be fully dynamic and represent data at a specific moment in time.        
            </summary>
            <returns>SageCrmChartGraphicBlock object.</returns>  
        </member>
        <member name="M:Sage.CRM.WebObject.Web.GetOrgGraphicBlock">
            <summary>
            Creates a blank Org-chart Graphic Block. The organizational graphic is an implementation of the Graphic Block that is used for organizational charting. These diagrams can be drawn from data supplied to them from an ASP page or from data stored in a table.  Other parameters can also be set to describe the look of the diagram. The most common use of these diagrams is to display an employee hierarchy for a company. Currently, all the parameters and data are set through the 'OrgTree' command.
            As with the Graphics Block, the organizational graphic is recreated every time it is requested and can therefore be based on real time data.        
            </summary>
            <returns>SageCrmOrgGraphicBlock object.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.GetOrgGraphicBlock(System.String)">
            <summary>
            Creates an Org chart Graphic Block that has already been configured in Admin | Customization
            The organizational graphic is an implementation of the Graphic Block that is used for organizational charting. These diagrams can be drawn from data supplied to them from an ASP page or from data stored in a table. 
            Other parameters can also be set to describe the look of the diagram. The most common use of these diagrams is to display an employee hierarchy for a company. Currently, all the parameters and data are set through the 'OrgTree' command.
            As with the Graphics Block, the organizational graphic is recreated every time it is requested and can therefore be based on real time data.
            </summary>
            <returns>SageCrmOrgGraphicBlock object.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.GetPipelineGraphicBlock">
            <summary>
            Creates a blank Pipeline Graphic Block.
            The pipeline graphic is an implementation of the Graphic Block that includes extra functionality. You use the Pipeline Graphic to create cross-sectional diagrams that can represent data from an ASP page or data from a table. 
            You use the parameters of this block to change the look and feel of the pipeline. You can customize individual sections of the pipeline graphic to appear differently as the user selects them (by clicking on them).
            Similar to the Graphics Block, the Pipeline graphic is recreated every time it is requested and can therefore be based on real time data. It can also use all of the features of the Graphics Block. 
            The default size of the image created by the pipeline is set at 600 pixels wide and 100 in height, however it can be changed using the Graphics block's 'Resize' command.
            </summary>
            <returns>SageCrmPipelineGraphicBlock object.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.GetPipelineGraphicBlock(System.String)">
            <summary>
            Creates a Pipeline Graphic Block that has already been configured in Admin | Customization.
            The pipeline graphic is an implementation of the Graphic Block that includes extra functionality. You use the Pipeline Graphic to create cross-sectional diagrams that can represent data from an ASP page or data from a table. 
            You use the parameters of this block to change the look and feel of the pipeline. You can customize individual sections of the pipeline graphic to appear differently as the user selects them (by clicking on them).
            Similar to the Graphics Block, the Pipeline graphic is recreated every time it is requested and can therefore be based on real time data. It can also use all of the features of the Graphics Block. 
            The default size of the image created by the pipeline is set at 600 pixels wide and 100 in height, however it can be changed using the Graphics block's 'Resize' command.
            </summary>
            <returns>SageCrmPipelineGraphicBlock object.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.GetFileBlock">
            <summary>        
            Get a blank File Block
            A File Block object provides access to external files that are not part of the system. It allows these files to appear as if they are part of the system and to be called upon using ASP in the same way as any other CRM page. Note that the files need to be formatted for HTML appearance. If you don't specify where the file is stored in the directory path property, the system looks for the file in the CRM Reports directory.
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.GetFileBlock(System.String)">
            <summary>
            Creates a File Block that has already been configured in Admin | Customization.
            A File Block object provides access to external files that are not part of the system. It allows these files to appear as if they are part of the system and to be called upon using ASP in the same way as any other CRM page. Note that the files need to be formatted for HTML appearance. If you don't specify where the file is stored in the directory path property, the system looks for the file in the CRM Reports directory.
            </summary>
            <param name="blockName"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.GetGraphicBlock">
            <summary>
            Creates a blank Graphic Block.
            A Graphic Block enables the display of images through an ASP page. It is more powerful than standard static images, as variables can be used in their creation. These variables may represent live data from a database or incorporate details of the current user, such as theirprivileges or settings. 
            </summary>
            <returns>SageCrmGraphicBlock object</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.GetGraphicBlock(System.String)">
            <summary>
            Creates a Graphic Block that has already been configured in Admin | Customization. 
            A Graphic Block enables the display of images through an ASP page. It is more powerful than standard static images, as variables can be used in their creation. These variables may represent live data from a database or incorporate details of the current user, such as theirprivileges or settings. 
            </summary>
            <returns>SageCrmGraphicBlock object</returns>  
        </member>
        <member name="M:Sage.CRM.WebObject.Web.GetMarqueeBlock">
            <summary>
            Creates a blank Marquee Block.
            A Marquee Block adds scrolling text to a page. The content of the text is maintained through Administration | Customization | Translations. 
            You can use the properties of this block to control the direction, speed, and style of the scrolling text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.GetMarqueeBlock(System.String)">
            <summary>
            Creates a Marquee Block that has already been configured in Admin | Customization.
            A Marquee Block adds scrolling text to a page. The content of the text is maintained through Administration | Customization | Translations. 
            You can use the properties of this block to control the direction, speed, and style of the scrolling text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.GetMessageBlock">
            <summary>
            Creates a blank Message Block.
            A Message Block allows you to send messages in e-mail and SMS format. 
            Include this block in ASP pages to display a simple e-mail form or to automate the message sending in response to a certain event.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.GetMessageBlock(System.String)">
            <summary>
            Creates a Message Block that has already been configured in Admin | Customization.
            A Message Block allows you to send messages in e-mail and SMS format. 
            Include this block in ASP pages to display a simple e-mail form or to automate the message sending in response to a certain event.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.CreateRecord(System.String)">
            <summary>
            Creates an instance of a Record object that can be used to insert a new record to a table.
            </summary>
            <param name="tableName">Table Name.</param>
            <returns>A Record object.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.CreateRecord(System.String,System.String)">
            <summary>
            Creates an instance of a Record object that can be used to insert a new record to a table in an external database.
            </summary>
            <param name="tableName">Table Name.</param>
            <param name="machineName">Machine name.</param>
            <returns>A Record object.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.GetKeys">
            <summary>
            Obsolete, see Sage.CRM.Utils.Keys instead.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.WebObject.Web.AddFilterButton(System.String)">
            <summary>
            Adds a filter button to the page. This must be used in conjunction with a filter box.        
            </summary>
            <param name="contentFields">The Fields to be shown in the filter box - usually the result of GetEditHtml from an EntryGroup</param>
        </member>
        <member name="P:Sage.CRM.WebObject.Web.HTML">
            <summary>
            HTMLBuilder object to access HTML builder methods.
            </summary>
            <see cref="T:Sage.CRM.HTML.HTMLBuilder"/>
        </member>
        <member name="P:Sage.CRM.WebObject.Web.Metadata">
            <summary>
            Use this to access metadata e.g. screens, lists, translations etc.
            See Sage.CRM.Utils.Metadata for details.
            </summary>
            <see cref="P:Sage.CRM.WebObject.Web.Metadata"/>
        </member>
        <member name="P:Sage.CRM.WebObject.Web.CurrentUser">
            <summary>        
            Use this to get information about the currently logged on user.
            See Sage.CRM.Utils.UserSession class for more details.
            </summary>
            <see cref="T:Sage.CRM.Utils.UserSession"/>
        </member>
        <member name="P:Sage.CRM.WebObject.Web.Dispatch">
            <summary>
            Use this for controlling database transactions and getting locks.
            Also gives access to Cookies and Content and Query fields.
            </summary>
            <see cref="P:Sage.CRM.WebObject.Web.Dispatch"/>
        </member>
        <member name="P:Sage.CRM.WebObject.Web.Keys">
            <summary>
            Gets the Keys object with information about the current context.
            </summary>
            <see cref="T:Sage.CRM.Utils.Keys"/>
        </member>
        <member name="P:Sage.CRM.WebObject.Web.Mode">
            <summary>
            Use this property to get/set the mode of the current page.
            </summary>
            <seealso cref="F:Sage.CRM.WebObject.Web._modeDefault"/>
        </member>
        <member name="P:Sage.CRM.WebObject.Web.EntityName">
            <summary>
            This should be set to the name of the entity that is being used on this page, if applicable.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.Web.ThisDotNetDll">
            <summary>
            The name of the .NET Dll that this method is in (readonly). Used to redirect to same Dll or to a different method within the same dll.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.Web.ThisDotNetFunction">
            <summary>
            The name of the .NET entry point method that was called to generate the current page (readonly).
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.Web.IdField">
            <summary>
            The name of the field on the table that holds the ID value.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.Web.ContentIdField">
            <summary>
            The name of the field within content or query fields that holds the id.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.Web.BeenThere">
            <summary>
            Use this to set/check if the page is being redisplayed from content.
            </summary>
            <remarks>Boolean True/False depending on whether this page is being refreshed from content or not.</remarks>        
        </member>
        <member name="P:Sage.CRM.WebObject.Web.OnLoad">
            <summary>
            Sets the OnLoad Javascript event for the page (writeonly).
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.Web.OnUnLoad">
            <summary>
            Sets the OnUnload Javascript event for the page (writeonly).
            </summary>
        </member>
        <member name="F:Sage.CRM.WebObject.DataPageBase._dataPageType">
            <summary>
            Defines the data page type.
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageBase.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <b>DataPageBase</b>.
            </summary>
            <param name="entityName">Entity Name.</param>
            <param name="idField">Entity ID Field.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageBase.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <b>DataPageBase</b>.
            </summary>
            <param name="entityName">Entity Name.</param>
            <param name="idField">Entity ID Field.</param>
            <param name="screenName">Screen Name.</param>
        </member>
        <member name="F:Sage.CRM.WebObject.DataPageBase.EditMethod">
            <summary>
            Default method name that retrieves the Edit page in a custom Dll when the user chooses to edit a record.
            This is the name applied when a Custom Dll is created using the SDK wizard.
            The value can be changed if you need to access another method.
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageBase.AddEntryGroup(System.String)">
            <summary>
            Add EntryGroup with default position values. Use this to build up the array of EntryGroups that are to be displayed.
            </summary>
            <param name="entryGroupName">Name of EntryGroup from with CRM Admin customization.</param>
            <returns>The EntryGroup object that was added.</returns>        
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageBase.AddEntryGroup(System.String,System.String)">
            <summary>
            Add EntryGroup with default position values, setting a title.
            </summary>
            <param name="entryGroupName">Name of EntryGroup from with CRM Admin customization.</param>
            <param name="title">Title to display on top of the EntryGroup when it is drawn.</param>
            <returns>The EntryGroup object that was added.</returns>        
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageBase.AddEntryGroup(System.String,System.Boolean,System.Int32,System.Int32,System.String)">
            <summary>
            Adds a new EntryGroup to the page.
            <param name="entryGroupName">Name of EntryGroup from with CRM Admin customization.</param>
            <param name="newLine">True if this EntryGroup should appear on a new line.</param>
            <param name="rows">Number of rows this EntryGroup should take up.</param>
            <param name="cols">Number of columns this EntryGroup should take up.</param>
            <param name="title">The title to display on top of the EntryGroup.</param>
            <returns>The EntryGroup object that was added.</returns>        
            </summary> 
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageBase.Url(System.String)">
            <summary>
            Creates a URL for a specified action. If the ContentIdField name is filled in then this will be appended to the url.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageBase.GetEntryGroupByName(System.String)">
            <summary>
            Gets the EntryGroup object that has this name.
            </summary>
            <param name="entryGroupName">Name of EntryGroup to return.</param>
            <returns>EntryGroup object.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageBase.ToUIObject">
            <summary>
            Method invoked when the API tries to convert the Data Page to a HTML String.
            </summary>
            <returns>VerticalPanel with the EntryGroups Objects.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageBase.BuildContents">
            <summary>
            This is the main control method for the ListPage. It adds the tabs, and the &lt;FORM&gt; tag, draws the EntryGroup and the list and the buttons.
            Override this to change the behaviour.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.DataPageBase.UseWorkflow">
            <summary>
            Enables or Disable the Workflow on the page.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.DataPageBase.UseTabs">
            <summary>
            In the base BuildContents functions you can control whether tabs are drawn or not.
            Set this to false if you don't want tabs on the page. The default is true.
            </summary>       
        </member>
        <member name="P:Sage.CRM.WebObject.DataPageBase.Title">
            <summary>
            String to show as the title of the page. The property UseTabs should be disabled if
            the Title be used.
            </summary>        
        </member>
        <member name="P:Sage.CRM.WebObject.DataPageBase.UseEntityTabs">
            <summary>
            In the base BuildContents functions you can control what tabs are drawn.
            Set this to true if you want to use EntityName on get tabs function. 
            The default value for this property is false.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.DataPageBase.Id">
            <summary>
            ID of the current record being edited.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.DataPageBase.EntryGroups">
            <summary>
            List of EntryGroups on this page. 
            EntryGroups[0] is automatically added by the constructor and represents the main
            Entity on Page. The ID property is used to get or set the ID of this EntryGroup.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.DataPageBase.TerritoryId">
            <summary>
            TerritoryId of the current record, this is set automatically during BuildContents.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.DataPageBase.CreatedByUserId">
            <summary>
            ID of the user who created the current record, this is set automatically during BuildContents.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.DataPageBase.AssignedToUserId">
            <summary>
            ID of the user to whom the record is assigned, this is set automatcially during BuildContents.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.DataPageBase.AssignedToTeamId">
            <summary>
            ID of the team to which the record is assigned, this is set automatically during BuildContents.
            </summary>
        </member>
        <member name="F:Sage.CRM.WebObject.DataPageEdit._saveSuccessful">
            <summary>
            Protected to control if the save was successful.
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageEdit.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <b>DataPageEdit</b>.
            </summary>
            <param name="entityName">Entity Name.</param>
            <param name="idField">Entity ID Field.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageEdit.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <b>DataPageEdit</b>.
            </summary>
            <param name="entityName">Entity Name.</param>
            <param name="idField">Entity ID Field.</param>
            <param name="screenName">Screen Name.</param>
        </member>
        <member name="F:Sage.CRM.WebObject.DataPageEdit.SaveMethod">
             <summary>
             Default method name that retrieves the delete page in custom Dlls when user selects to delete a record.
             This is the name applied when a custom Dll is created using the SDK wizard.
             This value can be changed if you need another method accessed.
            </summary>
        </member>
        <member name="F:Sage.CRM.WebObject.DataPageEdit.CancelMethod">
             <summary>
             Default method name that retrieves the delete page in custom Dlls when user selects to delete a record.
             This is the name applied when a custom Dll is created using the SDK wizard.
             This value can be changed if you need another method accessed.
            </summary>
        </member>
        <member name="F:Sage.CRM.WebObject.DataPageEdit.DeleteMethod">
             <summary>
             Default method name that retrieves the delete page in custom Dlls when user selects to delete a record.
             This is the name applied when a custom Dll is created using the SDK wizard.
             This value can be changed if you need another method accessed.
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageEdit.FillWorkflowScreen(Sage.CRM.Data.Record)">
            <summary>
            Fill the WorkflowScreen inner property.
            </summary>
            <param name="record">Record when applicable</param>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageEdit.AddCancelButton">
            <summary>
            Adds a standard cancel button. This is called from the BuildContents method of DataPageEdit or DataPageNew. Override this to remove or change the Cancel button.
            The default cancel button redirects to the same .NET dll, calling the "RunSearchPage" entry point method.
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageEdit.AddDeleteButton">
            <summary>
            Adds the standard delete button, if the user has rights to delete the current record. Override this to remove or change the delete button.
            The default delete button redirects to the same .NET dll, calling the "RunDataPageDelete" entry point method.
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageEdit.PreBuildContents">
            <summary>
            This method will be invoked before the BuildContents method and can be overriden and used to setup variables or pre-conditions for BuildContents.
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageEdit.EntryGroups_FillRecordFromContent(Sage.CRM.Data.Record)">
            <summary>
            This method is called within the core SaveChanges method of a DataPageEdit or DataPageNew to update a Record object with 
            the values from the EntryGroups on the screen.
            Override this method to override any field values or set fields that are not included in any of the EntryGroups.
            </summary>
            <param name="info">Record object to save values into.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageEdit.SaveChanges(System.Boolean)">
            <summary>
            Saves the values on the screen to the database. This method is called from the BuildContents of DataPageEdit or DataPageNew.
            Will create a new record if isNew is passed as true.
            Override this to change or add new behaviour to the saving of a record.
            </summary>
            <param name="isNew"></param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageEdit.BuildContents">
            <summary>
            This is the main control method for the DataPageEdit. It displays the record in edit mode with the appropriate Save/Cancel buttons. 
            If the mode is Save then it validates and saves the record, then redirects to the URL specified by the UrlAfterSave property.
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageEdit.Validate">
            <summary>
            Validate the data on the screen prior to save - returns true if all fields pass validation.
            This is called from within BuildContents method of DataPageEdit or DataPageNew.
            Override this to add in customized validation.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageEdit.ToUIObject">
            <summary>
            Method invoked when the API tries to convert the Data Page Edit to HTML String.
            </summary>
            <returns>VerticalPanel with the EntryGroups Objects.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageEdit.BeforeSave(Sage.CRM.Controls.EntryGroup)">
            <summary>
            Method invoked before the save action.
            </summary>
            <param name="screen">EntryGroup to which the save will be applied.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageEdit.AfterSave(Sage.CRM.Controls.EntryGroup)">
            <summary>
            Method invoked after the save action.
            </summary>
            <param name="screen">EntryGroup to which the save was applied.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageEdit.AddSaveButton">
            <summary>
            Adds a standard Save button. This is called from the BuildContents() method of a DataPageEdit class.
            The default Save button is a Submit button that sets the HiddenMode variable to Save (2).
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageEdit.BuildScreen">
            <summary>
            This method is called by BuildContents and actually adds the HTML for the screen using AddContent. It includes the &lt;FORM&gt; tag and the title and the buttons.
            Override this to add more HTML or to rewrite the way the screen looks.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.DataPageEdit.SaveButton">
            <summary>
            Enables or Disables the SaveButton.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.DataPageEdit.ShowValidationError">
            <summary>
            This property is used to determine if unsuccessful basic validation shows error message.
            Should be set to false if inherited class has additional validations.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.DataPageEdit.CancelButton">
            <summary>
            String value to describe a button used on the page. 
            Datapage has a ButtonsToExclude list. Add the name of this button if you do not want it rendered.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.DataPageEdit.DeleteButton">
            <summary>
            String value to describe a button used on the page. 
            Datapage has a ButtonsToExclude list. Add the name of this button if you do not want it rendered.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.DataPageEdit.UrlAfterSave">
            <summary>
            This is the URL to which the user will be redirected after data has been entered, validated and saved.
            Default behaviour is to redirect to method "RunDataPage" within the same .Net Dll.
            You can reset UrlAfterSave to override this behaviour.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.DataPageEdit.SaveSuccessful">
            <summary>
            In Sage.CRM.WebObject.DataPageNew this flag is set to true if a record has been successfully saved.
            Derived units can access this value after BuildContents if they want 
            to perform an action that requires a record to have been successfully saved.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.DataPageEdit.WorkflowScreen">
            <summary>
            Gets the Workflow Screen.
            </summary>
            <see cref="T:Sage.CRM.UI.ContentBox"/>
        </member>
        <member name="T:Sage.CRM.Blocks.ChartGraphicBlock">
            <summary>
            This block inherits all the capabilities of the Graphics Block and adds to it the ability to generate a variety of different charts.
            These charts may depend on data retrieved via SQL or added through ASP for their values.
            In this way, they can be fully dynamic and represent data at a specific moment in time.
            </summary>
        </member>
        <member name="M:Sage.CRM.Blocks.ChartGraphicBlock.#ctor">
            <summary>
            Initializes a new instance of <b>ChartGraphicBlock</b>.
            </summary>
        </member>
        <member name="M:Sage.CRM.Blocks.ChartGraphicBlock.#ctor(System.String)">
            <summary>
            Initializes a new instance of <b>ChartGraphicBlock</b>.
            </summary>
            <param name="blockName">Block Name.</param>
        </member>
        <member name="M:Sage.CRM.Blocks.ChartGraphicBlock.Finalize">
            <summary>
            Destructor class for ChartGraphicBlock.
            </summary>
        </member>
        <member name="M:Sage.CRM.Blocks.ChartGraphicBlock.ApplyBarStyle(System.String)">
            <summary>
            Sets the style of the bars used in bar and horizontal bar graphs. This does not apply to styles other than 'Bar' and 'Hbar'. 
            The default is RectGradient where JPEG (16m color) is used or Rectangle for GIFs (256 colors).
            Gets values from Sage.CRM.ChartBarStyles.
            </summary>
            <param name="command">Chart bar style</param>
            <returns>True if the style was applied without error.</returns>
            <example>
            myGraphic.ApplyBarStyle(Sage.Graphics.ChartBarStyles.Arrow);
            </example>
        </member>
        <member name="M:Sage.CRM.Blocks.ChartGraphicBlock.BackGradient(System.Boolean,System.String,System.String)">
            <summary>
            Sets a gradient background to the chart.
            </summary>
            <param name="isVisible">True to show the gradient.</param>
            <param name="startColor">Start color.</param>
            <param name="endColor">End color.</param>
            <returns>True if the gradient background was set successfully.</returns>
            <example>
            myGraphic.BackGradient(false, "blue", "white");
            </example>
        </member>
        <member name="M:Sage.CRM.Blocks.ChartGraphicBlock.ChartTitle(System.String)">
            <summary>
            Set the chart title.
            </summary>
            <param name="text">Title string.</param>
            <returns>True if the title was set successfully.</returns>
        </member>
        <member name="M:Sage.CRM.Blocks.ChartGraphicBlock.Make2d">
            <summary>
            Set the chart to 2D.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.ChartGraphicBlock.Make3d">
            <summary>
            Set the chart to 3D.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.ChartGraphicBlock.Make3d(System.Int32)">
            <summary>
            Set the chart to 3D.
            </summary>
            <param name="percentage">Percentage value (1-100).</param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.ChartGraphicBlock.MoveLegend(System.String)">
            <summary>
            Set the legend position.
            </summary>
            <param name="text">Legend position.
            <value>Top</value>
            <value>Left</value>
            <value>Right</value>
            <value>Bottom</value>
            </param>      
            <returns>True if the legend position was set successfully.</returns>
        </member>
        <member name="M:Sage.CRM.Blocks.ChartGraphicBlock.ShowLegend(System.Boolean)">
            <summary>
            Show/hid the Legend.
            </summary>
            <param name="onoff">True to show the Legend.</param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.ChartGraphicBlock.ShowAxis(System.Boolean)">
            <summary>
            Show/hid the Axis.
            </summary>
            <param name="onoff">True to show the Axis.</param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.ChartGraphicBlock.ShowMarks(System.Boolean)">
            <summary>
            Show/hide the marks.
            </summary>
            <param name="onoff">True to show the marks.</param>
            <returns></returns>
        </member>
        <member name="P:Sage.CRM.Blocks.ChartGraphicBlock.BackImage">
            <summary>
            Sets the background image to the graphic.
            </summary>
            <example>
            myGraphic.BackImage = ".\\Img\\Backgrounds\\lightpurplemarble.gif";
            </example>
        </member>
        <member name="P:Sage.CRM.Blocks.ChartGraphicBlock.BarWidthPercent">
            <summary>
            Bar Width in percent(0-100).
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.ChartGraphicBlock.DateTimeFormat">
            <summary>
            Sets the formart for DateTime.
            </summary>
            <example>
            myGraphic.DateTimeFormat = "dd/mm/yyyy";
            </example>
        </member>
        <member name="P:Sage.CRM.Blocks.ChartGraphicBlock.LableX">
            <summary>
            Label for Axis X.
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.ChartGraphicBlock.LableY">
            <summary>
            Label for Axis Y.
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.ChartGraphicBlock.LegendOnly">
            <summary>
            Show only the legend.
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.ChartGraphicBlock.MaxX">
            <summary>
            Set or Get the max value for the X Axis.
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.ChartGraphicBlock.MaxY">
            <summary>
            Set or Get the max value for the Y Axis.
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.ChartGraphicBlock.MinX">
            <summary>
            Set or Get the minimal value for the X Axis.
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.ChartGraphicBlock.MinY">
            <summary>
            Set or Get the minimal value for the Y Axis.
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.ChartGraphicBlock.StyleName">
            <summary>      
            Define the styles that will be applied to the Chart.
            </summary>
            <example>
            myGraphic.StyleName = Sage.Graphics.ChartStyleNames.Bar;
            </example>
            <see cref="T:Sage.CRM.Graphics.ChartStyleNames"/>
        </member>
        <member name="P:Sage.CRM.Blocks.ChartGraphicBlock.SqlText">
            <summary>
            SQL query used to create the chart.
            </summary>
            <remarks>Should be the last property set before calling the method Execute().</remarks>
        </member>
        <member name="T:Sage.CRM.UI.ComplexBox">
            <summary>
            Abstract class to represent a <b>ComplexBox</b>.
            </summary>
        </member>
        <member name="F:Sage.CRM.UI.ComplexBox.COL_SPAN">
            <summary>
            Number of COL_SPAN used to render the box.
            </summary>
        </member>
        <member name="F:Sage.CRM.UI.ComplexBox._inner">
            <summary>
            The <b>ComplexBox Class</b> accept only one inner object 
            </summary>
        </member>
        <member name="M:Sage.CRM.UI.ComplexBox.#ctor">
            <summary>
            Initializes a new instance of <b>ComplexBox</b>.
            </summary>
        </member>
        <member name="P:Sage.CRM.UI.ComplexBox.TopBorder">
            <summary>
            Enable or Disable the Box Top Border.
            </summary>
        </member>
        <member name="P:Sage.CRM.UI.ComplexBox.BottomBorder">
            <summary>
            Enable or Disable the Box Bottom Border.
            </summary>
        </member>
        <member name="P:Sage.CRM.UI.ComplexBox.Title">
            <summary>
            Title to show above the EntryGroup when displayed in view or edit mode.
            </summary>  
        </member>
        <member name="P:Sage.CRM.UI.ComplexBox.TitleURL">
            <summary>
            Gets or sets the Title URL link.
            </summary>
        </member>
        <member name="P:Sage.CRM.UI.ComplexBox.AddToTitle">
            <summary>
            Add a UIObject to the title.
            </summary>
        </member>
        <member name="T:Sage.CRM.Data.EntityCollection">
            <summary>   
            Collection of related records from a CRM table.
            <see cref="M:Sage.CRM.Data.Entity.GetSubCollection(System.String)"/>
            </summary>  
        </member>
        <member name="M:Sage.CRM.Data.EntityCollection.Finalize">
            <summary>
            Destructor for EntityCollection class.
            </summary>
        </member>
        <member name="M:Sage.CRM.Data.EntityCollection.Add">
            <summary>
            Adds a new entity object to the collection with all null values.
            An actual new record will be created when SaveChanges is called.
            </summary>
            <returns>Entity - an entity object representing the new record.</returns>
        </member>
        <member name="M:Sage.CRM.Data.EntityCollection.Add(Sage.CRM.Data.Entity)">
            <summary>
            Adds an existing entity object to the collection.
            </summary>
            <param name="NewEntity">Entity to add.</param>
            <returns>The entity that was added.</returns>
        </member>
        <member name="M:Sage.CRM.Data.EntityCollection.Add(System.String,System.String)">
            <summary>
            Adds an entity object to the collection with the specified values already set.
            An actual new record will be created on SaveChanges.
            </summary>
            <param name="fieldName">Field name to set - must be a field that exists on the parent entity.</param>
            <param name="fieldValue">Field value to set.</param>
            <returns>The new entity object.</returns>
        </member>
        <member name="M:Sage.CRM.Data.EntityCollection.Delete(System.Int32)">
            <summary>
            Deletes a record from a collection by index.
            The actual record will be deleted when SaveChanges is called.
            </summary>
            <param name="Index">Position (index) of the record.</param>
        </member>
        <member name="M:Sage.CRM.Data.EntityCollection.Eof">
            <summary>
            Checks is this the last record in the collection.
            </summary>
            <returns>true/false.</returns>
        </member>
        <member name="M:Sage.CRM.Data.EntityCollection.Bof">
            <summary>
            Checks if this is the first record in the collection.
            </summary>
            <returns>true/false.</returns>
        </member>
        <member name="M:Sage.CRM.Data.EntityCollection.GetFirst">
            <summary>
            Creates an entity object representing the first record in the collection.
            </summary>
            <returns>Entity.</returns>
        </member>
        <member name="M:Sage.CRM.Data.EntityCollection.GetNext">
            <summary>
            Creates an entity object representing the next record in the collection.
            </summary>
            <returns>Entity.</returns>
        </member>
        <member name="M:Sage.CRM.Data.EntityCollection.GetLast">
            <summary>
            Creates an entity object representing the last record in the collection.
            </summary>
            <returns>Entity.</returns>
        </member>
        <member name="T:Sage.CRM.Errors.SageStackTrace">
            <summary>
            Class to build Stack traces that we can later use in logging.
            The trace here is any hardcoded message passed to the object. 
            Datetime and thread/process info will be added and each message will 
            be written to a new line. 
            When you want a dump of the stack call the StackTrace property which will 
            return a string.
            </summary>
        </member>
        <member name="M:Sage.CRM.Errors.SageStackTrace.#ctor">
            <summary>
            Creates a string builder with no capacity set to hold trace.
            </summary>
        </member>
        <member name="M:Sage.CRM.Errors.SageStackTrace.#ctor(System.Int32)">
            <summary>
            Creates a string builder with no capacity set to hold trace.
            </summary>
            <param name="iCapacity">Size of the string builder object to hold the trace.</param>
        </member>
        <member name="M:Sage.CRM.Errors.SageStackTrace.Finalize">
            <summary>
            Destructor for SageStackTrace.
            </summary>
        </member>
        <member name="M:Sage.CRM.Errors.SageStackTrace.AddTrace(System.String)">
            <summary>
            Builds up a trace log that can be e.g. passed back to a web object.        
            </summary>
            <param name="message">The text to appear in the log.</param>
        </member>
        <member name="M:Sage.CRM.Errors.SageStackTrace.Dispose">
            <summary>
            Releases all resources used by the SageStackTrace.
            </summary>
        </member>
        <member name="M:Sage.CRM.Errors.SageStackTrace.CleanUp">
            <summary>
            Removes all messages from stack.
            </summary>
        </member>
        <member name="P:Sage.CRM.Errors.SageStackTrace.StackTrace">
            <summary>
            Gets the full text dump of all messages added to the trace object.
            </summary>
        </member>
        <member name="P:Sage.CRM.Errors.SageStackTrace.Disposed">
            <summary>
            Gets a value indicating whether the object is disposed.
            </summary>
        </member>
        <member name="T:Sage.CRM.Utils.TranslationFamily">
            <summary>
            Class to represent a Translation Family Collection.
            </summary>
        </member>
        <member name="M:Sage.CRM.Utils.TranslationFamily.#ctor(System.String)">
            <summary>
            Initializes a new instance of <b>TranslationFamily</b>.
            </summary>
            <param name="familyName">Translation Family Name.</param>
        </member>
        <member name="M:Sage.CRM.Utils.TranslationFamily.Finalize">
            <summary>
            Destructor class for the TranslationFamily objects.
            </summary>
        </member>
        <member name="M:Sage.CRM.Utils.TranslationFamily.Add(System.String,System.String)">
            <summary>
            Adds an element with the provided key and value to the TranslationFamily. 
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <remarks>If the key already exist, the value will be replaced.</remarks>
        </member>
        <member name="M:Sage.CRM.Utils.TranslationFamily.ContainsKey(System.String)">
            <summary>
            Determines whether the TranslationFamily contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the TranslationFamily.</param>
            <returns>true if the TranslationFamily contains an element with the key.</returns>
        </member>
        <member name="M:Sage.CRM.Utils.TranslationFamily.Remove(System.String)">
            <summary>
            Removes the element with the specified key from the TranslationFamily.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>True if the element is successfully removed.</returns>
        </member>
        <member name="M:Sage.CRM.Utils.TranslationFamily.TryGetValue(System.String,System.String@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">The value associated with the specified key, if the key is found.</param>
            <returns>True if the object that implements IDictionary contains an element with the specified key.</returns>
        </member>
        <member name="M:Sage.CRM.Utils.TranslationFamily.Add(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Adds an element to the TranslationFamily.
            </summary>
            <param name="item">Element to be added.</param>
        </member>
        <member name="M:Sage.CRM.Utils.TranslationFamily.Clear">
            <summary>
            Removes all items from the TranslationFamily.
            </summary>
        </member>
        <member name="M:Sage.CRM.Utils.TranslationFamily.Contains(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Determines whether the TranslationFamily contains a specific element.
            </summary>
            <param name="item">The element to be located in the TranslationFamily.</param>
            <returns>True if the TranslationFamily contains the element.</returns>
        </member>
        <member name="M:Sage.CRM.Utils.TranslationFamily.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.Int32)">
            <summary>
            Copies the elements to an Array, starting at a particular Array index.
            </summary>
            <param name="array">Destination Array.</param>
            <param name="arrayIndex">Index in array at which copying begins</param>
        </member>
        <member name="M:Sage.CRM.Utils.TranslationFamily.Remove(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Removes the first occurrence of a specific object from the TranslationFamily. 
            </summary>
            <param name="item">The object to remove from the TranslationFamily.</param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Utils.TranslationFamily.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Sage.CRM.Utils.TranslationFamily.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Sage.CRM.Utils.TranslationFamily.Keys">
            <summary>
            Gets an ICollection containing the keys of the IDictionary.
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.TranslationFamily.Values">
            <summary>
            Gets an ICollection containing the values of the IDictionary.
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.TranslationFamily.Item(System.String)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <param name="key">The key of the element to get or set.</param>
            <returns>Element value.</returns>
        </member>
        <member name="P:Sage.CRM.Utils.TranslationFamily.Count">
            <summary>
            Gets the number of elements contained in the TranslationFamily.
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.TranslationFamily.IsReadOnly">
            <summary>
            Gets a value indicating whether the TranslationFamily Collection is read-only.
            </summary>
        </member>
        <member name="T:Sage.CRM.Utils.TableInfo">
            <summary>
            A class to represent information about a CRM table.
            <see cref="M:Sage.CRM.Utils.Metadata.GetTableInfo(System.String)"/>
            </summary>
        </member>
        <member name="M:Sage.CRM.Utils.TableInfo.Finalize">
            <summary>
            Destructor for the TableInfo class.
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.TableInfo.Caption">
            <summary>
            The caption assigned to this table. Caption should always be unique within all CRM tables (readonly).
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.TableInfo.CompanyField">
            <summary>
            The fieldname of the field on the table that stores the Company ID of the company that each record is linked to, if applicable (readonly).
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.TableInfo.Id">
            <summary>
            The ID of this table within Custom_Tables (readonly).
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.TableInfo.IdField">
            <summary>
            The field name within the table that stores the unique ID for each record (readonly).
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.TableInfo.Name">
            <summary>
            The actual name of the table (readonly).
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.TableInfo.Key">
            <summary>
            Gets the table key field.
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.TableInfo.PersonField">
            <summary>
            The fieldname of the field on the table that stores the Person ID of the Person that each record is linked to, if applicable (readonly).
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.TableInfo.Prefix">
            <summary>
            The prefix of the table (readonly). This is a fixed string that prefixes all the column names on the table.
            Only applicable for standard CRM tables.
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.TableInfo.PrimaryTable">
            <summary>
            True if this table is a primary table (readonly).
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.TableInfo.TeamField">
            <summary>
            The fieldname of the field on the table that stores the Team ID for the record, if applicable (readonly).
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.TableInfo.UserField">
            <summary>
            The fieldname of the field on the table that stores the User ID of the user that each record is assigned to, if applicable (readonly).
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.TableInfo.ViewAction">
            <summary>
            The View Action assigned to table (entity) (readonly).
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.TableInfo.DescriptionField">
            <summary>
            Description field for a table (entity) (readonly).
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.TableInfo.EntityKind">
            <summary>
            Type of Entity. Can be one of the following: blank, core, asp, dotnet or virtual. Blank is the same as core.
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.TableInfo.ViewFileName">
            <summary>
            File name to view ASP (ASP file) or .NET (assembly file) entity.
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.TableInfo.ViewMethod">
            <summary>
            Method name to run .NET entity summary page (used with corresponding ViewFileName).
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.TableInfo.ExternalTable">
            <summary>
            Return true if is a table connection.
            </summary>
        </member>
        <member name="T:Sage.CRM.Blocks.MarqueeBlock">
            <summary>
            You use the MarqueeBlock object to add scrolling text, for example a news ticker, to a page.
            The Marquee block reads from the Custom Captions table for news headlines and news story links and builds a scrolling display.
            You can control the direction of the scrolling, the positioning, the speed, and the style sheet used.
            The news content is maintained in CRM in Administration | Translations.
            The object provides a dismiss button which is overwritten when the news changes.
            </summary>
        </member>
        <member name="M:Sage.CRM.Blocks.MarqueeBlock.#ctor">
            <summary>
            Initializes a new instance of <b>MarqueeBlock</b>.
            </summary>
        </member>
        <member name="M:Sage.CRM.Blocks.MarqueeBlock.#ctor(System.String)">
            <summary>
            Initializes a new instance of <b>MarqueeBlock</b>.
            </summary>
            <param name="blockName">Block Name.</param>
        </member>
        <member name="M:Sage.CRM.Blocks.MarqueeBlock.Finalize">
            <summary>
            Releases all resources that have been acquired by the MarqueeBlock class.
            </summary>
        </member>
        <member name="M:Sage.CRM.Blocks.MarqueeBlock.ScrollSideways(System.Int32)">
            <summary>
            Sets the marquee block to scroll from side to side at a given height.
            </summary>
            <param name="rowPos">The height at which the line should scroll.</param>
        </member>
        <member name="M:Sage.CRM.Blocks.MarqueeBlock.ScrollUpAndDown(System.Int32)">
            <summary>
            Sets the marquee block to scroll up and down at a given position.
            </summary>
            <param name="colPos">The column position at which to scroll.</param>
        </member>
        <member name="P:Sage.CRM.Blocks.MarqueeBlock.HorizontalMax">
            <summary>
            Specifies the X boundary to the right of the screen for the marquee.
            The default value is 800.
            Where HorizontalMin and HorizontalMax differ, the marquee moves horizontally when scrolling.
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.MarqueeBlock.HorizontalMin">
            <summary>
            The horizontal minimum is the starting point of the marquee on the X-axis.
            The default value is 0.
            Where HorizontalMin and HorizontalMax differ, the marquee moves horizontally when scrolling.
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.MarqueeBlock.NewsFamily">
            <summary>
            Use this to specify a different family of captions to be used to generate the headings for the marquee block. The default value is 'news'.
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.MarqueeBlock.ScrollSpeed">
            <summary>
            Determines the speed of the text as it moves on the screen.
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.MarqueeBlock.StyleSheet">
            <summary>
            Allows the alteration of the way the text is displayed. Specify a cascading style sheet that includes the styles you require for the marquee.
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.MarqueeBlock.Title">
            <summary>
            The title of the marquee block.
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.MarqueeBlock.VerticalMax">
            <summary>
            Specifies the maximum vertical position of the marquee before returning to the VerticalMin value.
            The default value is 300.
            Where VerticalMin and VerticalMax differ, the marquee moves vertically when scrolling.
            </summary>        
        </member>
        <member name="P:Sage.CRM.Blocks.MarqueeBlock.VerticalMin">
            <summary>
            Specifies the Y location of the marquee as it appears in the browser window, where 0 is at the top of the screen.
            The default value is 300.
            Where VerticalMin and VerticalMax differ, the marquee moves vertically when scrolling.
            </summary>
        </member>
        <member name="T:Sage.CRM.Utils.UserSession">
            <summary>    
            A class to hold information on the currently logged on user. 
            It also provides methods for date and time formatting using the users preferences and other useful options.    
            </summary>
            <see cref="P:Sage.CRM.WebObject.Web.CurrentUser"/>
        </member>
        <member name="M:Sage.CRM.Utils.UserSession.HasRights(Sage.PermissionType,System.String)">
            <summary>
            Check if the current user has access rights to a given table.
            </summary>
            <param name="perType">The Permission Type. Can be Insert/Update/Delete see Sage.PermissionType for details.</param>
            <param name="tableName">The table to check, must be a primary table.</param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Utils.UserSession.IsAdmin">
            <summary>
            Check if the current user has Admin Rights.
            </summary>
            <returns>True if the user has admin rights.</returns>
        </member>
        <member name="M:Sage.CRM.Utils.UserSession.IsInRange(Sage.PermissionType,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Check whether a specific record is within a users security view for the given permission type.
            </summary>
            <param name="perType">Permission type to check eg Edit/Insert/Delete see Sage.PermissionType for details.</param>
            <param name="tableName">Tablename, must be a primary entity.</param>
            <param name="territoryId">Territory ID of the record.</param>
            <param name="userId">Assiged to user of the record.</param>
            <param name="teamId">Team ID of the record.</param>
            <param name="createdByUserId">Created by user of the record.</param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Utils.UserSession.IsInfoAdmin">
            <summary>
            Returns true if the user has "Info Admin" rights. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Utils.UserSession.HasInfoAdminRight(Sage.InfoAdminRights)">
            <summary>
            Check if the user has various "Info Admin" rights. String constants for these rights
            are declared in Sage.InfoAdminRights.
            </summary>
            <param name="infoAdminRight"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Utils.UserSession.VirtualImgPath">
            <summary>
            Path to images to be used in HTML pages. For example  /crm62/Themes/img/default/.
            The path must always end with '/'.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Utils.UserSession.SessionWrite(System.String,System.Object)">
            <summary>
            Write a value to the user session.
            </summary>
            <param name="key">Key Name.</param>
            <param name="value">Object Value.</param>
            <remarks>Complex objects like class needs to be serialized before adding to the user
            session and deserialized later.
            </remarks>
        </member>
        <member name="M:Sage.CRM.Utils.UserSession.SessionRead(System.String)">
            <summary>
            Returns one object added to the user session.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Sage.CRM.Utils.UserSession.Item(Sage.UserOptions)">
            <summary>
            Gets or sets the value of the current users preference for various options.
            </summary>
            <param name="fieldName">The name of the preference option - use Sage.UserOptions for full list of available options <see cref="T:Sage.ParamNames"/>.</param>
            <returns>The value of that option.</returns>
        </member>
        <member name="P:Sage.CRM.Utils.UserSession.Item(System.String)">
            <summary>
            Get or set the value of the current users preference for various options.
            </summary>
            <param name="fieldName">The name of the preference option.</param>
            <returns>The value of that option.</returns>
        </member>
        <member name="P:Sage.CRM.Utils.UserSession.UserEmailAddress">
            <summary>
            The email address of the current user (readonly).
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.UserSession.Logon">
            <summary>
            The logon name of the current user (readonly).
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.UserSession.TeamId">
            <summary>
            The Team ID of the current user (readonly).
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.UserSession.TeamName">
            <summary>
            The Team name of the current user (readonly).
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.UserSession.Teams">
            <summary>
            Return the Teams of the current user.
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.UserSession.TerritoryId">
            <summary>
            The Primary Territory ID of the current user (readonly).
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.UserSession.UserLanguage">
            <summary>
            The language code for the current user (readonly).
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.UserSession.UserName">
            <summary>
            The current user's full name (First Name + Last Name) (readonly).
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.UserSession.UserPhone">
            <summary>
            The current user's phone number (readonly).
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.UserSession.UserId">
            <summary>
            The ID of the current user from the user's table (readonly).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sage.CRM.UI.UIEntry">
            <summary>
            Abstract class to represent a UIEntry.
            </summary>
        </member>
        <member name="M:Sage.CRM.UI.UIEntry.#ctor(System.String)">
            <summary>
            Initializes a new instance of <b>UIEntry</b>.
            </summary>
            <param name="htmlType"></param>
        </member>
        <member name="P:Sage.CRM.UI.UIEntry.Value">
            <summary>
            Gets or sets the value to the entry.
            </summary>
        </member>
        <member name="P:Sage.CRM.UI.UIEntry.Mode">
            <summary>
            Gets or sets the Mode to the entry.
            </summary>
        </member>
        <member name="T:Sage.CRM.UI.HTMLString">
            <summary>
            Class used to represent any type of HTML String.
            </summary>
        </member>
        <member name="M:Sage.CRM.UI.HTMLString.#ctor">
            <summary>
            Initializes a new instance of <b>HTMLString</b>.
            </summary>
        </member>
        <member name="M:Sage.CRM.UI.HTMLString.#ctor(System.String)">
            <summary>
            Initializes a new instance of <b>HTMLString</b>.
            </summary>
            <param name="html">HTML String.</param>
        </member>
        <member name="M:Sage.CRM.UI.HTMLString.HtmlBody">
            <summary>
            Returns the HTML for the body of the page.
            </summary>
            <returns>HTML String.</returns>
        </member>
        <member name="M:Sage.CRM.UI.HTMLString.ToHtml">
            <summary>
            Returns the HTML String.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sage.CRM.UI.HTMLString.Html">
            <summary>
            Gets or sets the HTML String.
            </summary>
        </member>
        <member name="T:Sage.CRM.WebObject.ListPage">
            <summary>
            Used to create a page with a list and associated filter box.      
            Set the appropriate properties to specify the list and filter box to use.      
            Add SQL to filter by the current entity, e.g. all records for current company/user etc.
            Can add New Button(s) to the page (depending on workflow).
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.ListPage.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <b>ListPage</b>
            </summary>
            <param name="entityName">Metadata Entity Name.</param>
            <param name="listName">Metadata List Name.</param>
            <param name="filterBoxName">Metadata Filter Screen.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.ListPage.AddNewButton">
            <summary>
            Method that adds the New button or buttons to the List page.         
            A default New button is added that assumes a "RunDataPageNew" method within the same .NET dll.
            Note that a New button will always added on <c>ListPage.BuildContents</c> if the User has rights to insert into the current entity.
            </summary>
            <example>The following is an example of how to override the
            <c>AddNewButton</c> type:
              <code>
                public override void AddNewButton() 
                {
                    // Check the user permission and add a button
                    if (CurrentUser.HasRights(Sage.PermissionType.Insert, EntityName))
                        AddUrlButton("New", "new.gif", sUrl);
                }        
              </code>
            </example>
        </member>
        <member name="M:Sage.CRM.WebObject.ListPage.PreBuildContents">
            <summary>
            Obsolete, use the constructor instead to override this method.        
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.ListPage.BuildContents">
            <summary>
            This is the main control method for the ListPage. It adds the tabs, and the &lt;FORM&gt; tag, draws the EntryGroup and the list and the buttons.
            Override this to change the behaviour.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.ListPage.FilterBoxName">
            <summary>
            The name of the EntryGroup to be used as the filter box. This should be a search EntryGroup.        
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.ListPage.ListName">
            <summary>
            Specifies the grid that is used to display the records.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.ListPage.DeleteSql">
            <summary>
            A string that holds the extra SQL clause to filter out deleted records on standard CRM tables.
            If the EntityName property is set on the ListPage then DeleteSql is automatically configured within the PreBuildContents method to be "xxx_deleted IS NULL" and this clause is added on to the SQL when selecting records to display in the list.
            To override this behaviour, reset DeleteSql to blank or another clause at the start of a customized BuildContents().
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.ListPage.UseTabs">
            <summary>
            In the base BuildContents functions you can control whether tabs are drawn or not.
            Set this to false if you don't want tabs on the page, default is true.
            </summary>       
        </member>
        <member name="P:Sage.CRM.WebObject.ListPage.UseEntityTabs">
            <summary>
            In the base BuildContents functions you can control what tabs are drawn.
            Set this to true if you want to use EntityName on get tabs function. 
            The default value for this property is false.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.ListPage.UseWorkflow">
            <summary>
            <b>Obsolete</b> This property will not change the class behavior.
            The Workflow should be set on DataPage.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.ListPage.SearchScreen">
            <summary>
            <b>Obsolete</b> FilterScreen should be used instead.
            </summary>
            <remarks>The set option to this property isn't implemented.</remarks>
        </member>
        <member name="P:Sage.CRM.WebObject.ListPage.FilterScreen">
            <summary>
            Gets the current Filter Screen.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.ListPage.ResultsGrid">
            <summary>
            Gets the current List Grid.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.ListPage.FilterByField">
            <summary>
            Use this property to add one filter column.
            <remarks>The property <c>FilterByContextId</c> will be necessary</remarks>
            </summary>
            <example>The following is an example of how to use the 
            <c>FilterByField</c> property:
              <code>
                FilterByField = "pers_PesonID";
                FilterByContextId = (int)Sage.KeyList.PersonId;
              </code>
            </example>
        </member>
        <member name="P:Sage.CRM.WebObject.ListPage.FilterByContextId">
            <summary>
            Property used to set a context filter.
            <see cref="P:Sage.CRM.WebObject.ListPage.FilterByField"/>
            </summary>
        </member>
        <member name="T:Sage.CRM.Controls.List">
            <summary>
            Class to represent a CRM List.    
            </summary>
        </member>
        <member name="M:Sage.CRM.Controls.List.#ctor(System.String)">
            <summary>
            Initializes a new instance of <b>List</b>.
            </summary>
            <param name="listName">Metadata List Name.</param>
        </member>
        <member name="M:Sage.CRM.Controls.List.Finalize">
            <summary>
            Destructor for the List class.
            </summary>
        </member>
        <member name="M:Sage.CRM.Controls.List.HtmlBody">
            <summary>
            Returns the list HTML Body.
            </summary>
            <returns>HTML String.</returns>
        </member>
        <member name="M:Sage.CRM.Controls.List.IndexOf(Sage.CRM.Controls.GridCol)">
            <summary>
            Determines the index of a specific GridCol in the List.
            </summary>
            <param name="item">GridCol.</param>
            <returns>Index.</returns>
        </member>
        <member name="M:Sage.CRM.Controls.List.IndexOf(System.String)">
            <summary>
            Determines the index of a specific GridCol in the List.
            </summary>
            <param name="fieldName">Fieldname of column.</param>
            <returns>Index.</returns>
        </member>
        <member name="M:Sage.CRM.Controls.List.RemoveAt(System.Int32)">
            <summary>
            Removes the GridCol item at the specified index.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="M:Sage.CRM.Controls.List.Clear">
            <summary>
            Removes all GridCols from the List.
            </summary>
        </member>
        <member name="M:Sage.CRM.Controls.List.Contains(Sage.CRM.Controls.GridCol)">
            <summary>
            Determines whether the List contains a specific GridCol.
            </summary>
            <param name="item">GridCol.</param>
            <returns>True if the GridCol is found.</returns>
        </member>
        <member name="M:Sage.CRM.Controls.List.CopyTo(Sage.CRM.Controls.GridCol[],System.Int32)">
            <summary>
            Copies the GridCol to an Array, starting at a particular Array index.
            </summary>
            <param name="array">One-dimensional Array that is the destination.</param>
            <param name="arrayIndex">Index in array at which copying begins.</param>
        </member>
        <member name="M:Sage.CRM.Controls.List.Remove(Sage.CRM.Controls.GridCol)">
            <summary>
            Removes the first occurrence of a GridCol from the List.
            </summary>
            <param name="item">GridCol.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Sage.CRM.Controls.List.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Controls.List.Add(Sage.CRM.Controls.GridCol)">
            <summary>
            Adds an GridCol to the List.
            </summary>
            <param name="item">GridCol.</param>
        </member>
        <member name="M:Sage.CRM.Controls.List.Insert(System.Int32,Sage.CRM.Controls.GridCol)">
            <summary>
            Inserts an GridCol to the List at the specified index.
            </summary>
            <param name="index">Index</param>
            <param name="item">GridCol</param>
        </member>
        <member name="M:Sage.CRM.Controls.List.CreateGridCol(System.String)">
            <summary>
            Add a new column to the list.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Controls.List.Execute(System.String)">
            <summary>
            This method is obsolete. 
            </summary>
            <param name="whereFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Controls.List.GetViewHtml(System.String)">
            <summary>
            This method is obsolete.
            </summary>
            <param name="whereFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Controls.List.RemoveGridCol(System.String)">
            <summary>
            This method is obsolete. See the method Remove or RemoveAt
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Controls.List.GetGridCol(System.String)">
            <summary>
            This method is obsolete.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="P:Sage.CRM.Controls.List.CaptionFamily">
            <summary>
            Change the caption family used for the grid.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.List.PadBottom">
            <summary>
            Control whether to show empty rows in grid or not. Default value is true.
            </summary>
            <example>List.PadBottom = false;</example>
        </member>
        <member name="P:Sage.CRM.Controls.List.RowsPerScreen">
            <summary>
            Control how many rows are displayed in the grid. Default value is taken from the System default value.
            </summary>
            <example>List.RowsPerScreen = 8;</example>
        </member>
        <member name="P:Sage.CRM.Controls.List.SelectSql">
            <summary>
            Set the base clause of the select used to get rows for grid.
            </summary>
            <example>Select * from vCompany</example>
        </member>
        <member name="P:Sage.CRM.Controls.List.CountSql">
            <summary>
            Set a Custom count SQL to help the grid pagination. 
            This can be used to improve the grid performance.
            The SQL should return only one record which need to be named fcount and 
            represent the number of record returned by SelectSql + Filter properties.
            </summary>
            <example>Select count(*) as fcount from Company</example>        
        </member>
        <member name="P:Sage.CRM.Controls.List.ShowNavigationButtons">
            <summary>
            Set this to false to remove navigation buttons from a list, also removes the X of Y text from the title. Default value is true.
            </summary>
            <example>List.ShowNavigationButtons = false;</example>
        </member>
        <member name="P:Sage.CRM.Controls.List.HideTitle">
            <summary>
            Set this to true to remove the title from a list altogether. Default value is false.
            </summary>
            <example>List.HideTitle = true;</example>
        </member>
        <member name="P:Sage.CRM.Controls.List.ExtraRowContent">
            <summary>
            Use this to set extra attributes on to the &lt;TR&gt; tag for the header row of the list. Default value is blank.
            </summary>        
            <example>List.ExtraRowContent = "height=20"; </example>
        </member>
        <member name="P:Sage.CRM.Controls.List.Title">
            <summary>
            Set this to override the Title of the list (set it to the caption code as the value displayed will be translated with the "TabNames" family). Typically this would be used if you are not showing the Navigation buttons and you don’t want to display the default title which would include the total number of records.
            </summary>
            <example>List.Title = "CustomTitle";</example>
        </member>
        <member name="P:Sage.CRM.Controls.List.Filter">
            <summary>
            This value will be add to the SQL WHERE clause.
            </summary>
            <example>Filter := "comp_companyid >= 200 "</example>
        </member>
        <member name="P:Sage.CRM.Controls.List.CheckBoxColumn">
            <summary>
            Sets checkbox column for grid for SelectAll/DeselectAll feature.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.List.ShowSelectUnselectButton">
            <summary>
            Turns on/off SelectAll/DeselecAll feature (dependent on CheckboxColumn property).
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.List.SelectUnselectButtonOnClickScript">
            <summary>
            On click script attached to Select/Deselect button.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.List.Item(System.Int32)">
            <summary>
            Gets or sets the GridCol element at the specified index.
            </summary>
            <param name="index">Index (position) of the element.</param>
            <returns>GridCol.</returns>
        </member>
        <member name="P:Sage.CRM.Controls.List.Count">
            <summary>
            Gets the number of GridCol contained in the List.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.List.IsReadOnly">
            <summary>
            Gets a value indicating whether the List is read-only.
            </summary>
        </member>
        <member name="T:Sage.CRM.Blocks.MessageBlock">
            <summary>
            Provides an email form that can be added to the screen.
            </summary>
        </member>
        <member name="F:Sage.CRM.Blocks.MessageBlock._messageBlock">
            <summary>
            Interface to main application.
            </summary>
        </member>
        <member name="M:Sage.CRM.Blocks.MessageBlock.#ctor">
            <summary>
            Initializes a new instance of <b>MessageBlock</b>.
            </summary>
        </member>
        <member name="M:Sage.CRM.Blocks.MessageBlock.#ctor(System.String)">
            <summary>
            Initializes a new instance of <b>MessageBlock</b>.
            </summary>
            <param name="blockName">Block Name.</param>
        </member>
        <member name="M:Sage.CRM.Blocks.MessageBlock.Finalize">
            <summary>
            Destructor for the MessageBlock class.
            </summary>
        </member>
        <member name="M:Sage.CRM.Blocks.MessageBlock.AddRecipient(System.String,System.String,Sage.AddressTypes)">
            <summary>
            Adds a recipient to one of the message fields (TO, CC or BCC).
            </summary>
            <param name="address">The email address to which email will be sent.</param>
            <param name="name">The of the email recipient.</param>
            <param name="addressType">A value from Sage.AddressTypes.</param>
        </member>
        <member name="M:Sage.CRM.Blocks.MessageBlock.AddRecipient(System.String,System.String,System.String)">
            <summary>
            Adds a recipient to one of the message fields (TO, CC or BCC).
            </summary>
            <param name="address">The email address to which email will be sent.</param>
            <param name="name">Name of the email recipient.</param>
            <param name="addressType">The address type - can be "TO", "CC" or "BCC" - see Sage.AddressTypes.</param>
        </member>
        <member name="M:Sage.CRM.Blocks.MessageBlock.RemoveRecipient(System.String)">
            <summary>
            Removes all the occurrences of the address from the TO, CC and BCC fields.
            </summary>
            <param name="address"></param>
        </member>
        <member name="P:Sage.CRM.Blocks.MessageBlock.AddressFrom">
            <summary>
            Sets the From Address on the email that is being sent.
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.MessageBlock.Body">
            <summary>
            Sets the body text on the message.
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.MessageBlock.ErrorMessage">
            <summary>
            After the message has been sent, any errors will be saved here.
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.MessageBlock.NameFrom">
            <summary>
            The name of the email sender.
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.MessageBlock.SentOk">
            <summary>
            Is set to True or False after the message has been sent.
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.MessageBlock.ShowBCC">
            <summary>
            Enables the display of the blind carbon copy (BCC) field in the graphical interface.
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.MessageBlock.ShowCC">
            <summary>
            Enables the display of the carbon copy (CC) field in the graphical interface.
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.MessageBlock.Subject">
            <summary>
            Sets the subject text of the message.
            </summary>
        </member>
        <member name="T:Sage.CRM.Utils.Metadata">
            <summary>
            Class to get access to all metadata within the system including screens and lists.
            <see cref="P:Sage.CRM.WebObject.Web.Metadata"/>    
            </summary>
        </member>
        <member name="M:Sage.CRM.Utils.Metadata.GetParam(Sage.ParamNames)">
            <summary>
            Check the value of a system parameter.
            </summary>
            <param name="paramName">The name of the parameter.<see cref="T:Sage.ParamNames"/></param>
            <returns>String with the value of parameter.</returns>
        </member>
        <member name="M:Sage.CRM.Utils.Metadata.GetParam(System.String)">
            <summary>
            Check the value of a system parameter.
            </summary>
            <param name="paramName">The name of the parameter.<see cref="T:Sage.ParamNames"/></param>
            <returns>String with the value of parameter.</returns>
        </member>
        <member name="M:Sage.CRM.Utils.Metadata.GetTableInfo(System.String)">
            <summary>
            Creates a TableInfo object which holds configuration information about a table in the CRM database.
            </summary>
            <param name="tableName">Name or caption of the table to return.</param>
            <returns>A TableInfo object.<see cref="T:Sage.CRM.Utils.TableInfo"/></returns>
        </member>
        <member name="M:Sage.CRM.Utils.Metadata.GetTableInfoFromKey(System.Int32)">
            <summary>
            Creates a TableInfo object which holds configuration info about a table in the CRM database.
            </summary>
            <param name="KeyIndex">Key index of the table to return.</param>
            <returns>A TableInfo object.<see cref="T:Sage.CRM.Utils.TableInfo"/></returns>
        </member>
        <member name="M:Sage.CRM.Utils.Metadata.GetTranslation(System.String,System.String)">
            <summary>
            Gets the translation of a caption in the current user's language.
            </summary>
            <param name="family">Translation family.</param>
            <param name="code">Translation code.</param>
            <returns>Translated value.</returns>
        </member>
        <member name="M:Sage.CRM.Utils.Metadata.GetTranslation(System.String,System.String,System.Boolean)">
            <summary>
            Gets the translation of a caption in the current user language with option to switch off inline translation.
            </summary>
            <param name="family">Translation family.</param>
            <param name="code">Translation code.</param>
            <param name="nohottranslate">Do not use inline translation.</param>
            <returns>Translated value.</returns>
        </member>
        <member name="M:Sage.CRM.Utils.Metadata.TableAllowed(System.String)">
            <summary>
            Returns true if table is allowed to use in the system.
            </summary>
            <param name="ATableName">Table name to check.</param>
            <returns>True if table is allowed. False if table is not allowed.</returns>
        </member>
        <member name="M:Sage.CRM.Utils.Metadata.GetBlock(System.String)">
            <summary>
            Creates a SageCrmBlock object of the type specified.
            </summary>
            <param name="blockName">This can be one of the fixed available block types, or the name of an actual block that has been set up in Admin in CRM.
            The fixed block types available are: Marquee, Message, File, Graphic, Chart, Pipeline, OrgChart.</param>
            <returns>A SageCrmBlock object</returns>
        </member>
        <member name="M:Sage.CRM.Utils.Metadata.GetList(System.String)">
            <summary>
            Creates a list object from the metadata that can be used to display rows from a CRM table. This should be a list that has been configured within CRM Admin customization.
            </summary>
            <param name="listName">The name of the list to return.</param>
            <returns>A List object<see cref="T:Sage.CRM.Controls.List"/></returns>
        </member>
        <member name="M:Sage.CRM.Utils.Metadata.GetScreen">
            <summary>
            Creates an empty EntryGroup object with no fields in it. Fields can then be added as required with the EntryGroup.AddEntry() method.
            </summary>
            <returns>An EntryGroup object</returns>
        </member>
        <member name="M:Sage.CRM.Utils.Metadata.GetScreen(System.String)">
            <summary>        
            Creates a EntryGroup object from the metadata that can be used to view/edit data from a CRM table.
            </summary>
            <param name="screenName">Name of EntryGroup (screen). This should be an EntryGroup that has been configured within CRM Admin customization.</param>
            <returns>An EntryGroup object.</returns>
        </member>
        <member name="T:Sage.CRM.Controls.EntryGroup">
            <summary>
            Class to represent a CRM Screen.
            </summary>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.#ctor(System.String)">
            <summary>
            Initializes a new instance of <b>EntryGroup</b>.
            </summary>
            <param name="screenName">Metadata Screen Name.</param>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <b>EntryGroup</b>.
            </summary>
            <param name="screenName">Metadata Screen Name.</param>
            <param name="title">Box Title.</param>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of <b>EntryGroup</b>.
            </summary>
            <param name="screenName">Metadata Screen Name.</param>
            <param name="title">Box Title.</param>
            <param name="newLine">New Line.</param>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.Finalize">
            <summary>
            Destructor class for the EntryGroup. 
            </summary>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.Fill(Sage.DataSource)">
            <summary>
            Fills the EntryGroup with a value from FromContent or FromDefault.
            </summary>
            <param name="source"><see cref="T:Sage.DataSource"/></param>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.Fill(Sage.CRM.Data.Record)">
            <summary>
            Fills the EntryGroup with a value from Record.
            </summary>
            <param name="recordObject"><see cref="T:Sage.CRM.Data.Record"/></param>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.Fill(Sage.CRM.Data.Entity)">
            <summary>
            Fills the EntryGroup with a value from Entity.
            </summary>
            <param name="entityObject"><see cref="T:Sage.CRM.Data.Entity"/></param>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.GetEntry(System.String)">
            <summary>
            Returns an entry object, representing one of the fields within the screen.
            </summary>
            <param name="fieldName">Field name of one of the fields within the screen.</param>
            <returns>Entry object.</returns>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.GetHtmlInEditMode">
            <summary>
            Returns HTML to show the screen in edit mode.
            </summary>
            <returns>HTML string.</returns>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.GetHtmlInEditMode(Sage.DataSource)">
            <summary>
            Returns HTML to show the screen in edit mode.
            </summary>
            <param name="source">DataSource source.</param>
            <returns>HTML string.</returns>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.GetHtmlInEditMode(Sage.CRM.Data.Entity)">
            <summary>
            Returns HTML to show the screen in edit mode, getting values from the Entity Object.
            </summary>
            <param name="entityObject">Entity object pointing at a row.</param>
            <returns>HTML string.</returns>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.GetHtmlInEditMode(Sage.CRM.Data.Record)">
            <summary>
            Returns HTML to show the screen in edit mode, getting values from the Record Object.
            </summary>
            <param name="recordObject">Record object to render the HTML for.</param>
            <returns>HTML string.</returns>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.GetHtmlInViewMode(Sage.DataSource)">
            <summary>
            Returns HTML to show screen in View mode.
            </summary>
            <param name="source">DataSource source.</param>
            <returns>HTML string.</returns>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.GetHtmlInViewMode(Sage.CRM.Data.Entity)">
            <summary>
            Returns HTML to show screen in View mode, getting values from the Entity object.
            </summary>
            <param name="entityObject">Entity Object pointing at a record.</param>
            <returns>HTML string.</returns>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.GetHtmlInViewMode(Sage.CRM.Data.Record)">
            <summary>
            Returns HTML to show screen in View mode, getting values from entity object.
            </summary>
            <param name="recordObject">Entity Object pointing at a record.</param>
            <returns>HTML string.</returns>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.GetSqlForSearch">
            <summary>
            Generates SQL for searching, based on values filled in on screen.
            </summary>
            <returns>SQL where clause.</returns>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.Validate">
            <summary>
            Validates the values on screen for each of the entrys in the screen.
            </summary>
            <returns>True if successfull.</returns>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.HtmlBody">
            <summary>
            Returns HTML to show a screen.
            </summary>
            <returns>HTML String.</returns>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.IndexOf(Sage.CRM.Controls.Entry)">
            <summary>
            Determines the index (position) of a specific Entry in the List.
            </summary>
            <param name="item">Entry.</param>
            <returns>Index of Entry.</returns>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.Add(Sage.CRM.Controls.Entry)">
            <summary>
            Adds an Entry to the List.
            </summary>
            <param name="item">Entry.</param>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.Insert(System.Int32,Sage.CRM.Controls.Entry)">
            <summary>
            Inserts an Entry to the List at the specified index (position).
            </summary>
            <param name="index">Index of Entry.</param>
            <param name="item">Entry.</param>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.RemoveAt(System.Int32)">
            <summary>
            Removes the Entry item at the specified index (position).
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.Clear">
            <summary>
            Removes all Entry from the List.
            </summary>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.Contains(Sage.CRM.Controls.Entry)">
            <summary>
            Determines whether the List contains a specific Entry.
            </summary>
            <param name="item">Entry.</param>
            <returns>True if the Entry is found.</returns>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.CopyTo(Sage.CRM.Controls.Entry[],System.Int32)">
            <summary>
            Copies the Entrys to an Array, starting at a particular Array index.
            </summary>
            <param name="array">One-dimensional Array that is the destination.</param>
            <param name="arrayIndex">Index in array at which copying begins.</param>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.Remove(Sage.CRM.Controls.Entry)">
            <summary>
            Removes the first occurrence of a Entry from the List.
            </summary>
            <param name="item">Entry.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.CreateEntry(System.String)">
            <summary>
            Creates and adds a new field to this EntryGroup.
            </summary>
            <param name="fieldName">Name of the field to add. If this is an existing field within CRM then the field will be created with the properties of that field, otherwise it will be  a "Blank" field, and the entry type and other controlling properties must be set explicitly.</param>
            <returns>Entry object representing the field just added.</returns>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.CreateEntrySelect(System.String)">
            <summary>
            This method is obsolete.
            </summary>
            <example>
            Use this code instead:
            <code>
                EntryGroup screenCompany = new EntryGroup("CompanyBoxLong");
                EntrySelect es = New EntrySelect("comp_phonenumber")
                screenCompany.Add(es);
            </code>
            </example>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.CreateEntrySelectTable(System.String)">
            <summary>
            This method is obsolete. See EntryGroup.CreateEntrySelect.
            </summary>        
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.FillEntityFromContent(Sage.CRM.Data.Record)">
            <summary>
            Enters values from a screen into an Entity object.
            </summary>
            <param name="recordObject"></param>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.RemoveEntry(System.String)">
            <summary>
            Obsolete. Use Sage.CRM.Controls.EntryGroup.RemoveAt or Sage.CRM.Controls.EntryGroup.Remove instead.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Controls.EntryGroup.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.EntryGroup.EntityName">
            <summary>
            Gets the Entity Name for the current EntityGroup.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.EntryGroup.NewLine">
            <summary>
            Specifies whether this EntryGroup appears on a new line when the group is added to DataPage.EntryGroups.        
            </summary>                
        </member>
        <member name="P:Sage.CRM.Controls.EntryGroup.Rows">
            <summary>
            Number of rows this group should take up within HTML &lt;TABLE&gt; control.
            <value>The minimal value is 1.</value>
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.EntryGroup.Cols">
            <summary>
            Number of columns this group should take up within HTML &lt;TABLE&gt; control.
            <value>The minimal value is 1.</value>
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.EntryGroup.CustomContent">
            <summary>
            Sets the Custom Content on the EntryGroup. This is extra HTML or Javascript that will be included when the EntryGroup is rendered.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.EntryGroup.ModeUpdated">
            <summary>
            Returns true if the mode was updated externally.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.EntryGroup.Mode">
            <summary>
            Gets or Sets the Current Mode to the EntryGroup.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.EntryGroup.hasRecord">
            <summary>
            Return true if the EntryGroup has a record correctly set.
            </summary>
            <see cref="M:Sage.CRM.Controls.EntryGroup.Fill(Sage.CRM.Data.Record)"/>
        </member>
        <member name="P:Sage.CRM.Controls.EntryGroup.getRecord">
            <summary>
            Return the current record for the EntryGroup.
            </summary>
            <see cref="M:Sage.CRM.Controls.EntryGroup.Fill(Sage.CRM.Data.Record)"/>
        </member>
        <member name="P:Sage.CRM.Controls.EntryGroup.IsReadOnly">
            <summary>
            Gets a value indicating whether the EntryGroup is read-only.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.EntryGroup.Item(System.Int32)">
            <summary>
            Gets or sets the Entry element at the specified index (position).
            </summary>
            <param name="index">Index.</param>
            <returns>Entry.</returns>
        </member>
        <member name="P:Sage.CRM.Controls.EntryGroup.Count">
            <summary>
            Gets the number of Entries contained in the List.
            </summary>
        </member>
        <member name="T:Sage.CRM.Utils.Dispatch">
            <summary>
            Use this for controlling database transactions and locks.
            Also gives access to Cookies, Content and Query fields.    
            <see cref="P:Sage.CRM.WebObject.Web.Dispatch"/>
            </summary>
        </member>
        <member name="M:Sage.CRM.Utils.Dispatch.Commit">
            <summary>
            Commits the current transation. StartTransaction must have been called previously.
            </summary>
        </member>
        <member name="M:Sage.CRM.Utils.Dispatch.ContentField(System.String)">
            <summary>
            Gets the value of a field from the content fields.
            </summary>
            <param name="fieldName">Name of field whose value to retrieve.</param>
            <returns>The value of the field from the Content fields. Returns a blank string if the field does not exist or if the value is blank.</returns>
        </member>
        <member name="M:Sage.CRM.Utils.Dispatch.ContentFields">
            <summary>
            Get all values in the content request.
            </summary>
            <returns>List with key value pair of all items in the content</returns>
        </member>
        <member name="M:Sage.CRM.Utils.Dispatch.QueryFields">
            <summary>
            Get all values in the query request.
            </summary>
            <returns>List with key value pair of all items in the query</returns>
        </member>
        <member name="M:Sage.CRM.Utils.Dispatch.ContentFieldValues(System.String)">
            <summary>
            Gets all values of a multi-select field.
            </summary>
            <param name="fieldName">Name of field whose values to retrieve</param>
            <returns>String list with the values of the field. If --None-- or Blank option is selected the list will contain an empty item. The list will
            have size 0 only if no option is selected.</returns>
        </member>
        <member name="M:Sage.CRM.Utils.Dispatch.EitherField(System.String)">
            <summary>
            Gets the value of the specified field from either the content fields or the query fields.
            Queryfields are checked first, if there is no value there then the content fields are checked.
            </summary>
            <param name="fieldName">The name of the field whose value to retrieve.</param>
            <returns>The value of the field from either the Query fields or the Content fields.</returns>
        </member>
        <member name="M:Sage.CRM.Utils.Dispatch.FreeLocks">
            <summary>
            Release any locks held by the current user. This means locks held in the CRM Locks table that may have been added by a call to GetLock().
            </summary>
        </member>
        <member name="M:Sage.CRM.Utils.Dispatch.GetCookieValue(System.String)">
            <summary>
            Returns the value of the specified cookie.
            </summary>
            <param name="cookieName">The name of the cookie whose value to retrieve.</param>
            <returns>The value of that cookie.</returns>
        </member>
        <member name="M:Sage.CRM.Utils.Dispatch.GetLock(System.String,System.Int32)">
            <summary>
            Creates a lock for a user on the specified record in specified table. This will ensure that no other user can update the same record. This adds a record to the CRM Locks table. When the updates are completed, the lock should be freed using the FreeLocks() method.
            </summary>
            <param name="tableName">The table caption for the table being altered.</param>
            <param name="recordId">The id of the row in the table being altered.</param>
            <returns>A blank string if successful, otherwise an error message. GetLock will fail if another user currently has the same record locked.</returns>
        </member>
        <member name="M:Sage.CRM.Utils.Dispatch.Redirect(System.String)">
            <summary>
            Redirect to the given URL.
            </summary>
            <param name="url">URL to redirect to.</param>
        </member>
        <member name="M:Sage.CRM.Utils.Dispatch.Rollback">
            <summary>
            Rollback the current transaction. StartTransaction must have been called previously to start the transaction.
            </summary>
        </member>
        <member name="M:Sage.CRM.Utils.Dispatch.ServerVariable(System.String)">
            <summary>
            Creates a value from Request.ServerVariables list.
            </summary>
            <param name="variableName">The name of the variable to retrieve.</param>
            <returns>The value of the given variable.</returns>
        </member>
        <member name="M:Sage.CRM.Utils.Dispatch.SetCookieValue(System.String,System.String)">
            <summary>
            Saves a value into the specified cookie.
            </summary>
            <param name="cookieName">The name of the cookie to update.</param>
            <param name="value">The value to save in the given cookie name.</param>
        </member>
        <member name="M:Sage.CRM.Utils.Dispatch.StartTransaction">
            <summary>
            Starts a new transaction on the database.
            Transactions must be commited or rolled back, using Commit() or Rollback() methods.
            </summary>
        </member>
        <member name="M:Sage.CRM.Utils.Dispatch.QueryField(System.String)">
            <summary>
            Gets the value from the query fields for the specified fieldname.
            </summary>
            <param name="fieldName">The name of the field whose value to retrieve.</param>
            <returns>The value of the given field in the Query fields. Value will be blank if the field does not exist or if it is blank.</returns>
        </member>
        <member name="P:Sage.CRM.Utils.Dispatch.DatabaseName">
            <summary>
            Returns the name of the database for this install (readonly).
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.Dispatch.Host">
            <summary>
            Returns the name of the web server on which the CRM install is running (readonly).
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.Dispatch.InstallName">
            <summary>
            Returns the name of the current install (readonly).
            </summary>
        </member>
        <member name="P:Sage.CRM.Utils.Dispatch.Version">
            <summary>
            Returns the current version of the CRM being used (readonly).
            </summary>        
        </member>
        <member name="P:Sage.CRM.Utils.Dispatch.TabGroupName">
            <summary>
            Returns the TabGroupName for the current context.
            </summary>
        </member>
        <member name="T:Sage.Captions">
            <summary>
            Returns the caption code for various system captions. For example, Sage.Captions.sCap_UserSettingName returns the caption code “UserSettingName”. This code can be found in the custom_caption table and can be used to easily find translations for example “Metadata.GetTranslation(Captions.sFam_Button, Captions.sCap_TabSearch);” or “Metadata.GetTranslation("Button", "Search");” Both of these will show the same result.Class for translating text to the user's language. There is a property for each caption. 
            </summary>
        </member>
        <member name="T:Sage.CRM.Data.QuerySelect">
            <summary>
            Object to do simple select querys on the CRM database.
            <see cref="M:Sage.CRM.WebObject.Web.GetQuery"/>
            </summary>
        </member>
        <member name="M:Sage.CRM.Data.QuerySelect.#ctor">
            <summary>
            Initializes a new instance of <b>QuerySelect</b>.
            </summary>
        </member>
        <member name="M:Sage.CRM.Data.QuerySelect.Finalize">
            <summary>
            Destructor for QuerySelect.
            </summary>
        </member>
        <member name="M:Sage.CRM.Data.QuerySelect.Eof">
            <summary>
            Checks whether the query is at EOF.
            </summary>
            <returns>true/false</returns>
        </member>
        <member name="M:Sage.CRM.Data.QuerySelect.FieldValue(System.String)">
            <summary>
            Retrieves the value from any field in the query.
            </summary>
            <param name="fieldName">Any fieldname previously selected in the query.</param>
            <returns>The field value.</returns>
        </member>
        <member name="M:Sage.CRM.Data.QuerySelect.FieldValueAsDate(System.String)">
            <summary>
            Returns the Field value as DateTime.
            </summary>
            <param name="fieldName">Field Name.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:Sage.CRM.Data.QuerySelect.Next">
            <summary>
            Moves onto the next row in the select.
            </summary>
        </member>
        <member name="M:Sage.CRM.Data.QuerySelect.ExecuteNonQuery">
            <summary>
            Call ExecuteNonQuery to execute the SQL statement currently assigned to the SQLCommand property. 
            Use to execute queries that do not return a set of records (such as INSERT, UPDATE, DELETE, and CREATE TABLE).
            </summary>
            <returns>Number of rows affected by the executed command.</returns>
        </member>
        <member name="M:Sage.CRM.Data.QuerySelect.ExecuteReader">
            <summary>
            Call ExecuteReader to execute the SQL statement currently assigned to the SQLCommand property.
            Use to execute queries that return a set of records (such as SELECT).
            </summary>
        </member>
        <member name="M:Sage.CRM.Data.QuerySelect.SelectSql(System.String)">
            <summary>
            Executes a SQL command on the CRM database.
            </summary>
            <param name="sql">SQL Query.</param>
        </member>
        <member name="M:Sage.CRM.Data.QuerySelect.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Sage.CRM.Data.QuerySelect.SQLCommand">
            <summary>
            Gets or sets the SQL statement to execute.
            </summary>
        </member>
        <member name="T:Sage.KeyList">
            <summary>
            List of Key Ids - use with Keys to get the current context.
            </summary>
        </member>
        <member name="T:Sage.CRM.UI.ContentBox">
            <summary>
            Class to represent a ContentBox.
            </summary>
        </member>
        <member name="M:Sage.CRM.UI.ContentBox.#ctor">
            <summary>
            Initializes a new instance of <b>ContentBox</b>.
            </summary>
        </member>
        <member name="M:Sage.CRM.UI.ContentBox.#ctor(Sage.CRM.UI.UIObject)">
            <summary>
            Initializes a new instance of <b>ContentBox</b>.
            </summary>
            <param name="inner">Inner Object.</param>
        </member>
        <member name="M:Sage.CRM.UI.ContentBox.HtmlBody">
            <summary>
            Returns the ContentBox Body.
            </summary>
            <returns>ContentBox Body as string.</returns>
        </member>
        <member name="P:Sage.CRM.UI.ContentBox.Inner">
            <summary>
            Gets or sets the object which will be added to the ContentBox. 
            </summary>
        </member>
        <member name="T:Sage.CRM.Controls.EntryAdvSearchSelect">
            <summary>
            Class used to represent Advanced Select Search.
            </summary>
        </member>
        <member name="F:Sage.CRM.Controls.EntryAdvSearchSelect.iEntryAdvSearchSelect">
            <summary>
            Interface to represent the EntryAdvSearchSelect on Unmanaged Code. This should be used only
            for inherited classes.
            </summary>
        </member>
        <member name="M:Sage.CRM.Controls.EntryAdvSearchSelect.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <b>EntryAdvSearchSelect</b>.
            </summary>
            <param name="fieldName">Field Name.</param>
            <param name="SearchEntity">Search Entity.</param>
        </member>
        <member name="P:Sage.CRM.Controls.EntryAdvSearchSelect.Restrictor">
            <summary>
            Gets or sets the Restrictor value.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.EntryAdvSearchSelect.SearchEntity">
            <summary>
            Gets the current Search Entity.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.EntryAdvSearchSelect.TiedFields">
            <summary>
            Gets or sets the TiedFields property.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.EntryAdvSearchSelect.SearchTable">
            <summary>
            Gets or sets the SearchTable property.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.EntryAdvSearchSelect.ViewField">
            <summary>
            Gets or sets the ViewField property.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.EntryAdvSearchSelect.ssViewFields">
            <summary>
            Gets or sets the ssViewFields property.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.EntryAdvSearchSelect.IdField">
            <summary>
            Gets or sets the IdField property.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.EntryAdvSearchSelect.SearchMultiple">
            <summary>
            Gets or sets the SearchMultiple property.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.EntryAdvSearchSelect.SearchSql">
            <summary>
            Gets or sets the SearchSql property.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.EntryAdvSearchSelect.DisableValueHyperlinking">
            <summary>
            Enable or Disable the Hyperlinking value.
            </summary>
        </member>
        <member name="T:Sage.CRM.Controls.GridCol">
            <summary>
            Represents a single column on a grid.
            <returnedby>List.GetGridCol, List.AddGridCol</returnedby>    
            </summary>
        </member>
        <member name="F:Sage.CRM.Controls.GridCol._gridCol">
            <summary>
            Interface to represent the GridCol on Unmanaged Code. This should be used only
            for inherited classes.
            </summary>
        </member>
        <member name="M:Sage.CRM.Controls.GridCol.#ctor(System.String)">
            <summary>
            Initializes a new instance of <b>GridCol</b>.
            </summary>
            <param name="fieldName">Field Name.</param>
        </member>
        <member name="M:Sage.CRM.Controls.GridCol.#ctor(System.String,Sage.EntryTypes)">
            <summary>
            Initializes a new instance of <b>GridCol</b>.
            </summary>
            <param name="fieldName">Field Name.</param>
            <param name="type">Used to override the GridCol Type on unmanaged code.</param>
        </member>
        <member name="M:Sage.CRM.Controls.GridCol.Finalize">
            <summary>
            Destructor class for GridCol.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.GridCol.Alignment">
            <summary>
            Specifies the alignment of text within the column.
            Values can be "LEFT", "RIGHT" or "CENTER". If not set, the default is "LEFT".
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.GridCol.AllowOrderBy">
            <summary>
            Specifies that the list can be sorted by the values in the column.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.GridCol.CreateScript">
            <summary>
            Allows you to set the CreateScript value on a GridCol object. It corresponds to the CreateScript field in Administration |Customization | &lt;Entity&gt; | Lists when editing a list.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.GridCol.CustomActionFile">
            <summary>
            This property is relevant when the JumpAction property is set to '430' (CustomPage action). This enables a column to be hyperlinked to an ASP file. 
            When an item in this column is selected the ASP file is called up, passing in the value of the field set in the CustomIdField property in the query string.
            This property can be set to the name of any ASP file that resides in the CustomPages folder
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.GridCol.CustomIdField">
            <summary>
            If CustomActionFile is set on a column, then the CustomIdField property allows a value to be passed to the custom file when the column is selected. 
            The value is passed on the QueryString in the form "FieldName=Value".
            This property should be set to the name of any field within the view for the list. 
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.GridCol.JumpAction">
            <summary>
            Action to be invoked.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.GridCol.JumpEntity">
            <summary>
            Gets or Sets the JumpEntity. 
            <remarks>The Properties Values for JumpAction and JumpKey will be reset.</remarks>
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.GridCol.JumpKey">
            <summary>
            Which key is used by this action e.g. (int)KeyList.CompanyId.
            </summary>
            <see cref="T:Sage.KeyList"/>
        </member>
        <member name="P:Sage.CRM.Controls.GridCol.OrderByDescending">
            <summary>
            If the AllowOrderBy property is true, this property specifies that the list should be sorted by the values in this column in descending order initially. 
            The order can always be reversed by clicking on the column header.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.GridCol.ShowHeading">
            <summary>
            Specifies whether a header should be shown on the column.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.GridCol.ShowSelectAsGif">
            <summary>
            Specifies whether the values in the column should be shown as GIF images instead of Text. 
            This is relevant if the column is a Select type and there are GIF files in the folder for each option on the list.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.GridCol.IsVisible">
            <summary>
            Specifies whether this column will be displayed in the list or not.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.GridCol.Name">
            <summary>
            Get the name of the GridCol.
            </summary>
        </member>
        <member name="T:Sage.CRM.Blocks.OrgGraphicBlock">
            <summary>
            The organizational graphic is an implementation of the Graphic Block that is used for organizational charting.
            These diagrams can be drawn from data supplied to them from an Application Extension or from data stored in a table.
            Other parameters can also be set to describe the look of the diagram.
            The most common use of these diagrams is to display an employee hierarchy for a company.
            Currently, all the parameters and data are set through the OrgTree command.
            As with the Graphics Block, the organizational graphic is recreated every time it is requested and can therefore be based on real time data.    
            </summary>
        </member>
        <member name="M:Sage.CRM.Blocks.OrgGraphicBlock.#ctor">
            <summary>
            Initializes a new instance of <b>OrgGraphicBlock</b>.
            </summary>
        </member>
        <member name="M:Sage.CRM.Blocks.OrgGraphicBlock.#ctor(System.String)">
            <summary>
            Initializes a new instance of <b>OrgGraphicBlock</b>.
            </summary>
            <param name="blockName">Block Name.</param>
        </member>
        <member name="M:Sage.CRM.Blocks.OrgGraphicBlock.Finalize">
            <summary>
            Destructor for the OrgGraphicBlock object.
            </summary>
        </member>
        <member name="M:Sage.CRM.Blocks.OrgGraphicBlock.OrgTree(Sage.CRM.Graphics.OrgTreeProperties,System.String)">
            <summary>
            Currently, all properties and data are set through the 'OrgTree' command. It returns a string value as is required for some of the commands that may be passed to it. 
            Some of the commands alter the appearance whilst others may be used to obtain counts on the branches in use. Please refer to "Chapter - Adding Graphics and Charts" in the System Administration Guide for a more detailed explanation of the options.
            </summary>
            <param name="property">Sage.Graphics.OrgTreeProperties</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Blocks.OrgGraphicBlock.OrgTree(System.String,System.String)">
            <summary>
            Currently, all properties and data are set through the 'OrgTree' command. It returns a string value as is required for some of the commands that may be passed to it. 
            Some of the commands alter the appearance whilst others may be used to obtain counts on the branches in use. Please refer to "Chapter - Adding Graphics and Charts" in the System Administration Guide for a more detailed explanation of the options.
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Sage.CRM.WebObject.DataPage">
            <summary>
            A page used to view an existing record.
            Diplays Edit and Continue buttons.
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPage.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <b>DataPage</b>.
            </summary>
            <param name="entityName">Entity Name.</param>
            <param name="idField">Entity ID Field.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPage.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <b>DataPage</b>.
            </summary>
            <param name="entityName">Entity Name.</param>
            <param name="idField">Entity ID Field.</param>
            <param name="screenName">Screen Name.</param>
        </member>
        <member name="F:Sage.CRM.WebObject.DataPage.ContinueMethod">
             <summary>
             Default method name that retrieves the delete page in a Custom Dll's when user chooses to delete a record.
             This is the name applied when a Custom Dll is created using the SDK wizard.
             This value can be changed if you need another method accessed.
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPage.AddContinueButton">
            <summary>
            Adds the standard Continue button to the page. Override this to remove or change behaviour of the Continue button.
            The default continue button will redirect to the same .NET dll, calling the "RunListPage" method.
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPage.AddEditButton">
            <summary>
            Adds the standard edit button, if the user has rights to edit the current record. Override this to remove or change the edit button.
            The default edit button redirects to the same .NET dll, calling the "RunDataPageEdit" entry point method.
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPage.BuildContents">
            <summary>
            Main control method for a DataPage - shows data in view mode with appropriate 
            Edit/Delete/Continue buttons.
            </summary>
        </member>
        <member name="F:Sage.CRM.WebObject.DataPage.Key">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="F:Sage.CRM.WebObject.DataPage.EditMode">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPage.EntryGroups_GetHtml(Sage.Mode,Sage.DataSource)">
            <summary>
            This method is called from within the core BuildContents method to get the HTML that renders
            the data on the screen.
            Override this to add your own HTML.
            </summary>
            <param name="iMode">Can be Sage.Mode.View or Sage.Mode.Edit</param>
            <param name="source">Can be Sage.DataSource.FromContent or Sage.DataSource.FromDefault.</param>
            <returns>HTML string.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPage.EntryGroups_GetHtml(Sage.Mode,Sage.CRM.Data.Record)">
            <summary>
            This method is called from within the core BuildContents method to get the HTML that renders
            the data on the screen from a record object.
            Override this to add in your own HTML.
            </summary>
            <param name="iMode">Can be Sage.Mode.View or Sage.Mode.Edit.</param>
            <param name="info">Record object that holds the data to be displayed.</param>
            <returns>HTML string.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPage.Screens_FillScreensArray">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPage.AddMainTitle">
            <summary>
            This is called in BuildContents method to display a title on the screen.
            Override this method to add content to the top of the DataPage.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.DataPage.ContinueButton">
            <summary>
            String value to describe a button used on the page. 
            Datapage has a ButtonsToExclude list. Add the name of this button if you do not want it rendered.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.DataPage.isWorkflowPostBack">
            <summary>
            Return true if is this is a Workflow Post Back.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.DataPage.EditButton">
            <summary>
            String value to describe a button used on the page. 
            Datapage has a ButtonsToExclude list. Add the name of this button if you do not want it rendered.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.DataPage.EntryGroupNames">
            <summary>
            Returns an array of the names of the EntryGroups that will be displayed on the page.
            </summary>   
        </member>
        <member name="T:Sage.CRM.Controls.EntryCustom">
            <summary>
            Class to represent a Custom Entry.
            </summary>
        </member>
        <member name="F:Sage.CRM.Controls.EntryCustom.iCrmEntryDotNet">
            <summary>
            Interface to represent the EntryCustom on Unmanaged Code. This should be used only
            for inherited classes
            </summary>
        </member>
        <member name="F:Sage.CRM.Controls.EntryCustom._body">
            <summary>
            Class to represent the custom .NET HTML body.
            </summary>
        </member>
        <member name="M:Sage.CRM.Controls.EntryCustom.#ctor(System.String,Sage.CRM.UI.UIEntry)">
            <summary>
            Initializes a new instance of <b>EntryCustom</b>.
            </summary>
            <param name="fieldName">Metadata Field Name.</param>
            <param name="body">UIEntry to encapsulate the HTML.</param>
        </member>
        <member name="P:Sage.CRM.Controls.EntryCustom.Body">
            <summary>
            Gets or sets the EntryCustom Body.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.EntryCustom.OnChangeScript">
            <summary>
            Specifies the JavaScript to be executed when the value in the field is edited.
            </summary>
        </member>
        <member name="T:Sage.CRM.HTML.HTMLBuilder">
            <summary>
            This class is used to group all the HTML helper methods that are available to help build up HTML to add using Addcontent.
            </summary>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.BlankRow">
            <summary>
            Provides HTML to display a blank row in the standard CRM style.
            Must be used within a TABLE tag.
            </summary>
            <returns>HTML for a blank row (string).</returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.Box(System.String,System.String)">
            <summary>
            Returns HTML for a CRM style screen complete with title.
            </summary>
            <param name="header">Caption Code for the screen, translatable with "TabNames" family.</param>
            <param name="content">HTML content for the screen, should be result of an EntryGroup.GetEditHTML.. or EntryGroup.GetViewHTML.. or any complete &lt;TABLE&gt; tag.</param>
            <returns>HTML string.</returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.BoxContent(System.String)">
            <summary>
            Adds content to a box.
            </summary>
            <param name="contentString">The content to display within the box.</param>
            <returns>HTML string.</returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.BoxContent(System.String,System.Int32,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Adds content to a box with more control over the layout.
            </summary>
            <param name="contentString">The content to display within the box.</param>
            <param name="cols">Number of colums.</param>
            <param name="boxClass">Class to apply to the box content.</param>
            <param name="drawBottomBorder">Whether to include the bottom border of the box.</param>
            <param name="drawTopBorder">Whether to include the top border of the box.</param>
            <param name="id">Id value to be apply to box content so it can be referenced elsewhere.</param>
            <returns>HTML string.</returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.BoxTitle(System.String)">
            <summary>
            Adds a header with a title.
            </summary>
            <param name="title">Title code for the header. This will be translated with the "TabNames" family.</param>
            <returns>HTML for the header.</returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.BoxTitle(System.String,System.String)">
            <summary>
            Adds a clickable header.
            </summary>
            <param name="title">Title code for the header. This will be translated with the "TabNames" family.</param>
            <param name="url">URL to redirect to when header is clicked.</param>
            <returns>HTML for the header.</returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.BoxTitle(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Adds a clickable header with more control.
            </summary>
            <param name="title">Title code for the header, this will be translated with the "TabNames" family.</param>
            <param name="url">URL to redirect to when header is clicked.</param>
            <param name="showWideCaption">Whether to spread the title over more than 1 column.</param>
            <param name="id">ID to apply to the header so it can be referenced elsewhere.</param>
            <returns>HTML string.</returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.BoxTitle(System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Adds a clickable header with more control.
            </summary>
            <param name="title">Title code for the header, this will be translated with the "TabNames" family.</param>
            <param name="url">URL to redirect to when header is clicked.</param>
            <param name="showWideCaption">Whether to spread the title over more than 1 column.</param>
            <param name="id">ID to apply to the header so it can be referenced elsewhere.</param>
            <param name="addToTitle">String value to be added to the right of title.</param>
            <returns>HTML string.</returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.Div(System.String,System.String,System.String)">
            <summary>
            Low level method to get HTML for a &lt;DIV&gt; tag.
            </summary>
            <param name="divId">The ID to be applied to the &lt;DIV&gt; tag, by which it can be referenced </param>
            <param name="divClass">The class to be applied to the &lt;DIV&gt;</param>
            <param name="divContent">The content to be placed in the &lt;DIV&gt;</param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.Div(System.String,System.String,System.String,System.String)">
            <summary>
            Low level method to get HTML for a &lt;DIV&gt; tag with extra control
            </summary>
            <param name="divId">The ID to be applied to the &lt;DIV&gt; tag, by which it can be referenced.</param>
            <param name="divClass">The class to be applied to the &lt;DIV&gt;.</param>
            <param name="divContent">The content to be placed in the &lt;DIV&gt;.</param>
            <param name="extraControl">Extra control settings that will be applied within the &lt;DIV&gt; tag eg STYLE="text-indent:25".</param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.EndTable">
            <summary>
            Get HTML to end a &lt;TABLE&gt; tag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.Form">
            <summary>
            Creates a form element with no action information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.Form(System.Int32,System.Int32)">
            <summary>
            Creates a form element with action information.
            </summary>
            <param name="iAction"></param>
            <param name="iMode"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.InputCheckBox(System.String,System.Boolean)">
            <summary>
            Low level method to get HTML to display a check box.
            </summary>
            <param name="fieldName">Name to be applied to check box.</param>
            <param name="isChecked">Whether the check box is checked initially.</param>
            <returns>HTML string.</returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.InputCheckBox(System.String,System.Boolean,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Low level method to get HTML to display a check box, with more control.
            </summary>
            <param name="fieldName">Name to be applied to check box.</param>
            <param name="isChecked">If the check box is to be checked initially.</param>
            <param name="onClick">Javascript to be applied to the onClick event.</param>
            <param name="fieldValue">String to set as the value property of checkbox.</param>
            <param name="isDisabled">Whether the checkbox is disabled.</param>
            <param name="content">Extra content to be put within a &lt;LABLE&gt; tag.</param>
            <param name="altValue">Text to show as the ALT value (when hovering over the checkbox).</param>
            <returns>HTML string.</returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.InputHidden(System.String,System.String)">
            <summary>
            Gets HTML to add a hidden field to the page.
            </summary>
            <param name="fieldName">Fieldname.</param>
            <param name="fieldValue">Value.</param>
            <returns>The HTML to draw a hidden field.</returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.InputMultiText(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Low level method to get HTML to add a multi line text entry to the page.
            </summary>
            <param name="fieldName">Field Name.</param>
            <param name="fieldValue">Initial value.</param>        
            <param name="fieldWidth">Width of the text box (in characters).</param>
            <param name="fieldHeight">Height of the text box (in rows).</param>
            <param name="onChange">Script to be assigned to OnChange event.</param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.InputPassword(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Low level method to get HTML to add a password entry field to the page.
            </summary>
            <param name="fieldName">Field Name.</param>
            <param name="fieldValue">Initial value.</param>
            <param name="maxChars">Maximum number of characters that can be entered.</param>
            <param name="fieldWidth">Physical size of field (in characters).</param>        
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.InputRadioButton(System.String,System.String,System.Boolean,System.String,System.Boolean,System.String)">
            <summary>
            Low level method to get HTML to display a radio button field.
            </summary>
            <param name="fieldName">Field Name, all radio buttons within the same group should have the same field name.</param>
            <param name="fieldValue">Initial value.</param>
            <param name="isChecked">Whether this radio button is checked, only one radio button within the group should have this set to True initially.</param>
            <param name="action"></param>
            <param name="isDisabled">Whether the button is disabled.</param>
            <param name="extraContent">Extra content to be applied within the &lt;INPUT&lt; tag.</param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.InputText(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Low level method to get HTML to display a text entry field.
            </summary>
            <param name="fieldName">Field Name.</param>
            <param name="fieldValue">Initial Value.</param>
            <param name="maxChars">Maximum number of characters that can be entered.</param>
            <param name="fieldWidth">Physical size of field (in characters).</param>        
            <returns>HTML string.</returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.InputText(System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Low level method to get HTML to display a text entry field.
            </summary>
            <param name="fieldName">Field Name.</param>
            <param name="fieldValue">Initial Value.</param>
            <param name="maxChars">Maximum number of characters that can be entered.</param>
            <param name="fieldWidth">Physical size of field (in characters).</param>        
            <param name="onClick">Javascript to be applied to the onClick event.</param>
            <param name="onChange">Javascript to be applied to the onChange event.</param>
            <param name="isReadOnly">Whether the text box is readonly or not.</param>
            <param name="extraContent">Extra content to be applied within the &lt;INPUT&lt; tag.</param>
            <returns>HTML string.</returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.StartTable">
            <summary>
            Get HTML to start a &lt;TABLE&gt;.
            </summary>
            <returns>HTML string.</returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.Span(System.String,System.String)">
            <summary>
            Low level method to get HTML to draw a &lt;SPAN&gt; tag.
            </summary>
            <param name="spanId">The ID to be applied to the &lt;SPAN&gt; so it can be referenced elsewhere.</param>
            <param name="spanContent">The content to be place within the &lt;SPAN&gt; tag.</param>
            <returns>HTML string.</returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.Span(System.String,System.String,System.String)">
            <summary>
            Low level method to get HTML to draw a &lt;SPAN&gt; tag with extra control.
            </summary>
            <param name="spanId">The ID to be applied to the &lt;SPAN&gt; so it can be referenced elsewhere.</param>
            <param name="spanContent">The content to be place within the &lt;SPAN&gt; tag.</param>
            <param name="extraControl">Extra that will be placed within the &lt;SPAN&gt; opening tag e.g.: STYLE="visibility:hidden".</param>
            <returns>HTML string.</returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.Table(System.String)">
            <summary>
            Provides HTML that draws a table in standard CRM style.
            </summary>
            <param name="contentString">Value to be placed inside the &lt;TABLE&gt; tag.</param>
            <returns>HTML for a &lt;table&gt;.</returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.Table(System.String,System.String)">
            <summary>
            Get HTML to draw a table in CRM style, with control over the style.
            </summary>
            <param name="contentString">The content to go within the &lt;TABLE&gt; tag.</param>
            <param name="tableClass">The CRM Style to apply to the table.</param>
            <returns>HTML string.</returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.TableData(System.String)">
            <summary>
            Provides HTML for a &lt;TD&gt; tag.
            </summary>
            <param name="contentString">Content to display within the &lt;TD&gt; tag.</param>
            <returns>HTML for a &lt;TD&gt; tag.</returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.TableData(System.String,Sage.Styles)">
            <summary>
            Gets HTML for a &lt;TD&gt; tag, specifying the CRM style to apply.
            </summary>
            <param name="contentString">Content to display within the &lt;TD&gt; tag.</param>
            <param name="tdClass">Sage.Styles.</param>
            <returns>HTML for a &lt;TD&gt; tag.</returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.TableData(System.String,System.String)">
            <summary>
            Gets HTML for a &lt;TD&gt; tag, specifying the CRM style to apply.
            </summary>
            <param name="contentString">Content to display within the &lt;TD&gt; tag.</param>
            <param name="tdClass">CRM style to apply.</param>
            <returns>HTML for a &lt;TD&gt; tag.</returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.TableData(System.String,System.String,System.String)">
            <summary>
            Gets HTML for a &lt;TD&gt; tag, with extra control.
            </summary>
            <param name="contentString">Content to display within the &lt;TD&gt; tag.</param>
            <param name="tdClass">CRM style to apply.</param>
            <param name="extraControl">Extra settings that will be place within the start of the &lt;TD&gt; tag eg 'COLSPAN=2'.</param>
            <returns>HTML for a &lt;TD&gt; tag.</returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.TableRow(System.String)">
            <summary>
            Gets HTML for a single table row in CRM style.
            </summary>
            <param name="contentString">Value to go in the &lt;TR&gt; tag.</param>
            <returns>HTML for a row.</returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.TableRow(System.String,Sage.Styles)">
            <summary>
            Low level method to get HTML for a single table row in CRM style, specifying the CRM style.
            </summary>
            <param name="contentString">Value to go in the &lt;TR&gt; tag.</param>
            <param name="trClass">Sage.Styles.</param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.TableRow(System.String,System.String)">
            <summary>
            Low level method to get HTML for a single table row in CRM style, specifying the CRM style.
            </summary>
            <param name="contentString">Value to go in the &lt;TR&gt; tag.</param>
            <param name="trClass"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.GridStart(System.String)">
            <summary>
            Starts a CRM grid with a title.
            </summary>
            <param name="title">Title to display on grid.</param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.GridBlank(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Fills out a grid with blank rows.
            </summary>
            <param name="rows">Number of blank rows to add.</param>
            <param name="cols">Number of colums in each row.</param>
            <param name="class1">Class for the first blank row and every other row after that.</param>
            <param name="class2">Class for the second blank row and every other row after that.</param>
            <returns>HTML for blank rows.</returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.GridEnd">
            <summary>
            Ends a CRM grid that has been manually built up with hGridXXX methods.
            </summary>
            <returns>HTML to end a CRM grid.</returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.UrlRoot">
            <summary>
            Returns the root URL.
            </summary>
            <returns>Root URL.</returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.GridHeader(System.String)">
            <summary>
            Writes out a header for a CRM grid column.
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.GridHeader(System.String,System.Boolean)">
            <summary>
            Writes out header for a CRM grid colum, allowing the grid to be sorted by this column.
            </summary>
            <param name="header"></param>
            <param name="orderBy"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.GridHeader(System.String,System.Boolean,System.String)">
            <summary>
            Writes out header for a CRM grid columm, specifying a width.
            </summary>
            <param name="header"></param>
            <param name="orderBy"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.GridData(System.String)">
            <summary>
            Writes out information to a CRM grid cell, using  a string.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.GridData(System.String,System.String)">
            <summary>
            Writes out data to CRM grid cell, specifying a class to use.
            </summary>
            <param name="value"></param>
            <param name="useclass"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.HTML.HTMLBuilder.GridData(System.String,System.String,System.String,System.String)">
            <summary>
            Writes out data to a CRM grid cell, specifying a JUMP url.
            </summary>
            <param name="value"></param>
            <param name="useclass"></param>
            <param name="jump"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="T:Sage.CRM.UI.HorizontalPanel">
            <summary>
            Render the content objects in one single Horizontal column.
            </summary>
        </member>
        <member name="M:Sage.CRM.UI.HorizontalPanel.#ctor">
            <summary>
            Initializes a new instance of <b>HorizontalPanel</b>.
            </summary>
        </member>
        <member name="M:Sage.CRM.UI.HorizontalPanel.#ctor(Sage.CRM.UI.UIObject[])">
            <summary>
            Initializes a new instance of <b>HorizontalPanel</b>.
            </summary>
            <param name="items">Array of UIObject to be added to the HorizontalPanel.</param>
        </member>
        <member name="M:Sage.CRM.UI.HorizontalPanel.HtmlBody">
            <summary>
            Returns the HTMLBody of the HorizontalPanel.
            </summary>
            <returns>HorizontalPanel string.</returns>
        </member>
        <member name="T:Sage.CRM.Controls.GridColCheckBox">
            <summary>
            Provides capability to specify a CheckBox Column to be added to List Grid.
            </summary>
            <see cref="T:Sage.CRM.Controls.List"/>
        </member>
        <member name="M:Sage.CRM.Controls.GridColCheckBox.#ctor(System.String)">
            <summary>
            Initializes a new instance of <b>GridColCheckBox</b>.
            </summary>
            <param name="fieldName">Field Name.</param>
        </member>
        <member name="P:Sage.CRM.Controls.GridColCheckBox.ReadOnly">
            <summary>
            Gets or Sets the column to Read Only.
            </summary>
        </member>
        <member name="P:Sage.CRM.Controls.GridColCheckBox.OnClickScript">
            <summary>
            Gets or Sets the Javascript to be executed.
            </summary>
        </member>
        <member name="T:Sage.CRM.WebObject.DataPageNew">
            <summary>
            This class can be used to insert a new record to a table.    
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageNew.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <b>DataPageNew</b>.
            </summary>
            <param name="entityName">Entity Name.</param>
            <param name="idField">Entity Field ID.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageNew.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <b>DataPageNew</b>.
            </summary>
            <param name="entityName">Entity Name.</param>
            <param name="idField">Entity Field ID.</param>
            <param name="screenName">Screen Name.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageNew.SaveChanges(System.Boolean)">
            <summary>
            Implementation of the Save method.
            </summary>
            <param name="isNew">True for a new record.</param>
            <returns></returns>
        </member>
        <member name="P:Sage.CRM.WebObject.DataPageNew.WorkflowName">
            <summary>
            Sets the workflow name to the entity.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.DataPageNew.WorkflowState">
            <summary>
            Sest the start wokflow value to the new record.
            </summary>
        </member>
        <member name="T:Sage.CRM.WebObject.SearchPage">
            <summary>       
            Create an object of this class to draw a search screen, typically to be launched from e.g. a  Find menu button.
            Specify your Search box and Grid using the appropriate properties.
            Includes a Find button and Clear Button.
            Displays Saved Searches drop down.
            Displays Group Action buttons to allow New Document etc. for the result set as applicable.
            Initial state should be search box only, no grid.
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.SearchPage.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <b>SearchPage</b>.
            </summary>
            <param name="searchBoxName">Metada Screen Name.</param>
            <param name="listName">Metada List Name.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.SearchPage.Finalize">
            <summary>
            Destructor for the Searchpage class.
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.SearchPage.AddClearButton">
            <summary>
            This adds a button that Clears the current search. It is called from the BuildContents method.
            The default Clear button submits the page, setting the HiddenMode field to Clear.
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.SearchPage.AddSearchButton">
            <summary>
            This adds a button that does the search using the values set by the user in the search EntryGroup. It is called from the BuildContents method.
            The default Search button submits the page, setting the HiddenMode field to Save.
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.SearchPage.AddNewButton">
            <summary>
            This adds a button that allows the user to navigate to the data entry screen for the entity.
            "RunDataPageNew" must be a function in the Custom .NET Dll for this page to work.
            The property NewButton must be set to true in your custom page.
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.SearchPage.BuildContents">
            <summary>
            This is the main control method for the SearchPage. It draws the Search EntryGroup and the buttons. If the mode is Save then it executes a search and shows the results in the list. If the mode is Clear then it clears the search.
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.SearchPage.SetTopContent">
            <summary>
            The topcontent cannot be overriden when the page is invoke from NEW or FIND context.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.SearchPage.SearchBoxName">
            <summary>
            The Search Screen shown on the page.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.SearchPage.ListName">
            <summary>
            The Grid that is used for the search.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.SearchPage.ShowDeletedFields">
            <summary>
            This property will enable or disable the Deleted Record filter.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.SearchPage.ResultsGrid">
            <summary>
            Gets the List grid with the search results.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.SearchPage.SearchScreen">
            <summary>
            Gets the filter screen.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.SearchPage.NewButton">
            <summary>
             Set to true if you want a 'new' button to appear that navigates to data entry screen for
             your entity.
             </summary>
            <value>false</value>
        </member>
        <member name="P:Sage.CRM.WebObject.SearchPage.SearchButton">
            <summary>
            Controls if the search button will be displayed
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.SearchPage.ClearButton">
            <summary>
            Controls if the ClearButton button will be displayed.
            </summary>
        </member>
        <member name="P:Sage.CRM.WebObject.SearchPage.SavedSearch">
            <summary>
            Set to True if want to support saved searches.
            </summary>
            <remarks>The default is false.</remarks>
        </member>
        <member name="P:Sage.CRM.WebObject.SearchPage.isSavedSearch">
            <summary>
            Returns true when the postback comes from a saved search.
            </summary>
        </member>
        <member name="T:Sage.CRM.WebObject.DataPageDelete">
            <summary>       
             This class can be used to Delete an existing record.
             It shows one or more entry boxes in view mode with a Confirm Delete button and a Cancel button.
             Confirm Delete button to actually delete the record.
             Cancel button to go back Summary page for the record.
            </summary>   
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageDelete.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <b>DataPageDelete</b>.
            </summary>
            <param name="entityName">Entity Name.</param>
            <param name="idField">Entity ID Field.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageDelete.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <b>DataPageDelete</b>.
            </summary>
            <param name="entityName">Entity Name.</param>
            <param name="idField">Entity ID Field.</param>
            <param name="screenName">Screen Name.</param>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageDelete.BuildContents">
            <summary>
            This is the main control method for DataPageDelete. It calls BuildScreen to display the record in view mode with Confirm Delete/Cancel buttons as appropriate. 
            If the mode is Save then it calls the Validate and SaveChanges methods to delete the record, then redirects to the URL specified by the UrlAfterSave button.
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageDelete.BuildScreen">
            <summary>
            Gets the HTML to display the record in view mode plus buttons.
            </summary>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageDelete.SaveChanges">
            <summary>
            This method is called from within BuildContents after validation has been confirmed. It actually deletes the record.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Sage.CRM.WebObject.DataPageDelete.AddConfirmDeleteButton">
            <summary>
            Add the confirm delete button. This method is called from BuildScreen. Override this to remove or change the confirm delete button.
            The default confirm delete button will submit the page setting the HiddenMode to Save.
            </summary>
        </member>
        <member name="T:Sage.CRM.Graphics.FontProperties">
            <summary>
            Defines the font properties that can be applied to the GraphicBlock.
            <see cref="M:Sage.CRM.Blocks.GraphicBlock.Font(System.String,System.String)"/>
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.FontProperties.Name">
            <summary>
            Changes the current typeface.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.FontProperties.Size">
            <summary>
            Size of font to use.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.FontProperties.Color">
            <summary>
            Color of font to use.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.FontProperties.Bold">
            <summary>
            Toggles between a bold typeface and normal.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.FontProperties.Italic">
            <summary>
            Toggles between the use of italics and normal.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.FontProperties.Underline">
            <summary>
            Toggles between using underline and normal.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.FontProperties.Strikeout">
            <summary>
            Toggles between having text striked out and normal.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.FontProperties.Rotate">
            <summary>
            Performs a rotation on the font, although this does not work for all fonts.
            </summary>
        </member>
        <member name="T:Sage.CRM.Graphics.PenProperties">
            <summary>
            Defines the pen properties that can be applied to the GraphicBlock.
            <see cref="M:Sage.CRM.Blocks.GraphicBlock.Pen(System.String,System.String)"/>
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.PenProperties.Style">
            <summary>
            Allows for different line styles, for example DashDot.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.PenProperties.Color">
            <summary>
            Color of pen drawings.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.PenProperties.Width">
            <summary>
            Determines the thickness of the pen in pixels.
            </summary>
        </member>
        <member name="T:Sage.CRM.Graphics.GradientDirection">
            <summary>
            Defines the gradient direction that can be applied to the GraphicBlock.
            <see cref="M:Sage.CRM.Blocks.GraphicBlock.GradientFill(System.String,System.String,System.String,System.Int32)"/>
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.GradientDirection.TopToBottom">
            <summary>
            Top to Bottom direction.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.GradientDirection.BottomToTop">
            <summary>
            Bottom to Top direction.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.GradientDirection.LeftToRight">
            <summary>
            Left to Right direction.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.GradientDirection.RightToLeft">
            <summary>
            Right to Left direction.
            </summary>
        </member>
        <member name="T:Sage.CRM.Graphics.EffectProperties">
            <summary>
            Defines the effect properties that can be applied to the GraphicBlock.
            <see cref="M:Sage.CRM.Blocks.GraphicBlock.Effect(System.String,System.String)"/>
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.EffectProperties.Zoom">
            <summary>
            Zoom effect.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.EffectProperties.Transparent">
            <summary>
            Transparent effect.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.EffectProperties.Dither">
            <summary>
            Dither effect.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.EffectProperties.Merge">
            <summary>
            Merge effect.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.EffectProperties.DisplayErrors">
            <summary>
            DisplayErrors effect.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.EffectProperties.Clear">
            <summary>
            Clear effects.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.EffectProperties.ChangeColor">
            <summary>
            ChangeColor effect.
            </summary>
        </member>
        <member name="T:Sage.CRM.Graphics.OrgTreeProperties">
            <summary>
            Defines a few properties that can be applied to the OrgGraphicBlock.
            <see cref="M:Sage.CRM.Blocks.OrgGraphicBlock.OrgTree(Sage.CRM.Graphics.OrgTreeProperties,System.String)"/>
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.OrgTreeProperties.Add">
            <summary>
            Add property.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.OrgTreeProperties.Animated">
            <summary>
            Animated property.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.OrgTreeProperties.BoxHeight">
            <summary>
            Box height property.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.OrgTreeProperties.BoxStyle">
            <summary>
            Box style property.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.OrgTreeProperties.BoxWidth">
            <summary>
            Box width property.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.OrgTreeProperties.EntityIcon">
            <summary>
            Entity icon property.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.OrgTreeProperties.EntityImage">
            <summary>
            Entity image property.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.OrgTreeProperties.FullBoxWidth">
            <summary>
            Full box width property.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.OrgTreeProperties.FullBoxHeight">
            <summary>
            Full box height property.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.OrgTreeProperties.GetLargestLevelSize">
            <summary>
            Largest level size property.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.OrgTreeProperties.GetLevelCount">
            <summary>
            Level count property.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.OrgTreeProperties.LineStyle">
            <summary>
            Line style property.
            </summary>
        </member>
        <member name="T:Sage.CRM.Graphics.PipelineStyles">
            <summary>
            Defines styles properties that can be applied to the PipelineGraphicBlock.
            <see cref="M:Sage.CRM.Blocks.PipelineGraphicBlock.PipelineStyle(Sage.CRM.Graphics.PipelineStyles,System.String)"/>
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.PipelineStyles.Animated">
            <summary>
            Animated style.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.PipelineStyles.PipeHeight">
            <summary>
            Pipeline height style.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.PipelineStyles.PipeWidth">
            <summary>
            Pipeline width style.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.PipelineStyles.Selected">
            <summary>
            Selected style.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.PipelineStyles.SelectedHeight">
            <summary>
            Selected height style.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.PipelineStyles.SelectedWidth">
            <summary>
            Selected width style.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.PipelineStyles.Shape">
            <summary>
            Shape style.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.PipelineStyles.ShowLegend">
            <summary>
            Show legend style.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.PipelineStyles.UseGradient">
            <summary>
            Gradient style.
            </summary>
        </member>
        <member name="T:Sage.CRM.Graphics.ChartStyleNames">
            <summary>
            Styles that can be applied to the SageCrmChartGraphic block StyleName property.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.ChartStyleNames.Area">
            <summary>
            Filled form of Line graph.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.ChartStyleNames.Arrows">
            <summary>
            Values are shown with arrows.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.ChartStyleNames.Bar">
            <summary>
            Standard bar chart.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.ChartStyleNames.Bubbles">
            <summary>
            Values are shown with bubbles.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.ChartStyleNames.FastLine">
            <summary>
            More basic line graph.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.ChartStyleNames.Gantt">
            <summary>
            As used for date graphs.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.ChartStyleNames.HorizontalBar">
            <summary>
            Horizontal bar chart.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.ChartStyleNames.Line">
            <summary>
            Line graph.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.ChartStyleNames.Pie">
            <summary>
            Pie chart.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.ChartStyleNames.Point">
            <summary>
            Rectangular points are used.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.ChartStyleNames.Stairs">
            <summary>
            Line graph in the form of stairs.
            </summary>
        </member>
        <member name="T:Sage.CRM.Graphics.ChartBarStyles">
            <summary>
            Styles which can be applied to a Bar Chart. See ChartGraphicBlock.ApplyBarStyle.    
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.ChartBarStyles.Arrow">
            <summary>
            Arrow pointing either up or right.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.ChartBarStyles.Ellipse">
            <summary>
            Circular style.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.ChartBarStyles.Cylinder">
            <summary>
            Rounded bar.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.ChartBarStyles.Pyramid">
            <summary>
            Triangular shape.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.ChartBarStyles.InvPyramid">
            <summary>
            Inverted Pyramid.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.ChartBarStyles.Rectangle">
            <summary>
            Solid color Rectangle.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.ChartBarStyles.RectGradient">
            <summary>
            Filled gradient.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.ChartBarStyles.SideMargins">
            <summary>
            Toggles whether there is a gap between vertical axis and bars. Set to True by default, it can be used in conjunction with the other options.
            </summary>
        </member>
        <member name="F:Sage.CRM.Graphics.ChartBarStyles.NoSideMargins">
            <summary>
            Toggles whether there is a gap between vertical axis and bars. Set to True by default, it can be used in conjunction with the other options.
            </summary>
        </member>
        <member name="T:Sage.CRM.Utils.Keys">
            <summary>
            Object to represent the current key values within CRM.
            Keys give us information on the context a web page is in. 
            Key0 is the number of the dominant key. Each key position represents an entity
            and the value of the key represents the ID of that entity.
            </summary>
            <see cref="P:Sage.CRM.WebObject.Web.Keys"/>
        </member>
        <member name="M:Sage.CRM.Utils.Keys.GetKey(System.String)">
            <summary>
            Get the current key value for a given entity (overloaded).
            </summary>
            <param name="tableName">Name of the table/entity.</param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Utils.Keys.GetKey(System.Int32)">
            <summary>
            Get the current key value for a given key (overloaded).
            </summary>
            <param name="KeyId"></param>
            <returns></returns>
        </member>
        <member name="M:Sage.CRM.Utils.Keys.SetKey(System.String,System.Int32)">
            <summary>
            Set the current key value for a given entity (overloaded).
            </summary>
            <param name="tableName">Name of table/entity.</param>
            <param name="keyValue">Key value.</param>
            <returns>True if the key was set.</returns>
        </member>
        <member name="M:Sage.CRM.Utils.Keys.SetKey(System.Int32,System.Int32)">
            <summary>
            Set the current key value for a given key (overloaded).
            </summary>
            <param name="keyId">Key number to set.</param>
            <param name="keyValue">Key value to set.</param>
            <returns>True if the key was set.</returns>
        </member>
        <member name="P:Sage.CRM.Utils.Keys.Item(System.Int32)">
            <summary>
            Return the key value for the index.
            </summary>
            <param name="Index">Index.</param>
            <returns>Key Value.</returns>
        </member>
        <member name="P:Sage.CRM.Utils.Keys.Count">
            <summary>
            Count property - number of items in the Keys list.
            </summary>
        </member>
        <member name="T:Sage.FieldNames">
            <summary>
            FieldNames - list of all field names used within CRM
            </summary>
        </member>
        <member name="T:Sage.CRM.Blocks.FileBlock">
            <summary>
            The FileBlock object provides access to external files that are not part of the system.
            It allows these files to appear as if they are part of the system and to be called upon using ASP in the same way as any other CRM page.
            Note that the files need to be formatted for HTML appearance.
            If you do not specify where the file is stored in the directory path property, the system looks for the file in the CRM Reports directory.
            </summary>
        </member>
        <member name="M:Sage.CRM.Blocks.FileBlock.#ctor">
            <summary>
            Initializes a new instance of <b>FileBlock</b>.
            </summary>
        </member>
        <member name="M:Sage.CRM.Blocks.FileBlock.#ctor(System.String)">
            <summary>
            Initializes a new instance of <b>Block Name</b>.
            </summary>
            <param name="blockName"></param>
        </member>
        <member name="M:Sage.CRM.Blocks.FileBlock.Finalize">
            <summary>
            Destructor for FileBlock.
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.FileBlock.DirectoryPath">
            <summary>
            Specifies the directory where the files are contained. If you do not specify the full directory path, the CRM Reports directory is assumed.
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.FileBlock.FileName">
            <summary>
            Specifies the file name to be used by the File Block.
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.FileBlock.Translate">
            <summary>
            When set to true the block searches for filename_userslanguage. 
            This allows different files to be shown to different users depending on the user's language.
            </summary>
        </member>
        <member name="P:Sage.CRM.Blocks.FileBlock.ProperCase">
            <summary>
            Set true to use ProperCase.
            </summary>
        </member>
        <member name="T:Sage.CRM.Errors.SageCrmException">
            <summary>
            Base class for custom exception handling.
            </summary>
        </member>
        <member name="M:Sage.CRM.Errors.SageCrmException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <b>SageCrmException</b>.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Sage.CRM.Errors.SageCrmException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <b>SageCrmException</b>.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Sage.CRM.Errors.SageCrmException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <b>SageCrmException</b>.
            </summary>
            <param name="captionFamily">CRM Translation Family.</param>
            <param name="captionCode">CRM Translation Code.</param>        
        </member>
        <member name="M:Sage.CRM.Errors.SageCrmException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of <b>SageCrmException</b>.
            </summary>
            <param name="captionFamily">CRM Translation Family.</param>
            <param name="captionCode">CRM Translation Code.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="P:Sage.CRM.Errors.SageCrmException.CaptionCode">
            <summary>
            When the CaptionCode and the CaptionFamily properties are properly set
            the API will try to translate the message error.
            </summary>
        </member>
        <member name="P:Sage.CRM.Errors.SageCrmException.CaptionFamily">
            <summary>
            When the CaptionFamily and the CaptionCode properties are properly set
            the API will try to translate the message error.
            </summary>
        </member>
        <member name="P:Sage.CRM.Errors.SageCrmException.Translation">
            <summary>
            Use this property to enable/disable the error message translation.
            </summary>
            <remarks>The default value of this property depends on the constructor used.</remarks>
        </member>
        <member name="P:Sage.CRM.Errors.SageCrmException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
    </members>
</doc>
